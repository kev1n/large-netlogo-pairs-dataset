{
  "models": [
    {
      "modelId": "HubNet Activities_Tragedy of the Commons HubNet",
      "title": "Tragedy of the Commons HubNet",
      "documentation": "$",
      "sourceLink": "https://ccl.northwestern.edu/netlogo/models/models/HubNet%20Activities/Tragedy%20of%20the%20Commons%20HubNet.nlogo",
      "license": "CC BY-NC-SA 3.0",
      "sourceType": "Models Library",
      "collectedAt": "2025-02-25T23:19:21.947214",
      "procedures": [
        {
          "name": "startup",
          "documentation": "",
          "originalCode": "to startup\n  setup-quick-start\n  hubnet-reset\n  setup\nend",
          "numberedOriginalCode": [
            "1 | to startup",
            "2 |   setup-quick-start",
            "3 |   hubnet-reset",
            "4 |   setup",
            "5 | end"
          ],
          "pseudoCode": [
            "1 | to define the startup procedure",
            "2 |   call the quick start setup procedure",
            "3 |   reset the hubnet",
            "4 |   call the setup procedure",
            "5 | end the startup procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to startup",
              "pseudoCode": "to define the startup procedure"
            },
            {
              "lineNumber": 2,
              "originalCode": "setup-quick-start",
              "pseudoCode": "call the quick start setup procedure"
            },
            {
              "lineNumber": 3,
              "originalCode": "hubnet-reset",
              "pseudoCode": "reset the hubnet"
            },
            {
              "lineNumber": 4,
              "originalCode": "setup",
              "pseudoCode": "call the setup procedure"
            },
            {
              "lineNumber": 5,
              "originalCode": "end",
              "pseudoCode": "end the startup procedure"
            }
          ]
        },
        {
          "name": "setup",
          "documentation": "; initializes the display\n; but does not clear already created farmers",
          "originalCode": "to setup\n  setup-globals\n  setup-patches\n  clear-output\n  clear-all-plots\n  ask farmers\n    [ reset-farmers-vars ]\n  hubnet-broadcast \"Goat Seller Says:\"\n    (word \"Everyone starts with \" init-num-goats/farmer \" goats.\")\n  hubnet-broadcast \"num-goats-to-buy\" 1\n  broadcast-system-info\nend",
          "numberedOriginalCode": [
            " 1 | to setup",
            " 2 |   setup-globals",
            " 3 |   setup-patches",
            " 4 |   clear-output",
            " 5 |   clear-all-plots",
            " 6 |   ask farmers",
            " 7 |     [ reset-farmers-vars ]",
            " 8 |   hubnet-broadcast \"Goat Seller Says:\"",
            " 9 |     (word \"Everyone starts with \" init-num-goats/farmer \" goats.\")",
            "10 |   hubnet-broadcast \"num-goats-to-buy\" 1",
            "11 |   broadcast-system-info",
            "12 | end"
          ],
          "pseudoCode": [
            "1 | Define a procedure named setup",
            "2 |   Call the procedure setup-globals",
            "3 |   Call the procedure setup-patches",
            "4 |   Clear the output",
            "5 |   Clear all plots",
            "6 |   For each farmer",
            "7 |     Reset the farmer's variables",
            "8 |   Broadcast the message \"Goat Seller Says:\"",
            "9 |     Broadcast the message \"Everyone starts with\" followed by the initial number of goats per farmer followed by \"goats.\"",
            "10 |   Broadcast the message \"num-goats-to-buy\" with the value 1",
            "11 |   Broadcast system information",
            "12 | End the procedure setup"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to setup",
              "pseudoCode": "Define a procedure named setup"
            },
            {
              "lineNumber": 2,
              "originalCode": "setup-globals",
              "pseudoCode": "Call the procedure setup-globals"
            },
            {
              "lineNumber": 3,
              "originalCode": "setup-patches",
              "pseudoCode": "Call the procedure setup-patches"
            },
            {
              "lineNumber": 4,
              "originalCode": "clear-output",
              "pseudoCode": "Clear the output"
            },
            {
              "lineNumber": 5,
              "originalCode": "clear-all-plots",
              "pseudoCode": "Clear all plots"
            },
            {
              "lineNumber": 6,
              "originalCode": "ask farmers",
              "pseudoCode": "For each farmer"
            },
            {
              "lineNumber": 7,
              "originalCode": "[ reset-farmers-vars ]",
              "pseudoCode": "Reset the farmer's variables"
            },
            {
              "lineNumber": 8,
              "originalCode": "hubnet-broadcast \"Goat Seller Says:\"",
              "pseudoCode": "Broadcast the message \"Goat Seller Says:\""
            },
            {
              "lineNumber": 9,
              "originalCode": "(word \"Everyone starts with \" init-num-goats/farmer \" goats.\")",
              "pseudoCode": "Broadcast the message \"Everyone starts with\" followed by the initial number of goats per farmer followed by \"goats.\""
            },
            {
              "lineNumber": 10,
              "originalCode": "hubnet-broadcast \"num-goats-to-buy\" 1",
              "pseudoCode": "Broadcast the message \"num-goats-to-buy\" with the value 1"
            },
            {
              "lineNumber": 11,
              "originalCode": "broadcast-system-info",
              "pseudoCode": "Broadcast system information"
            },
            {
              "lineNumber": 12,
              "originalCode": "end",
              "pseudoCode": "End the procedure setup"
            }
          ]
        },
        {
          "name": "setup-globals",
          "documentation": "; initialize global variables",
          "originalCode": "to setup-globals\n  reset-ticks\n  set day 0\n\n  set grass-max 50\n  set food-max 50\n  ;; why this particular calculation?\n  set bite-size (round (100 / (grazing-period - 1)))\n\n  set colors      [ white   gray   orange   brown    yellow    turquoise\n                    cyan    sky    blue     violet   magenta   pink ]\n  set color-names [\"white\" \"gray\" \"orange\" \"brown\"  \"yellow\"  \"turquoise\"\n                   \"cyan\"  \"sky\"  \"blue\"   \"violet\" \"magenta\" \"pink\"]\n  set used-colors []\n  set num-colors length colors\n  set n/a \"n/a\"\nend",
          "numberedOriginalCode": [
            " 1 | to setup-globals",
            " 2 |   reset-ticks",
            " 3 |   set day 0",
            " 4 |",
            " 5 |   set grass-max 50",
            " 6 |   set food-max 50",
            " 7 |   ;; why this particular calculation?",
            " 8 |   set bite-size (round (100 / (grazing-period - 1)))",
            " 9 |",
            "10 |   set colors      [ white   gray   orange   brown    yellow    turquoise",
            "11 |                     cyan    sky    blue     violet   magenta   pink ]",
            "12 |   set color-names [\"white\" \"gray\" \"orange\" \"brown\"  \"yellow\"  \"turquoise\"",
            "13 |                    \"cyan\"  \"sky\"  \"blue\"   \"violet\" \"magenta\" \"pink\"]",
            "14 |   set used-colors []",
            "15 |   set num-colors length colors",
            "16 |   set n/a \"n/a\"",
            "17 | end"
          ],
          "pseudoCode": [
            "1 | To set up global variables",
            "2 |   Reset the tick counter",
            "3 |   Set the day to 0",
            "4 |",
            "5 |   Set the maximum grass to 50",
            "6 |   Set the maximum food to 50",
            "7 |   ;; why this particular calculation?",
            "8 |   Set the bite size to 100 divided by (grazing period minus 1), rounded to the nearest whole number",
            "9 |",
            "10 |   Set the colors to white, gray, orange, brown, yellow, turquoise...",
            "11 |                     ...and cyan, sky, blue, violet, magenta, pink",
            "12 |   Set the color names to \"white\", \"gray\", \"orange\", \"brown\", \"yellow\", \"turquoise\"...",
            "13 |                    ...and \"cyan\", \"sky\", \"blue\", \"violet\", \"magenta\", \"pink\"",
            "14 |   Set the used colors to an empty list",
            "15 |   Set the number of colors to the length of the colors list",
            "16 |   Set \"n/a\" to \"n/a\"",
            "17 | End"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to setup-globals",
              "pseudoCode": "To set up global variables"
            },
            {
              "lineNumber": 2,
              "originalCode": "reset-ticks",
              "pseudoCode": "Reset the tick counter"
            },
            {
              "lineNumber": 3,
              "originalCode": "set day 0",
              "pseudoCode": "Set the day to 0"
            },
            {
              "lineNumber": 4,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 5,
              "originalCode": "set grass-max 50",
              "pseudoCode": "Set the maximum grass to 50"
            },
            {
              "lineNumber": 6,
              "originalCode": "set food-max 50",
              "pseudoCode": "Set the maximum food to 50"
            },
            {
              "lineNumber": 7,
              "originalCode": ";; why this particular calculation?",
              "pseudoCode": ";; why this particular calculation?"
            },
            {
              "lineNumber": 8,
              "originalCode": "set bite-size (round (100 / (grazing-period - 1)))",
              "pseudoCode": "Set the bite size to 100 divided by (grazing period minus 1), rounded to the nearest whole number"
            },
            {
              "lineNumber": 9,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 10,
              "originalCode": "set colors      [ white   gray   orange   brown    yellow    turquoise",
              "pseudoCode": "Set the colors to white, gray, orange, brown, yellow, turquoise..."
            },
            {
              "lineNumber": 11,
              "originalCode": "cyan    sky    blue     violet   magenta   pink ]",
              "pseudoCode": "...and cyan, sky, blue, violet, magenta, pink"
            },
            {
              "lineNumber": 12,
              "originalCode": "set color-names [\"white\" \"gray\" \"orange\" \"brown\"  \"yellow\"  \"turquoise\"",
              "pseudoCode": "Set the color names to \"white\", \"gray\", \"orange\", \"brown\", \"yellow\", \"turquoise\"..."
            },
            {
              "lineNumber": 13,
              "originalCode": "\"cyan\"  \"sky\"  \"blue\"   \"violet\" \"magenta\" \"pink\"]",
              "pseudoCode": "...and \"cyan\", \"sky\", \"blue\", \"violet\", \"magenta\", \"pink\""
            },
            {
              "lineNumber": 14,
              "originalCode": "set used-colors []",
              "pseudoCode": "Set the used colors to an empty list"
            },
            {
              "lineNumber": 15,
              "originalCode": "set num-colors length colors",
              "pseudoCode": "Set the number of colors to the length of the colors list"
            },
            {
              "lineNumber": 16,
              "originalCode": "set n/a \"n/a\"",
              "pseudoCode": "Set \"n/a\" to \"n/a\""
            },
            {
              "lineNumber": 17,
              "originalCode": "end",
              "pseudoCode": "End"
            }
          ]
        },
        {
          "name": "setup-patches",
          "documentation": "; initialize grass supply for each patch",
          "originalCode": "to setup-patches\n  ask patches\n  [\n    ;; set amount of food at each patch\n    set grass-stored grass-max\n    color-patches\n  ]\nend",
          "numberedOriginalCode": [
            "1 | to setup-patches",
            "2 |   ask patches",
            "3 |   [",
            "4 |     ;; set amount of food at each patch",
            "5 |     set grass-stored grass-max",
            "6 |     color-patches",
            "7 |   ]",
            "8 | end"
          ],
          "pseudoCode": [
            "1 | When setting up patches,",
            "2 |   For each patch,",
            "3 |   [",
            "4 |     ;; set the amount of food at each patch",
            "5 |     Set the grass stored to the maximum grass.",
            "6 |     Color the patches.",
            "7 |   ]",
            "8 | End."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to setup-patches",
              "pseudoCode": "When setting up patches,"
            },
            {
              "lineNumber": 2,
              "originalCode": "ask patches",
              "pseudoCode": "For each patch,"
            },
            {
              "lineNumber": 3,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 4,
              "originalCode": ";; set amount of food at each patch",
              "pseudoCode": ";; set the amount of food at each patch"
            },
            {
              "lineNumber": 5,
              "originalCode": "set grass-stored grass-max",
              "pseudoCode": "Set the grass stored to the maximum grass."
            },
            {
              "lineNumber": 6,
              "originalCode": "color-patches",
              "pseudoCode": "Color the patches."
            },
            {
              "lineNumber": 7,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 8,
              "originalCode": "end",
              "pseudoCode": "End."
            }
          ]
        },
        {
          "name": "go",
          "documentation": "",
          "originalCode": "to go\n  ;; get command and data from client\n  listen-to-clients\n\n  every .1\n  [\n    every .5\n      [ broadcast-system-info ]\n\n    if not any? farmers\n    [\n      user-message word \"There are no farmers.  GO is stopping.  \"\n          \"Press GO again when people have logged in.\"\n      stop\n    ]\n\n    tick\n\n    ;; when not milking time\n    ifelse (ticks mod grazing-period) != 0\n    [\n      ask goats\n        [ graze ]\n    ]\n    [\n      set day day + 1\n      ask farmers\n        [ milk-goats ]\n      go-to-market ;; to buy goats\n      plot-graph\n    ]\n\n    reset-patches\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to go",
            " 2 |   ;; get command and data from client",
            " 3 |   listen-to-clients",
            " 4 |",
            " 5 |   every .1",
            " 6 |   [",
            " 7 |     every .5",
            " 8 |       [ broadcast-system-info ]",
            " 9 |",
            "10 |     if not any? farmers",
            "11 |     [",
            "12 |       user-message word \"There are no farmers.  GO is stopping.  \"",
            "13 |           \"Press GO again when people have logged in.\"",
            "14 |       stop",
            "15 |     ]",
            "16 |",
            "17 |     tick",
            "18 |",
            "19 |     ;; when not milking time",
            "20 |     ifelse (ticks mod grazing-period) != 0",
            "21 |     [",
            "22 |       ask goats",
            "23 |         [ graze ]",
            "24 |     ]",
            "25 |     [",
            "26 |       set day day + 1",
            "27 |       ask farmers",
            "28 |         [ milk-goats ]",
            "29 |       go-to-market ;; to buy goats",
            "30 |       plot-graph",
            "31 |     ]",
            "32 |",
            "33 |     reset-patches",
            "34 |   ]",
            "35 | end"
          ],
          "pseudoCode": [
            "1 | to go",
            "2 |   ;; get command and data from client",
            "3 |   listen to clients",
            "4 |",
            "5 |   every .1",
            "6 |   [",
            "7 |     every .5",
            "8 |       [ broadcast system info ]",
            "9 |",
            "10 |     if there are no farmers",
            "11 |     [",
            "12 |       display a message to the user saying \"There are no farmers.  GO is stopping.  Press GO again when people have logged in.\"",
            "13 |           \"Press GO again when people have logged in.\"",
            "14 |       stop",
            "15 |     ]",
            "16 |",
            "17 |     advance the tick",
            "18 |",
            "19 |     ;; when not milking time",
            "20 |     if the current tick is not a multiple of the grazing period",
            "21 |     [",
            "22 |       ask each goat",
            "23 |         [ graze ]",
            "24 |     ]",
            "25 |     [",
            "26 |       increment the day by one",
            "27 |       ask each farmer",
            "28 |         [ milk goats ]",
            "29 |       go to market ;; to buy goats",
            "30 |       plot graph",
            "31 |     ]",
            "32 |",
            "33 |     reset patches",
            "34 |   ]",
            "35 | end"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to go",
              "pseudoCode": "to go"
            },
            {
              "lineNumber": 2,
              "originalCode": ";; get command and data from client",
              "pseudoCode": ";; get command and data from client"
            },
            {
              "lineNumber": 3,
              "originalCode": "listen-to-clients",
              "pseudoCode": "listen to clients"
            },
            {
              "lineNumber": 4,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 5,
              "originalCode": "every .1",
              "pseudoCode": "every .1"
            },
            {
              "lineNumber": 6,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 7,
              "originalCode": "every .5",
              "pseudoCode": "every .5"
            },
            {
              "lineNumber": 8,
              "originalCode": "[ broadcast-system-info ]",
              "pseudoCode": "[ broadcast system info ]"
            },
            {
              "lineNumber": 9,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 10,
              "originalCode": "if not any? farmers",
              "pseudoCode": "if there are no farmers"
            },
            {
              "lineNumber": 11,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 12,
              "originalCode": "user-message word \"There are no farmers.  GO is stopping.  \"",
              "pseudoCode": "display a message to the user saying \"There are no farmers.  GO is stopping.  Press GO again when people have logged in.\""
            },
            {
              "lineNumber": 13,
              "originalCode": "\"Press GO again when people have logged in.\"",
              "pseudoCode": "\"Press GO again when people have logged in.\""
            },
            {
              "lineNumber": 14,
              "originalCode": "stop",
              "pseudoCode": "stop"
            },
            {
              "lineNumber": 15,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 16,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 17,
              "originalCode": "tick",
              "pseudoCode": "advance the tick"
            },
            {
              "lineNumber": 18,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 19,
              "originalCode": ";; when not milking time",
              "pseudoCode": ";; when not milking time"
            },
            {
              "lineNumber": 20,
              "originalCode": "ifelse (ticks mod grazing-period) != 0",
              "pseudoCode": "if the current tick is not a multiple of the grazing period"
            },
            {
              "lineNumber": 21,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 22,
              "originalCode": "ask goats",
              "pseudoCode": "ask each goat"
            },
            {
              "lineNumber": 23,
              "originalCode": "[ graze ]",
              "pseudoCode": "[ graze ]"
            },
            {
              "lineNumber": 24,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 25,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 26,
              "originalCode": "set day day + 1",
              "pseudoCode": "increment the day by one"
            },
            {
              "lineNumber": 27,
              "originalCode": "ask farmers",
              "pseudoCode": "ask each farmer"
            },
            {
              "lineNumber": 28,
              "originalCode": "[ milk-goats ]",
              "pseudoCode": "[ milk goats ]"
            },
            {
              "lineNumber": 29,
              "originalCode": "go-to-market ;; to buy goats",
              "pseudoCode": "go to market ;; to buy goats"
            },
            {
              "lineNumber": 30,
              "originalCode": "plot-graph",
              "pseudoCode": "plot graph"
            },
            {
              "lineNumber": 31,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 32,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 33,
              "originalCode": "reset-patches",
              "pseudoCode": "reset patches"
            },
            {
              "lineNumber": 34,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 35,
              "originalCode": "end",
              "pseudoCode": "end"
            }
          ]
        },
        {
          "name": "graze",
          "documentation": "; goat move along the common looking for best patch of grass\n; goat procedure",
          "originalCode": "to graze  ;; goat procedure\n  if (food-stored != food-max) or (other goats-here = nobody)\n  [\n    let new-food-amt (food-stored + get-amt-eaten)\n    ifelse (new-food-amt < food-max)\n      [ set food-stored new-food-amt ]\n      [ set food-stored food-max ]\n  ]\n  rt (random-float 90)\n  lt (random-float 90)\n  fd 1\nend",
          "numberedOriginalCode": [
            " 1 | to graze  ;; goat procedure",
            " 2 |   if (food-stored != food-max) or (other goats-here = nobody)",
            " 3 |   [",
            " 4 |     let new-food-amt (food-stored + get-amt-eaten)",
            " 5 |     ifelse (new-food-amt < food-max)",
            " 6 |       [ set food-stored new-food-amt ]",
            " 7 |       [ set food-stored food-max ]",
            " 8 |   ]",
            " 9 |   rt (random-float 90)",
            "10 |   lt (random-float 90)",
            "11 |   fd 1",
            "12 | end"
          ],
          "pseudoCode": [
            "1 | When the goat procedure is called,",
            "2 |   if the goat has not stored the maximum amount of food or there are no other goats present,",
            "3 |   [",
            "4 |     calculate the new amount of food stored by adding the amount eaten to the current stored amount",
            "5 |     if the new amount of food stored is less than the maximum,",
            "6 |       [ set the stored food amount to the new amount ]",
            "7 |       [ set the stored food amount to the maximum ]",
            "8 |   ]",
            "9 |   turn right by a random amount between 0 and 90 degrees",
            "10 |   turn left by a random amount between 0 and 90 degrees",
            "11 |   move forward by 1 unit",
            "12 | End the goat procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to graze  ;; goat procedure",
              "pseudoCode": "When the goat procedure is called,"
            },
            {
              "lineNumber": 2,
              "originalCode": "if (food-stored != food-max) or (other goats-here = nobody)",
              "pseudoCode": "if the goat has not stored the maximum amount of food or there are no other goats present,"
            },
            {
              "lineNumber": 3,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 4,
              "originalCode": "let new-food-amt (food-stored + get-amt-eaten)",
              "pseudoCode": "calculate the new amount of food stored by adding the amount eaten to the current stored amount"
            },
            {
              "lineNumber": 5,
              "originalCode": "ifelse (new-food-amt < food-max)",
              "pseudoCode": "if the new amount of food stored is less than the maximum,"
            },
            {
              "lineNumber": 6,
              "originalCode": "[ set food-stored new-food-amt ]",
              "pseudoCode": "[ set the stored food amount to the new amount ]"
            },
            {
              "lineNumber": 7,
              "originalCode": "[ set food-stored food-max ]",
              "pseudoCode": "[ set the stored food amount to the maximum ]"
            },
            {
              "lineNumber": 8,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 9,
              "originalCode": "rt (random-float 90)",
              "pseudoCode": "turn right by a random amount between 0 and 90 degrees"
            },
            {
              "lineNumber": 10,
              "originalCode": "lt (random-float 90)",
              "pseudoCode": "turn left by a random amount between 0 and 90 degrees"
            },
            {
              "lineNumber": 11,
              "originalCode": "fd 1",
              "pseudoCode": "move forward by 1 unit"
            },
            {
              "lineNumber": 12,
              "originalCode": "end",
              "pseudoCode": "End the goat procedure"
            }
          ]
        },
        {
          "name": "get-amt-eaten",
          "documentation": "; returns amount of grass eaten at patch and\n; sets the patch grass amount accordingly\n; goat procedure",
          "originalCode": "to-report get-amt-eaten  ;; goat procedure\n  let reduced-amt (grass-stored - bite-size)\n  ifelse (reduced-amt < 0)\n  [\n    set grass-stored 0\n    report grass-stored\n  ]\n  [\n    set grass-stored reduced-amt\n    report bite-size\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to-report get-amt-eaten  ;; goat procedure",
            " 2 |   let reduced-amt (grass-stored - bite-size)",
            " 3 |   ifelse (reduced-amt < 0)",
            " 4 |   [",
            " 5 |     set grass-stored 0",
            " 6 |     report grass-stored",
            " 7 |   ]",
            " 8 |   [",
            " 9 |     set grass-stored reduced-amt",
            "10 |     report bite-size",
            "11 |   ]",
            "12 | end"
          ],
          "pseudoCode": [
            "1 | Define a reporter procedure named get-amt-eaten.",
            "2 |   Let reduced-amt be the result of subtracting bite-size from grass-stored.",
            "3 |   If reduced-amt is less than 0, then",
            "4 |   [",
            "5 |     Set grass-stored to 0.",
            "6 |     Report grass-stored.",
            "7 |   ]",
            "8 |   Otherwise,",
            "9 |   [",
            "10 |     Set grass-stored to reduced-amt.",
            "11 |     Report bite-size.",
            "12 |   ]"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to-report get-amt-eaten  ;; goat procedure",
              "pseudoCode": "Define a reporter procedure named get-amt-eaten."
            },
            {
              "lineNumber": 2,
              "originalCode": "let reduced-amt (grass-stored - bite-size)",
              "pseudoCode": "Let reduced-amt be the result of subtracting bite-size from grass-stored."
            },
            {
              "lineNumber": 3,
              "originalCode": "ifelse (reduced-amt < 0)",
              "pseudoCode": "If reduced-amt is less than 0, then"
            },
            {
              "lineNumber": 4,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 5,
              "originalCode": "set grass-stored 0",
              "pseudoCode": "Set grass-stored to 0."
            },
            {
              "lineNumber": 6,
              "originalCode": "report grass-stored",
              "pseudoCode": "Report grass-stored."
            },
            {
              "lineNumber": 7,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 8,
              "originalCode": "[",
              "pseudoCode": "Otherwise,"
            },
            {
              "lineNumber": 9,
              "originalCode": "set grass-stored reduced-amt",
              "pseudoCode": "["
            },
            {
              "lineNumber": 10,
              "originalCode": "report bite-size",
              "pseudoCode": "Set grass-stored to reduced-amt."
            },
            {
              "lineNumber": 11,
              "originalCode": "]",
              "pseudoCode": "Report bite-size."
            },
            {
              "lineNumber": 12,
              "originalCode": "end",
              "pseudoCode": "]"
            }
          ]
        },
        {
          "name": "milk-goats",
          "documentation": "; collect milk and sells them at market ($1 = 1 gallon)\n; farmer procedure",
          "originalCode": "to milk-goats  ;; farmer procedure\n  set current-revenue\n    (round-to-place (sum [food-stored] of my-goats) 10)\n  ask my-goats\n    [ set food-stored 0 ]\n  set revenue-lst (fput current-revenue revenue-lst)\n  set total-assets total-assets + current-revenue\n  send-personal-info\nend",
          "numberedOriginalCode": [
            "1 | to milk-goats  ;; farmer procedure",
            "2 |   set current-revenue",
            "3 |     (round-to-place (sum [food-stored] of my-goats) 10)",
            "4 |   ask my-goats",
            "5 |     [ set food-stored 0 ]",
            "6 |   set revenue-lst (fput current-revenue revenue-lst)",
            "7 |   set total-assets total-assets + current-revenue",
            "8 |   send-personal-info",
            "9 | end"
          ],
          "pseudoCode": [
            "1 | Define a procedure named \"milk-goats\" which represents the farmer's action.",
            "2 |   Set the current revenue.",
            "3 |     Round the sum of the food stored by all goats to the nearest ten and assign it to current revenue.",
            "4 |   For each of my goats,",
            "5 |     Set the food stored by the goat to zero.",
            "6 |   Add the current revenue to the beginning of the revenue list.",
            "7 |   Increase the total assets by the current revenue.",
            "8 |   Send personal information.",
            "9 | End the procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to milk-goats  ;; farmer procedure",
              "pseudoCode": "Define a procedure named \"milk-goats\" which represents the farmer's action."
            },
            {
              "lineNumber": 2,
              "originalCode": "set current-revenue",
              "pseudoCode": "Set the current revenue."
            },
            {
              "lineNumber": 3,
              "originalCode": "(round-to-place (sum [food-stored] of my-goats) 10)",
              "pseudoCode": "Round the sum of the food stored by all goats to the nearest ten and assign it to current revenue."
            },
            {
              "lineNumber": 4,
              "originalCode": "ask my-goats",
              "pseudoCode": "For each of my goats,"
            },
            {
              "lineNumber": 5,
              "originalCode": "[ set food-stored 0 ]",
              "pseudoCode": "Set the food stored by the goat to zero."
            },
            {
              "lineNumber": 6,
              "originalCode": "set revenue-lst (fput current-revenue revenue-lst)",
              "pseudoCode": "Add the current revenue to the beginning of the revenue list."
            },
            {
              "lineNumber": 7,
              "originalCode": "set total-assets total-assets + current-revenue",
              "pseudoCode": "Increase the total assets by the current revenue."
            },
            {
              "lineNumber": 8,
              "originalCode": "send-personal-info",
              "pseudoCode": "Send personal information."
            },
            {
              "lineNumber": 9,
              "originalCode": "end",
              "pseudoCode": "End the procedure."
            }
          ]
        },
        {
          "name": "go-to-market",
          "documentation": "; the goat market setup",
          "originalCode": "to go-to-market\n  ask farmers\n  [\n    if num-goats-to-buy > 0\n      [ buy-goats num-goats-to-buy ]\n    if num-goats-to-buy < 0\n      [ lose-goats (- num-goats-to-buy) ]\n    if num-goats-to-buy = 0\n      [ hubnet-send user-id \"Goat Seller Says:\" \"You did not buy any goats.\" ]\n    send-personal-info\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to go-to-market",
            " 2 |   ask farmers",
            " 3 |   [",
            " 4 |     if num-goats-to-buy > 0",
            " 5 |       [ buy-goats num-goats-to-buy ]",
            " 6 |     if num-goats-to-buy < 0",
            " 7 |       [ lose-goats (- num-goats-to-buy) ]",
            " 8 |     if num-goats-to-buy = 0",
            " 9 |       [ hubnet-send user-id \"Goat Seller Says:\" \"You did not buy any goats.\" ]",
            "10 |     send-personal-info",
            "11 |   ]",
            "12 | end"
          ],
          "pseudoCode": [
            "1 | When the market is open,",
            "2 |   For each farmer,",
            "3 |   [",
            "4 |     If the number of goats to buy is greater than zero,",
            "5 |       [ Buy the specified number of goats ]",
            "6 |     If the number of goats to buy is less than zero,",
            "7 |       [ Lose the specified number of goats ]",
            "8 |     If the number of goats to buy is equal to zero,",
            "9 |       [ Send a message to the user saying \"Goat Seller Says: You did not buy any goats.\" ]",
            "10 |     Send personal information",
            "11 |   ]",
            "12 | End the market session."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to go-to-market",
              "pseudoCode": "When the market is open,"
            },
            {
              "lineNumber": 2,
              "originalCode": "ask farmers",
              "pseudoCode": "For each farmer,"
            },
            {
              "lineNumber": 3,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 4,
              "originalCode": "if num-goats-to-buy > 0",
              "pseudoCode": "If the number of goats to buy is greater than zero,"
            },
            {
              "lineNumber": 5,
              "originalCode": "[ buy-goats num-goats-to-buy ]",
              "pseudoCode": "[ Buy the specified number of goats ]"
            },
            {
              "lineNumber": 6,
              "originalCode": "if num-goats-to-buy < 0",
              "pseudoCode": "If the number of goats to buy is less than zero,"
            },
            {
              "lineNumber": 7,
              "originalCode": "[ lose-goats (- num-goats-to-buy) ]",
              "pseudoCode": "[ Lose the specified number of goats ]"
            },
            {
              "lineNumber": 8,
              "originalCode": "if num-goats-to-buy = 0",
              "pseudoCode": "If the number of goats to buy is equal to zero,"
            },
            {
              "lineNumber": 9,
              "originalCode": "[ hubnet-send user-id \"Goat Seller Says:\" \"You did not buy any goats.\" ]",
              "pseudoCode": "[ Send a message to the user saying \"Goat Seller Says: You did not buy any goats.\" ]"
            },
            {
              "lineNumber": 10,
              "originalCode": "send-personal-info",
              "pseudoCode": "Send personal information"
            },
            {
              "lineNumber": 11,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 12,
              "originalCode": "end",
              "pseudoCode": "End the market session."
            }
          ]
        },
        {
          "name": "buy-goats",
          "documentation": "; farmers buy goats at market\n; farmer procedure",
          "originalCode": "to buy-goats [ num-goats-desired ]  ;; farmer procedure\n  let got-number-desired? true\n  let num-goats-afford (int (total-assets / cost/goat))\n  let num-goats-purchase num-goats-desired\n  if (num-goats-afford < num-goats-purchase)\n  [\n    set num-goats-purchase num-goats-afford\n    set got-number-desired? false\n  ]\n  let cost-of-purchase num-goats-purchase * cost/goat\n  set total-assets (total-assets - cost-of-purchase)\n  hubnet-send user-id \"Goat Seller Says:\"\n    (seller-says got-number-desired? num-goats-desired num-goats-purchase)\n\n  ;; create the goats purchased by the farmer\n  hatch num-goats-purchase\n    [ setup-goats user-id ]\nend",
          "numberedOriginalCode": [
            " 1 | to buy-goats [ num-goats-desired ]  ;; farmer procedure",
            " 2 |   let got-number-desired? true",
            " 3 |   let num-goats-afford (int (total-assets / cost/goat))",
            " 4 |   let num-goats-purchase num-goats-desired",
            " 5 |   if (num-goats-afford < num-goats-purchase)",
            " 6 |   [",
            " 7 |     set num-goats-purchase num-goats-afford",
            " 8 |     set got-number-desired? false",
            " 9 |   ]",
            "10 |   let cost-of-purchase num-goats-purchase * cost/goat",
            "11 |   set total-assets (total-assets - cost-of-purchase)",
            "12 |   hubnet-send user-id \"Goat Seller Says:\"",
            "13 |     (seller-says got-number-desired? num-goats-desired num-goats-purchase)",
            "14 |",
            "15 |   ;; create the goats purchased by the farmer",
            "16 |   hatch num-goats-purchase",
            "17 |     [ setup-goats user-id ]",
            "18 | end"
          ],
          "pseudoCode": [
            "1 | define a procedure named buy-goats that takes a number of goats desired as input",
            "2 |   set a variable got-number-desired? to true",
            "3 |   calculate the number of goats that can be afforded and set it to a variable num-goats-afford",
            "4 |   set the number of goats to purchase to the number of goats desired",
            "5 |   if the number of goats affordable is less than the number of goats to purchase",
            "6 |   [",
            "7 |     set the number of goats to purchase to the number of goats affordable",
            "8 |     set got-number-desired? to false",
            "9 |   ]",
            "10 |   calculate the cost of the purchase and set it to a variable cost-of-purchase",
            "11 |   subtract the cost of the purchase from the total assets",
            "12 |   send a message to the user with the ID",
            "13 |     include the message from the goat seller",
            "14 |",
            "15 |   ;; create the goats purchased by the farmer",
            "16 |   create the number of goats to purchase",
            "17 |     setup the goats with the user ID",
            "18 | end"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to buy-goats [ num-goats-desired ]  ;; farmer procedure",
              "pseudoCode": "define a procedure named buy-goats that takes a number of goats desired as input"
            },
            {
              "lineNumber": 2,
              "originalCode": "let got-number-desired? true",
              "pseudoCode": "set a variable got-number-desired? to true"
            },
            {
              "lineNumber": 3,
              "originalCode": "let num-goats-afford (int (total-assets / cost/goat))",
              "pseudoCode": "calculate the number of goats that can be afforded and set it to a variable num-goats-afford"
            },
            {
              "lineNumber": 4,
              "originalCode": "let num-goats-purchase num-goats-desired",
              "pseudoCode": "set the number of goats to purchase to the number of goats desired"
            },
            {
              "lineNumber": 5,
              "originalCode": "if (num-goats-afford < num-goats-purchase)",
              "pseudoCode": "if the number of goats affordable is less than the number of goats to purchase"
            },
            {
              "lineNumber": 6,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 7,
              "originalCode": "set num-goats-purchase num-goats-afford",
              "pseudoCode": "set the number of goats to purchase to the number of goats affordable"
            },
            {
              "lineNumber": 8,
              "originalCode": "set got-number-desired? false",
              "pseudoCode": "set got-number-desired? to false"
            },
            {
              "lineNumber": 9,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 10,
              "originalCode": "let cost-of-purchase num-goats-purchase * cost/goat",
              "pseudoCode": "calculate the cost of the purchase and set it to a variable cost-of-purchase"
            },
            {
              "lineNumber": 11,
              "originalCode": "set total-assets (total-assets - cost-of-purchase)",
              "pseudoCode": "subtract the cost of the purchase from the total assets"
            },
            {
              "lineNumber": 12,
              "originalCode": "hubnet-send user-id \"Goat Seller Says:\"",
              "pseudoCode": "send a message to the user with the ID"
            },
            {
              "lineNumber": 13,
              "originalCode": "(seller-says got-number-desired? num-goats-desired num-goats-purchase)",
              "pseudoCode": "include the message from the goat seller"
            },
            {
              "lineNumber": 14,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 15,
              "originalCode": ";; create the goats purchased by the farmer",
              "pseudoCode": ";; create the goats purchased by the farmer"
            },
            {
              "lineNumber": 16,
              "originalCode": "hatch num-goats-purchase",
              "pseudoCode": "create the number of goats to purchase"
            },
            {
              "lineNumber": 17,
              "originalCode": "[ setup-goats user-id ]",
              "pseudoCode": "setup the goats with the user ID"
            },
            {
              "lineNumber": 18,
              "originalCode": "end",
              "pseudoCode": "end"
            }
          ]
        },
        {
          "name": "lose-goats",
          "documentation": "; farmers eliminate some of their goats (with no gain in assets)\n; farmer procedure",
          "originalCode": "to lose-goats [ num-to-lose ]  ;; farmer procedure\n  if ((count my-goats) < num-to-lose)\n    [ set num-to-lose (count my-goats) ]\n  hubnet-send user-id \"Goat Seller Says:\"\n    (word \"You lost \" num-to-lose \" goats.\")\n\n  ;; eliminate the goats ditched by the farmer\n  ask (n-of num-to-lose my-goats)\n    [ die ]\nend",
          "numberedOriginalCode": [
            " 1 | to lose-goats [ num-to-lose ]  ;; farmer procedure",
            " 2 |   if ((count my-goats) < num-to-lose)",
            " 3 |     [ set num-to-lose (count my-goats) ]",
            " 4 |   hubnet-send user-id \"Goat Seller Says:\"",
            " 5 |     (word \"You lost \" num-to-lose \" goats.\")",
            " 6 |",
            " 7 |   ;; eliminate the goats ditched by the farmer",
            " 8 |   ask (n-of num-to-lose my-goats)",
            " 9 |     [ die ]",
            "10 | end"
          ],
          "pseudoCode": [
            "1 | Define a procedure named lose-goats that takes one input, num-to-lose.",
            "2 |   If the number of goats is less than num-to-lose,",
            "3 |     Set num-to-lose to the number of goats.",
            "4 |   Send a message to the user with the ID user-id.",
            "5 |     The message is \"Goat Seller Says: You lost \" followed by num-to-lose and \" goats.\"",
            "6 |",
            "7 |   ;; eliminate the goats ditched by the farmer",
            "8 |   For num-to-lose goats,",
            "9 |     The goat dies.",
            "10 | End the procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to lose-goats [ num-to-lose ]  ;; farmer procedure",
              "pseudoCode": "Define a procedure named lose-goats that takes one input, num-to-lose."
            },
            {
              "lineNumber": 2,
              "originalCode": "if ((count my-goats) < num-to-lose)",
              "pseudoCode": "If the number of goats is less than num-to-lose,"
            },
            {
              "lineNumber": 3,
              "originalCode": "[ set num-to-lose (count my-goats) ]",
              "pseudoCode": "Set num-to-lose to the number of goats."
            },
            {
              "lineNumber": 4,
              "originalCode": "hubnet-send user-id \"Goat Seller Says:\"",
              "pseudoCode": "Send a message to the user with the ID user-id."
            },
            {
              "lineNumber": 5,
              "originalCode": "(word \"You lost \" num-to-lose \" goats.\")",
              "pseudoCode": "The message is \"Goat Seller Says: You lost \" followed by num-to-lose and \" goats.\""
            },
            {
              "lineNumber": 6,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 7,
              "originalCode": ";; eliminate the goats ditched by the farmer",
              "pseudoCode": ";; eliminate the goats ditched by the farmer"
            },
            {
              "lineNumber": 8,
              "originalCode": "ask (n-of num-to-lose my-goats)",
              "pseudoCode": "For num-to-lose goats,"
            },
            {
              "lineNumber": 9,
              "originalCode": "[ die ]",
              "pseudoCode": "The goat dies."
            },
            {
              "lineNumber": 10,
              "originalCode": "end",
              "pseudoCode": "End the procedure."
            }
          ]
        },
        {
          "name": "seller-says",
          "documentation": "; reports the appropriate information on the transaction of purchasing goats",
          "originalCode": "to-report seller-says [ success? desired purchased ]\n  let seller-message \"\"\n  let cost purchased * cost/goat\n  ifelse success?\n  [\n    ifelse (purchased > 1)\n      [ set seller-message (word \"Here are your \" purchased \" goats.  \") ]\n      [ set seller-message \"Here is your goat.  \" ]\n    set seller-message (word seller-message \"You have spent $\" cost \".\")\n  ]\n  [\n    set seller-message (word \"You do not have enough to buy \" desired \".  \"\n      \"You can afford \" purchased \" for $\" cost \".\")\n  ]\n  report seller-message\nend",
          "numberedOriginalCode": [
            " 1 | to-report seller-says [ success? desired purchased ]",
            " 2 |   let seller-message \"\"",
            " 3 |   let cost purchased * cost/goat",
            " 4 |   ifelse success?",
            " 5 |   [",
            " 6 |     ifelse (purchased > 1)",
            " 7 |       [ set seller-message (word \"Here are your \" purchased \" goats.  \") ]",
            " 8 |       [ set seller-message \"Here is your goat.  \" ]",
            " 9 |     set seller-message (word seller-message \"You have spent $\" cost \".\")",
            "10 |   ]",
            "11 |   [",
            "12 |     set seller-message (word \"You do not have enough to buy \" desired \".  \"",
            "13 |       \"You can afford \" purchased \" for $\" cost \".\")",
            "14 |   ]",
            "15 |   report seller-message",
            "16 | end"
          ],
          "pseudoCode": [
            "1 | To report the message that the seller says, given whether the transaction was successful, the desired number of goats, and the number of goats purchased:",
            "2 |   Let the seller message be an empty string.",
            "3 |   Let the cost be the number of goats purchased times the cost per goat.",
            "4 |   If the transaction was successful:",
            "5 |   [",
            "6 |     If more than one goat was purchased:",
            "7 |       Set the seller message to \"Here are your [number of goats] goats.\"",
            "8 |       Otherwise, set the seller message to \"Here is your goat.\"",
            "9 |     Append \"You have spent $[cost].\" to the seller message.",
            "10 |   ]",
            "11 |   Otherwise:",
            "12 |   [",
            "13 |     Set the seller message to \"You do not have enough to buy [desired number of goats]. You can afford [number of goats purchased] for $[cost].\"",
            "14 |   ]",
            "15 |   Report the seller message.",
            "16 | End."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to-report seller-says [ success? desired purchased ]",
              "pseudoCode": "To report the message that the seller says, given whether the transaction was successful, the desired number of goats, and the number of goats purchased:"
            },
            {
              "lineNumber": 2,
              "originalCode": "let seller-message \"\"",
              "pseudoCode": "Let the seller message be an empty string."
            },
            {
              "lineNumber": 3,
              "originalCode": "let cost purchased * cost/goat",
              "pseudoCode": "Let the cost be the number of goats purchased times the cost per goat."
            },
            {
              "lineNumber": 4,
              "originalCode": "ifelse success?",
              "pseudoCode": "If the transaction was successful:"
            },
            {
              "lineNumber": 5,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 6,
              "originalCode": "ifelse (purchased > 1)",
              "pseudoCode": "If more than one goat was purchased:"
            },
            {
              "lineNumber": 7,
              "originalCode": "[ set seller-message (word \"Here are your \" purchased \" goats.  \") ]",
              "pseudoCode": "Set the seller message to \"Here are your [number of goats] goats.\""
            },
            {
              "lineNumber": 8,
              "originalCode": "[ set seller-message \"Here is your goat.  \" ]",
              "pseudoCode": "Otherwise, set the seller message to \"Here is your goat.\""
            },
            {
              "lineNumber": 9,
              "originalCode": "set seller-message (word seller-message \"You have spent $\" cost \".\")",
              "pseudoCode": "Append \"You have spent $[cost].\" to the seller message."
            },
            {
              "lineNumber": 10,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 11,
              "originalCode": "[",
              "pseudoCode": "Otherwise:"
            },
            {
              "lineNumber": 12,
              "originalCode": "set seller-message (word \"You do not have enough to buy \" desired \".  \"",
              "pseudoCode": "["
            },
            {
              "lineNumber": 13,
              "originalCode": "\"You can afford \" purchased \" for $\" cost \".\")",
              "pseudoCode": "Set the seller message to \"You do not have enough to buy [desired number of goats]. You can afford [number of goats purchased] for $[cost].\""
            },
            {
              "lineNumber": 14,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 15,
              "originalCode": "report seller-message",
              "pseudoCode": "Report the seller message."
            },
            {
              "lineNumber": 16,
              "originalCode": "end",
              "pseudoCode": "End."
            }
          ]
        },
        {
          "name": "setup-goats",
          "documentation": "; initializes goat variables\n; turtle procedure",
          "originalCode": "to setup-goats [ farmer# ]  ;; turtle procedure\n  set breed goats\n  setxy random-xcor random-ycor\n  set shape \"goat\"\n  set food-stored 0\n  set owner# farmer#\n  show-turtle\nend",
          "numberedOriginalCode": [
            "1 | to setup-goats [ farmer# ]  ;; turtle procedure",
            "2 |   set breed goats",
            "3 |   setxy random-xcor random-ycor",
            "4 |   set shape \"goat\"",
            "5 |   set food-stored 0",
            "6 |   set owner# farmer#",
            "7 |   show-turtle",
            "8 | end"
          ],
          "pseudoCode": [
            "1 | When setting up a goat with a farmer number:",
            "2 |   Set the breed to goats",
            "3 |   Place the goat at a random x and y coordinate",
            "4 |   Set the shape to \"goat\"",
            "5 |   Set the food stored to 0",
            "6 |   Set the owner number to the farmer number",
            "7 |   Make the goat visible",
            "8 | End the goat setup procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to setup-goats [ farmer# ]  ;; turtle procedure",
              "pseudoCode": "When setting up a goat with a farmer number:"
            },
            {
              "lineNumber": 2,
              "originalCode": "set breed goats",
              "pseudoCode": "Set the breed to goats"
            },
            {
              "lineNumber": 3,
              "originalCode": "setxy random-xcor random-ycor",
              "pseudoCode": "Place the goat at a random x and y coordinate"
            },
            {
              "lineNumber": 4,
              "originalCode": "set shape \"goat\"",
              "pseudoCode": "Set the shape to \"goat\""
            },
            {
              "lineNumber": 5,
              "originalCode": "set food-stored 0",
              "pseudoCode": "Set the food stored to 0"
            },
            {
              "lineNumber": 6,
              "originalCode": "set owner# farmer#",
              "pseudoCode": "Set the owner number to the farmer number"
            },
            {
              "lineNumber": 7,
              "originalCode": "show-turtle",
              "pseudoCode": "Make the goat visible"
            },
            {
              "lineNumber": 8,
              "originalCode": "end",
              "pseudoCode": "End the goat setup procedure"
            }
          ]
        },
        {
          "name": "reset-patches",
          "documentation": "; updates patches' color and increase grass supply with growth rate",
          "originalCode": "to reset-patches\n  ask patches with [grass-stored < grass-max]\n  [\n    let new-grass-amt (grass-stored + grass-growth-rate)\n    ifelse (new-grass-amt > grass-max)\n      [ set grass-stored grass-max ]\n      [ set grass-stored new-grass-amt ]\n    color-patches\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to reset-patches",
            " 2 |   ask patches with [grass-stored < grass-max]",
            " 3 |   [",
            " 4 |     let new-grass-amt (grass-stored + grass-growth-rate)",
            " 5 |     ifelse (new-grass-amt > grass-max)",
            " 6 |       [ set grass-stored grass-max ]",
            " 7 |       [ set grass-stored new-grass-amt ]",
            " 8 |     color-patches",
            " 9 |   ]",
            "10 | end"
          ],
          "pseudoCode": [
            "1 | to reset patches",
            "2 |   for each patch where the grass stored is less than the grass maximum",
            "3 |   [",
            "4 |     calculate the new grass amount as the sum of the grass stored and the grass growth rate",
            "5 |     if the new grass amount is greater than the grass maximum",
            "6 |       then set the grass stored to the grass maximum",
            "7 |     else set the grass stored to the new grass amount",
            "8 |     color the patches",
            "9 |   ]",
            "10 | end"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to reset-patches",
              "pseudoCode": "to reset patches"
            },
            {
              "lineNumber": 2,
              "originalCode": "ask patches with [grass-stored < grass-max]",
              "pseudoCode": "for each patch where the grass stored is less than the grass maximum"
            },
            {
              "lineNumber": 3,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 4,
              "originalCode": "let new-grass-amt (grass-stored + grass-growth-rate)",
              "pseudoCode": "calculate the new grass amount as the sum of the grass stored and the grass growth rate"
            },
            {
              "lineNumber": 5,
              "originalCode": "ifelse (new-grass-amt > grass-max)",
              "pseudoCode": "if the new grass amount is greater than the grass maximum"
            },
            {
              "lineNumber": 6,
              "originalCode": "[ set grass-stored grass-max ]",
              "pseudoCode": "then set the grass stored to the grass maximum"
            },
            {
              "lineNumber": 7,
              "originalCode": "[ set grass-stored new-grass-amt ]",
              "pseudoCode": "else set the grass stored to the new grass amount"
            },
            {
              "lineNumber": 8,
              "originalCode": "color-patches",
              "pseudoCode": "color the patches"
            },
            {
              "lineNumber": 9,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 10,
              "originalCode": "end",
              "pseudoCode": "end"
            }
          ]
        },
        {
          "name": "color-patches",
          "documentation": "; colors patches according to amount of grass on the patch\n; patch procedure",
          "originalCode": "to color-patches  ;; patch procedure\n  set pcolor (scale-color green grass-stored -5 (2 * grass-max))\nend",
          "numberedOriginalCode": [
            "1 | to color-patches  ;; patch procedure",
            "2 |   set pcolor (scale-color green grass-stored -5 (2 * grass-max))",
            "3 | end"
          ],
          "pseudoCode": [
            "1 | When the patch procedure is called,",
            "2 |   set the patch color to a scaled color based on the green value of grass-stored, adjusted by the maximum grass value.",
            "3 | End the patch procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to color-patches  ;; patch procedure",
              "pseudoCode": "When the patch procedure is called,"
            },
            {
              "lineNumber": 2,
              "originalCode": "set pcolor (scale-color green grass-stored -5 (2 * grass-max))",
              "pseudoCode": "set the patch color to a scaled color based on the green value of grass-stored, adjusted by the maximum grass value."
            },
            {
              "lineNumber": 3,
              "originalCode": "end",
              "pseudoCode": "End the patch procedure."
            }
          ]
        },
        {
          "name": "plot-graph",
          "documentation": "; plots the graph of the system",
          "originalCode": "to plot-graph\n  plot-value \"Milk Supply\" milk-supply\n  plot-value \"Grass Supply\" grass-supply\n  plot-value \"Goat Population\" count goats\n  plot-value \"Average Revenue\" avg-revenue\nend",
          "numberedOriginalCode": [
            "1 | to plot-graph",
            "2 |   plot-value \"Milk Supply\" milk-supply",
            "3 |   plot-value \"Grass Supply\" grass-supply",
            "4 |   plot-value \"Goat Population\" count goats",
            "5 |   plot-value \"Average Revenue\" avg-revenue",
            "6 | end"
          ],
          "pseudoCode": [
            "1 | When the plot-graph procedure is called,",
            "2 |   plot the value of milk supply on the graph",
            "3 |   plot the value of grass supply on the graph",
            "4 |   plot the count of goats on the graph",
            "5 |   plot the average revenue on the graph",
            "6 | End the plot-graph procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to plot-graph",
              "pseudoCode": "When the plot-graph procedure is called,"
            },
            {
              "lineNumber": 2,
              "originalCode": "plot-value \"Milk Supply\" milk-supply",
              "pseudoCode": "plot the value of milk supply on the graph"
            },
            {
              "lineNumber": 3,
              "originalCode": "plot-value \"Grass Supply\" grass-supply",
              "pseudoCode": "plot the value of grass supply on the graph"
            },
            {
              "lineNumber": 4,
              "originalCode": "plot-value \"Goat Population\" count goats",
              "pseudoCode": "plot the count of goats on the graph"
            },
            {
              "lineNumber": 5,
              "originalCode": "plot-value \"Average Revenue\" avg-revenue",
              "pseudoCode": "plot the average revenue on the graph"
            },
            {
              "lineNumber": 6,
              "originalCode": "end",
              "pseudoCode": "End the plot-graph procedure"
            }
          ]
        },
        {
          "name": "plot-value",
          "documentation": "; plot value on the plot called name-of-plot",
          "originalCode": "to plot-value [ name-of-plot value ]\n  set-current-plot name-of-plot\n  plot value\nend",
          "numberedOriginalCode": [
            "1 | to plot-value [ name-of-plot value ]",
            "2 |   set-current-plot name-of-plot",
            "3 |   plot value",
            "4 | end"
          ],
          "pseudoCode": [
            "1 | Define a procedure named plot-value that takes two inputs: name-of-plot and value.",
            "2 |   Set the current plot to the name-of-plot.",
            "3 |   Plot the value on the current plot.",
            "4 | End the procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to plot-value [ name-of-plot value ]",
              "pseudoCode": "Define a procedure named plot-value that takes two inputs: name-of-plot and value."
            },
            {
              "lineNumber": 2,
              "originalCode": "set-current-plot name-of-plot",
              "pseudoCode": "Set the current plot to the name-of-plot."
            },
            {
              "lineNumber": 3,
              "originalCode": "plot value",
              "pseudoCode": "Plot the value on the current plot."
            },
            {
              "lineNumber": 4,
              "originalCode": "end",
              "pseudoCode": "End the procedure."
            }
          ]
        },
        {
          "name": "milk-supply",
          "documentation": "",
          "originalCode": "to-report milk-supply\n  ;; we can just compute this from revenue, since the price of milk is\n  ;; fixed at $1/1 gallon.\n  report sum [ current-revenue ] of farmers\nend",
          "numberedOriginalCode": [
            "1 | to-report milk-supply",
            "2 |   ;; we can just compute this from revenue, since the price of milk is",
            "3 |   ;; fixed at $1/1 gallon.",
            "4 |   report sum [ current-revenue ] of farmers",
            "5 | end"
          ],
          "pseudoCode": [
            "1 | To report the milk supply:",
            "2 |   ;; we can just compute this from revenue, since the price of milk is",
            "3 |   ;; fixed at $1/1 gallon.",
            "4 |   report the sum of the current revenue of all farmers",
            "5 | End"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to-report milk-supply",
              "pseudoCode": "To report the milk supply:"
            },
            {
              "lineNumber": 2,
              "originalCode": ";; we can just compute this from revenue, since the price of milk is",
              "pseudoCode": ";; we can just compute this from revenue, since the price of milk is"
            },
            {
              "lineNumber": 3,
              "originalCode": ";; fixed at $1/1 gallon.",
              "pseudoCode": ";; fixed at $1/1 gallon."
            },
            {
              "lineNumber": 4,
              "originalCode": "report sum [ current-revenue ] of farmers",
              "pseudoCode": "report the sum of the current revenue of all farmers"
            },
            {
              "lineNumber": 5,
              "originalCode": "end",
              "pseudoCode": "End"
            }
          ]
        },
        {
          "name": "grass-supply",
          "documentation": "",
          "originalCode": "to-report grass-supply\n  report sum [ grass-stored ] of patches\nend",
          "numberedOriginalCode": [
            "1 | to-report grass-supply",
            "2 |   report sum [ grass-stored ] of patches",
            "3 | end"
          ],
          "pseudoCode": [
            "1 | To report the grass supply:",
            "2 |   Report the sum of the grass stored on all patches",
            "3 | End"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to-report grass-supply",
              "pseudoCode": "To report the grass supply:"
            },
            {
              "lineNumber": 2,
              "originalCode": "report sum [ grass-stored ] of patches",
              "pseudoCode": "Report the sum of the grass stored on all patches"
            },
            {
              "lineNumber": 3,
              "originalCode": "end",
              "pseudoCode": "End"
            }
          ]
        },
        {
          "name": "avg-revenue",
          "documentation": "",
          "originalCode": "to-report avg-revenue\n  report mean [ current-revenue ] of farmers\nend",
          "numberedOriginalCode": [
            "1 | to-report avg-revenue",
            "2 |   report mean [ current-revenue ] of farmers",
            "3 | end"
          ],
          "pseudoCode": [
            "1 | To calculate the average revenue:",
            "2 |   calculate the mean of the current revenue for all farmers",
            "3 | End the calculation"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to-report avg-revenue",
              "pseudoCode": "To calculate the average revenue:"
            },
            {
              "lineNumber": 2,
              "originalCode": "report mean [ current-revenue ] of farmers",
              "pseudoCode": "calculate the mean of the current revenue for all farmers"
            },
            {
              "lineNumber": 3,
              "originalCode": "end",
              "pseudoCode": "End the calculation"
            }
          ]
        },
        {
          "name": "my-goats",
          "documentation": "; returns agentset that of goats of a particular farmer\n; farmer procedure",
          "originalCode": "to-report my-goats  ;; farmer procedure\n  report goats with [ owner# = [user-id] of myself ]\nend",
          "numberedOriginalCode": [
            "1 | to-report my-goats  ;; farmer procedure",
            "2 |   report goats with [ owner# = [user-id] of myself ]",
            "3 | end"
          ],
          "pseudoCode": [
            "1 | Define a reporter procedure named my-goats.",
            "2 |   Report the goats that have an owner number equal to the user ID of the current agent.",
            "3 | End the procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to-report my-goats  ;; farmer procedure",
              "pseudoCode": "Define a reporter procedure named my-goats."
            },
            {
              "lineNumber": 2,
              "originalCode": "report goats with [ owner# = [user-id] of myself ]",
              "pseudoCode": "Report the goats that have an owner number equal to the user ID of the current agent."
            },
            {
              "lineNumber": 3,
              "originalCode": "end",
              "pseudoCode": "End the procedure."
            }
          ]
        },
        {
          "name": "round-to-place",
          "documentation": "; rounds given number to certain decimal-place",
          "originalCode": "to-report round-to-place [ num decimal-place ]\n  report (round (num * decimal-place)) / decimal-place\nend",
          "numberedOriginalCode": [
            "1 | to-report round-to-place [ num decimal-place ]",
            "2 |   report (round (num * decimal-place)) / decimal-place",
            "3 | end"
          ],
          "pseudoCode": [
            "1 | To report a number rounded to a specific decimal place:",
            "2 |   Report the result of rounding the number multiplied by the decimal place, then dividing by the decimal place",
            "3 | End the reporting function"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to-report round-to-place [ num decimal-place ]",
              "pseudoCode": "To report a number rounded to a specific decimal place:"
            },
            {
              "lineNumber": 2,
              "originalCode": "report (round (num * decimal-place)) / decimal-place",
              "pseudoCode": "Report the result of rounding the number multiplied by the decimal place, then dividing by the decimal place"
            },
            {
              "lineNumber": 3,
              "originalCode": "end",
              "pseudoCode": "End the reporting function"
            }
          ]
        },
        {
          "name": "setup-quick-start",
          "documentation": "; instructions to quickly setup the model, and clients to run this activity",
          "originalCode": "to setup-quick-start\n  set qs-item 0\n  set qs-items\n  [\n    \"Teacher: Follow these directions to run the HubNet activity.\"\n      \"Optional: Zoom In (see Tools in the Menu Bar)\"\n      \"Optional: Change any of the settings....\"\n      \"If you do change the settings, press the SETUP button.\"\n      \"Press the LOGIN button to allow people to login.\"\n      \"Everyone: Open up a HubNet Client on your machine and...\"\n        \"type your user name, select this activity and press ENTER.\"\n\n    \"Teacher: Once everyone has logged in,...\"\n        \"turn off the LOGIN button by pressing it again.\"\n      \"Have the students acquaint themselves with the information...\"\n        \"available to them in the monitors, buttons, and sliders.\"\n      \"Then press the GO button to start the simulation.\"\n      \"Please note that you may adjust the length of time...\"\n        \"GRAZING-PERIOD, that goats are allowed to graze each day.\"\n      \"For a quicker demonstration, reduce the...\"\n        \"GRASS-GROWTH-RATE slider.\"\n      \"To curb buying incentives of the students, increase...\"\n        \"the COST/GOAT slider.\"\n      \"Any of the above mentioned parameters - ...\"\n        \"GRAZING-PERIOD, GRASS-GROWTH-RATE, and COST/GOAT -...\"\n        \"may be altered without stopping the simulation.\"\n\n    \"Teacher: To run the activity again with the same group,...\"\n        \"stop the model by pressing the GO button, if it is on.\"\n        \"Change any of the settings that you would like.\"\n      \"Press the SETUP button.\"\n\n    \"Teacher: Restart the simulation by pressing the GO button again.\"\n\n    \"Teacher: To start the simulation over with a new group,...\"\n        \"stop the model by pressing the GO button if it is on...\"\n        \"press the RESET button in the Control Center\"\n        \"and follow these instructions again from the beginning.\"\n  ]\n  set quick-start (item qs-item qs-items)\nend",
          "numberedOriginalCode": [
            " 1 | to setup-quick-start",
            " 2 |   set qs-item 0",
            " 3 |   set qs-items",
            " 4 |   [",
            " 5 |     \"Teacher: Follow these directions to run the HubNet activity.\"",
            " 6 |       \"Optional: Zoom In (see Tools in the Menu Bar)\"",
            " 7 |       \"Optional: Change any of the settings....\"",
            " 8 |       \"If you do change the settings, press the SETUP button.\"",
            " 9 |       \"Press the LOGIN button to allow people to login.\"",
            "10 |       \"Everyone: Open up a HubNet Client on your machine and...\"",
            "11 |         \"type your user name, select this activity and press ENTER.\"",
            "12 |",
            "13 |     \"Teacher: Once everyone has logged in,...\"",
            "14 |         \"turn off the LOGIN button by pressing it again.\"",
            "15 |       \"Have the students acquaint themselves with the information...\"",
            "16 |         \"available to them in the monitors, buttons, and sliders.\"",
            "17 |       \"Then press the GO button to start the simulation.\"",
            "18 |       \"Please note that you may adjust the length of time...\"",
            "19 |         \"GRAZING-PERIOD, that goats are allowed to graze each day.\"",
            "20 |       \"For a quicker demonstration, reduce the...\"",
            "21 |         \"GRASS-GROWTH-RATE slider.\"",
            "22 |       \"To curb buying incentives of the students, increase...\"",
            "23 |         \"the COST/GOAT slider.\"",
            "24 |       \"Any of the above mentioned parameters - ...\"",
            "25 |         \"GRAZING-PERIOD, GRASS-GROWTH-RATE, and COST/GOAT -...\"",
            "26 |         \"may be altered without stopping the simulation.\"",
            "27 |",
            "28 |     \"Teacher: To run the activity again with the same group,...\"",
            "29 |         \"stop the model by pressing the GO button, if it is on.\"",
            "30 |         \"Change any of the settings that you would like.\"",
            "31 |       \"Press the SETUP button.\"",
            "32 |",
            "33 |     \"Teacher: Restart the simulation by pressing the GO button again.\"",
            "34 |",
            "35 |     \"Teacher: To start the simulation over with a new group,...\"",
            "36 |         \"stop the model by pressing the GO button if it is on...\"",
            "37 |         \"press the RESET button in the Control Center\"",
            "38 |         \"and follow these instructions again from the beginning.\"",
            "39 |   ]",
            "40 |   set quick-start (item qs-item qs-items)",
            "41 | end"
          ],
          "pseudoCode": [
            "1 |  Define a procedure named setup-quick-start",
            "2 |   Set the variable qs-item to 0",
            "3 |   Set the variable qs-items to a list of instructions",
            "4 |   [",
            "5 |     Add the instruction \"Teacher: Follow these directions to run the HubNet activity.\"",
            "6 |       Add the instruction \"Optional: Zoom In (see Tools in the Menu Bar)\"",
            "7 |       Add the instruction \"Optional: Change any of the settings....\"",
            "8 |       Add the instruction \"If you do change the settings, press the SETUP button.\"",
            "9 |       Add the instruction \"Press the LOGIN button to allow people to login.\"",
            "10 |       Add the instruction \"Everyone: Open up a HubNet Client on your machine and...\"",
            "11 |         Add the instruction \"type your user name, select this activity and press ENTER.\"",
            "12 |",
            "13 |     Add the instruction \"Teacher: Once everyone has logged in,...\"",
            "14 |         Add the instruction \"turn off the LOGIN button by pressing it again.\"",
            "15 |       Add the instruction \"Have the students acquaint themselves with the information...\"",
            "16 |         Add the instruction \"available to them in the monitors, buttons, and sliders.\"",
            "17 |       Add the instruction \"Then press the GO button to start the simulation.\"",
            "18 |       Add the instruction \"Please note that you may adjust the length of time...\"",
            "19 |         Add the instruction \"GRAZING-PERIOD, that goats are allowed to graze each day.\"",
            "20 |       Add the instruction \"For a quicker demonstration, reduce the...\"",
            "21 |         Add the instruction \"GRASS-GROWTH-RATE slider.\"",
            "22 |       Add the instruction \"To curb buying incentives of the students, increase...\"",
            "23 |         Add the instruction \"the COST/GOAT slider.\"",
            "24 |       Add the instruction \"Any of the above mentioned parameters - ...\"",
            "25 |         Add the instruction \"GRAZING-PERIOD, GRASS-GROWTH-RATE, and COST/GOAT -...\"",
            "26 |         Add the instruction \"may be altered without stopping the simulation.\"",
            "27 |",
            "28 |     Add the instruction \"Teacher: To run the activity again with the same group,...\"",
            "29 |         Add the instruction \"stop the model by pressing the GO button, if it is on.\"",
            "30 |         Add the instruction \"Change any of the settings that you would like.\"",
            "31 |       Add the instruction \"Press the SETUP button.\"",
            "32 |",
            "33 |     Add the instruction \"Teacher: Restart the simulation by pressing the GO button again.\"",
            "34 |",
            "35 |     Add the instruction \"Teacher: To start the simulation over with a new group,...\"",
            "36 |         Add the instruction \"stop the model by pressing the GO button if it is on...\"",
            "37 |         Add the instruction \"press the RESET button in the Control Center\"",
            "38 |         Add the instruction \"and follow these instructions again from the beginning.\"",
            "39 |   ]",
            "40 |   Set the variable quick-start to the item at index qs-item in the list qs-items",
            "41 | End the procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to setup-quick-start",
              "pseudoCode": "Define a procedure named setup-quick-start"
            },
            {
              "lineNumber": 2,
              "originalCode": "set qs-item 0",
              "pseudoCode": "Set the variable qs-item to 0"
            },
            {
              "lineNumber": 3,
              "originalCode": "set qs-items",
              "pseudoCode": "Set the variable qs-items to a list of instructions"
            },
            {
              "lineNumber": 4,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 5,
              "originalCode": "\"Teacher: Follow these directions to run the HubNet activity.\"",
              "pseudoCode": "Add the instruction \"Teacher: Follow these directions to run the HubNet activity.\""
            },
            {
              "lineNumber": 6,
              "originalCode": "\"Optional: Zoom In (see Tools in the Menu Bar)\"",
              "pseudoCode": "Add the instruction \"Optional: Zoom In (see Tools in the Menu Bar)\""
            },
            {
              "lineNumber": 7,
              "originalCode": "\"Optional: Change any of the settings....\"",
              "pseudoCode": "Add the instruction \"Optional: Change any of the settings....\""
            },
            {
              "lineNumber": 8,
              "originalCode": "\"If you do change the settings, press the SETUP button.\"",
              "pseudoCode": "Add the instruction \"If you do change the settings, press the SETUP button.\""
            },
            {
              "lineNumber": 9,
              "originalCode": "\"Press the LOGIN button to allow people to login.\"",
              "pseudoCode": "Add the instruction \"Press the LOGIN button to allow people to login.\""
            },
            {
              "lineNumber": 10,
              "originalCode": "\"Everyone: Open up a HubNet Client on your machine and...\"",
              "pseudoCode": "Add the instruction \"Everyone: Open up a HubNet Client on your machine and...\""
            },
            {
              "lineNumber": 11,
              "originalCode": "\"type your user name, select this activity and press ENTER.\"",
              "pseudoCode": "Add the instruction \"type your user name, select this activity and press ENTER.\""
            },
            {
              "lineNumber": 12,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 13,
              "originalCode": "\"Teacher: Once everyone has logged in,...\"",
              "pseudoCode": "Add the instruction \"Teacher: Once everyone has logged in,...\""
            },
            {
              "lineNumber": 14,
              "originalCode": "\"turn off the LOGIN button by pressing it again.\"",
              "pseudoCode": "Add the instruction \"turn off the LOGIN button by pressing it again.\""
            },
            {
              "lineNumber": 15,
              "originalCode": "\"Have the students acquaint themselves with the information...\"",
              "pseudoCode": "Add the instruction \"Have the students acquaint themselves with the information...\""
            },
            {
              "lineNumber": 16,
              "originalCode": "\"available to them in the monitors, buttons, and sliders.\"",
              "pseudoCode": "Add the instruction \"available to them in the monitors, buttons, and sliders.\""
            },
            {
              "lineNumber": 17,
              "originalCode": "\"Then press the GO button to start the simulation.\"",
              "pseudoCode": "Add the instruction \"Then press the GO button to start the simulation.\""
            },
            {
              "lineNumber": 18,
              "originalCode": "\"Please note that you may adjust the length of time...\"",
              "pseudoCode": "Add the instruction \"Please note that you may adjust the length of time...\""
            },
            {
              "lineNumber": 19,
              "originalCode": "\"GRAZING-PERIOD, that goats are allowed to graze each day.\"",
              "pseudoCode": "Add the instruction \"GRAZING-PERIOD, that goats are allowed to graze each day.\""
            },
            {
              "lineNumber": 20,
              "originalCode": "\"For a quicker demonstration, reduce the...\"",
              "pseudoCode": "Add the instruction \"For a quicker demonstration, reduce the...\""
            },
            {
              "lineNumber": 21,
              "originalCode": "\"GRASS-GROWTH-RATE slider.\"",
              "pseudoCode": "Add the instruction \"GRASS-GROWTH-RATE slider.\""
            },
            {
              "lineNumber": 22,
              "originalCode": "\"To curb buying incentives of the students, increase...\"",
              "pseudoCode": "Add the instruction \"To curb buying incentives of the students, increase...\""
            },
            {
              "lineNumber": 23,
              "originalCode": "\"the COST/GOAT slider.\"",
              "pseudoCode": "Add the instruction \"the COST/GOAT slider.\""
            },
            {
              "lineNumber": 24,
              "originalCode": "\"Any of the above mentioned parameters - ...\"",
              "pseudoCode": "Add the instruction \"Any of the above mentioned parameters - ...\""
            },
            {
              "lineNumber": 25,
              "originalCode": "\"GRAZING-PERIOD, GRASS-GROWTH-RATE, and COST/GOAT -...\"",
              "pseudoCode": "Add the instruction \"GRAZING-PERIOD, GRASS-GROWTH-RATE, and COST/GOAT -...\""
            },
            {
              "lineNumber": 26,
              "originalCode": "\"may be altered without stopping the simulation.\"",
              "pseudoCode": "Add the instruction \"may be altered without stopping the simulation.\""
            },
            {
              "lineNumber": 27,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 28,
              "originalCode": "\"Teacher: To run the activity again with the same group,...\"",
              "pseudoCode": "Add the instruction \"Teacher: To run the activity again with the same group,...\""
            },
            {
              "lineNumber": 29,
              "originalCode": "\"stop the model by pressing the GO button, if it is on.\"",
              "pseudoCode": "Add the instruction \"stop the model by pressing the GO button, if it is on.\""
            },
            {
              "lineNumber": 30,
              "originalCode": "\"Change any of the settings that you would like.\"",
              "pseudoCode": "Add the instruction \"Change any of the settings that you would like.\""
            },
            {
              "lineNumber": 31,
              "originalCode": "\"Press the SETUP button.\"",
              "pseudoCode": "Add the instruction \"Press the SETUP button.\""
            },
            {
              "lineNumber": 32,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 33,
              "originalCode": "\"Teacher: Restart the simulation by pressing the GO button again.\"",
              "pseudoCode": "Add the instruction \"Teacher: Restart the simulation by pressing the GO button again.\""
            },
            {
              "lineNumber": 34,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 35,
              "originalCode": "\"Teacher: To start the simulation over with a new group,...\"",
              "pseudoCode": "Add the instruction \"Teacher: To start the simulation over with a new group,...\""
            },
            {
              "lineNumber": 36,
              "originalCode": "\"stop the model by pressing the GO button if it is on...\"",
              "pseudoCode": "Add the instruction \"stop the model by pressing the GO button if it is on...\""
            },
            {
              "lineNumber": 37,
              "originalCode": "\"press the RESET button in the Control Center\"",
              "pseudoCode": "Add the instruction \"press the RESET button in the Control Center\""
            },
            {
              "lineNumber": 38,
              "originalCode": "\"and follow these instructions again from the beginning.\"",
              "pseudoCode": "Add the instruction \"and follow these instructions again from the beginning.\""
            },
            {
              "lineNumber": 39,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 40,
              "originalCode": "set quick-start (item qs-item qs-items)",
              "pseudoCode": "Set the variable quick-start to the item at index qs-item in the list qs-items"
            },
            {
              "lineNumber": 41,
              "originalCode": "end",
              "pseudoCode": "End the procedure"
            }
          ]
        },
        {
          "name": "view-next",
          "documentation": "; view the next item in the quickstart monitor",
          "originalCode": "to view-next\n  set qs-item qs-item + 1\n  if qs-item >= length qs-items\n    [ set qs-item length qs-items - 1 ]\n  set quick-start (item qs-item qs-items)\nend",
          "numberedOriginalCode": [
            "1 | to view-next",
            "2 |   set qs-item qs-item + 1",
            "3 |   if qs-item >= length qs-items",
            "4 |     [ set qs-item length qs-items - 1 ]",
            "5 |   set quick-start (item qs-item qs-items)",
            "6 | end"
          ],
          "pseudoCode": [
            "1 | When the view-next procedure is called,",
            "2 |   increase the quick start item by one",
            "3 |   if the quick start item is greater than or equal to the length of the quick start items,",
            "4 |     [ set the quick start item to the length of the quick start items minus one ]",
            "5 |   set the quick start to the item at the quick start item in the quick start items",
            "6 | end the procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to view-next",
              "pseudoCode": "When the view-next procedure is called,"
            },
            {
              "lineNumber": 2,
              "originalCode": "set qs-item qs-item + 1",
              "pseudoCode": "increase the quick start item by one"
            },
            {
              "lineNumber": 3,
              "originalCode": "if qs-item >= length qs-items",
              "pseudoCode": "if the quick start item is greater than or equal to the length of the quick start items,"
            },
            {
              "lineNumber": 4,
              "originalCode": "[ set qs-item length qs-items - 1 ]",
              "pseudoCode": "[ set the quick start item to the length of the quick start items minus one ]"
            },
            {
              "lineNumber": 5,
              "originalCode": "set quick-start (item qs-item qs-items)",
              "pseudoCode": "set the quick start to the item at the quick start item in the quick start items"
            },
            {
              "lineNumber": 6,
              "originalCode": "end",
              "pseudoCode": "end the procedure"
            }
          ]
        },
        {
          "name": "view-prev",
          "documentation": "; view the previous item in the quickstart monitor",
          "originalCode": "to view-prev\n  set qs-item qs-item - 1\n  if qs-item < 0\n    [ set qs-item 0 ]\n  set quick-start (item qs-item qs-items)\nend",
          "numberedOriginalCode": [
            "1 | to view-prev",
            "2 |   set qs-item qs-item - 1",
            "3 |   if qs-item < 0",
            "4 |     [ set qs-item 0 ]",
            "5 |   set quick-start (item qs-item qs-items)",
            "6 | end"
          ],
          "pseudoCode": [
            "1 | When the view-prev procedure is called,",
            "2 |   decrease the quick start item index by one",
            "3 |   if the quick start item index is less than zero,",
            "4 |     set the quick start item index to zero",
            "5 |   set the quick start to the item at the current quick start item index in the quick start items list",
            "6 | End of the view-prev procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to view-prev",
              "pseudoCode": "When the view-prev procedure is called,"
            },
            {
              "lineNumber": 2,
              "originalCode": "set qs-item qs-item - 1",
              "pseudoCode": "decrease the quick start item index by one"
            },
            {
              "lineNumber": 3,
              "originalCode": "if qs-item < 0",
              "pseudoCode": "if the quick start item index is less than zero,"
            },
            {
              "lineNumber": 4,
              "originalCode": "[ set qs-item 0 ]",
              "pseudoCode": "set the quick start item index to zero"
            },
            {
              "lineNumber": 5,
              "originalCode": "set quick-start (item qs-item qs-items)",
              "pseudoCode": "set the quick start to the item at the current quick start item index in the quick start items list"
            },
            {
              "lineNumber": 6,
              "originalCode": "end",
              "pseudoCode": "End of the view-prev procedure"
            }
          ]
        },
        {
          "name": "listen-to-clients",
          "documentation": "; determines which client sent a command, and what the command was",
          "originalCode": "to listen-to-clients\n  while [ hubnet-message-waiting? ]\n  [\n    hubnet-fetch-message\n    ifelse hubnet-enter-message?\n    [\n      create-new-farmer hubnet-message-source\n    ]\n    [\n      ifelse hubnet-exit-message?\n        [ remove-farmer hubnet-message-source ]\n        [ execute-command hubnet-message-tag ]\n    ]\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to listen-to-clients",
            " 2 |   while [ hubnet-message-waiting? ]",
            " 3 |   [",
            " 4 |     hubnet-fetch-message",
            " 5 |     ifelse hubnet-enter-message?",
            " 6 |     [",
            " 7 |       create-new-farmer hubnet-message-source",
            " 8 |     ]",
            " 9 |     [",
            "10 |       ifelse hubnet-exit-message?",
            "11 |         [ remove-farmer hubnet-message-source ]",
            "12 |         [ execute-command hubnet-message-tag ]",
            "13 |     ]",
            "14 |   ]",
            "15 | end"
          ],
          "pseudoCode": [
            "1 | When listening to clients,",
            "2 |   while there is a message waiting,",
            "3 |   [",
            "4 |     fetch the message",
            "5 |     if the message is an enter message,",
            "6 |     [",
            "7 |       create a new farmer with the source of the message",
            "8 |     ]",
            "9 |     otherwise,",
            "10 |     [",
            "11 |       if the message is an exit message,",
            "12 |         remove the farmer with the source of the message",
            "13 |       otherwise,",
            "14 |         execute the command with the tag of the message",
            "15 |     ]",
            "16 |   ]"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to listen-to-clients",
              "pseudoCode": "When listening to clients,"
            },
            {
              "lineNumber": 2,
              "originalCode": "while [ hubnet-message-waiting? ]",
              "pseudoCode": "while there is a message waiting,"
            },
            {
              "lineNumber": 3,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 4,
              "originalCode": "hubnet-fetch-message",
              "pseudoCode": "fetch the message"
            },
            {
              "lineNumber": 5,
              "originalCode": "ifelse hubnet-enter-message?",
              "pseudoCode": "if the message is an enter message,"
            },
            {
              "lineNumber": 6,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 7,
              "originalCode": "create-new-farmer hubnet-message-source",
              "pseudoCode": "create a new farmer with the source of the message"
            },
            {
              "lineNumber": 8,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 9,
              "originalCode": "[",
              "pseudoCode": "otherwise,"
            },
            {
              "lineNumber": 10,
              "originalCode": "ifelse hubnet-exit-message?",
              "pseudoCode": "["
            },
            {
              "lineNumber": 11,
              "originalCode": "[ remove-farmer hubnet-message-source ]",
              "pseudoCode": "if the message is an exit message,"
            },
            {
              "lineNumber": 12,
              "originalCode": "[ execute-command hubnet-message-tag ]",
              "pseudoCode": "remove the farmer with the source of the message"
            },
            {
              "lineNumber": 13,
              "originalCode": "]",
              "pseudoCode": "otherwise,"
            },
            {
              "lineNumber": 14,
              "originalCode": "]",
              "pseudoCode": "execute the command with the tag of the message"
            },
            {
              "lineNumber": 15,
              "originalCode": "end",
              "pseudoCode": "]"
            }
          ]
        },
        {
          "name": "execute-command",
          "documentation": "; NetLogo knows what each student turtle is supposed to be\n; doing based on the tag sent by the node:\n; num-goats-to-buy - determine quantity of student's desired purchase",
          "originalCode": "to execute-command [command]\n  if command = \"num-goats-to-buy\"\n  [\n    ask farmers with [user-id = hubnet-message-source]\n      [ set num-goats-to-buy hubnet-message ]\n    stop\n  ]\nend",
          "numberedOriginalCode": [
            "1 | to execute-command [command]",
            "2 |   if command = \"num-goats-to-buy\"",
            "3 |   [",
            "4 |     ask farmers with [user-id = hubnet-message-source]",
            "5 |       [ set num-goats-to-buy hubnet-message ]",
            "6 |     stop",
            "7 |   ]",
            "8 | end"
          ],
          "pseudoCode": [
            "1 | define a procedure named execute-command that takes a parameter named command",
            "2 |   if the command is equal to \"num-goats-to-buy\"",
            "3 |   [",
            "4 |     for each farmer whose user-id matches the hubnet-message-source",
            "5 |       [ set the number of goats to buy to the hubnet-message ]",
            "6 |     stop further execution",
            "7 |   ]",
            "8 | end the procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to execute-command [command]",
              "pseudoCode": "define a procedure named execute-command that takes a parameter named command"
            },
            {
              "lineNumber": 2,
              "originalCode": "if command = \"num-goats-to-buy\"",
              "pseudoCode": "if the command is equal to \"num-goats-to-buy\""
            },
            {
              "lineNumber": 3,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 4,
              "originalCode": "ask farmers with [user-id = hubnet-message-source]",
              "pseudoCode": "for each farmer whose user-id matches the hubnet-message-source"
            },
            {
              "lineNumber": 5,
              "originalCode": "[ set num-goats-to-buy hubnet-message ]",
              "pseudoCode": "[ set the number of goats to buy to the hubnet-message ]"
            },
            {
              "lineNumber": 6,
              "originalCode": "stop",
              "pseudoCode": "stop further execution"
            },
            {
              "lineNumber": 7,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 8,
              "originalCode": "end",
              "pseudoCode": "end the procedure"
            }
          ]
        },
        {
          "name": "create-new-farmer",
          "documentation": "",
          "originalCode": "to create-new-farmer [ id ]\n  create-farmers 1\n  [\n    set user-id id\n    setup-farm\n    set-unique-color\n    reset-farmers-vars\n    hubnet-send id \"num-goats-to-buy\" num-goats-to-buy\n    send-system-info\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to create-new-farmer [ id ]",
            " 2 |   create-farmers 1",
            " 3 |   [",
            " 4 |     set user-id id",
            " 5 |     setup-farm",
            " 6 |     set-unique-color",
            " 7 |     reset-farmers-vars",
            " 8 |     hubnet-send id \"num-goats-to-buy\" num-goats-to-buy",
            " 9 |     send-system-info",
            "10 |   ]",
            "11 | end"
          ],
          "pseudoCode": [
            "1 | Define a procedure named create-new-farmer that takes an id as input.",
            "2 |   Create one farmer.",
            "3 |   [",
            "4 |     Set the user-id of the farmer to the given id.",
            "5 |     Setup the farm for the farmer.",
            "6 |     Set a unique color for the farmer.",
            "7 |     Reset the farmer's variables.",
            "8 |     Send the number of goats to buy to the hubnet with the given id.",
            "9 |     Send system information.",
            "10 |   ]",
            "11 | End the procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to create-new-farmer [ id ]",
              "pseudoCode": "Define a procedure named create-new-farmer that takes an id as input."
            },
            {
              "lineNumber": 2,
              "originalCode": "create-farmers 1",
              "pseudoCode": "Create one farmer."
            },
            {
              "lineNumber": 3,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 4,
              "originalCode": "set user-id id",
              "pseudoCode": "Set the user-id of the farmer to the given id."
            },
            {
              "lineNumber": 5,
              "originalCode": "setup-farm",
              "pseudoCode": "Setup the farm for the farmer."
            },
            {
              "lineNumber": 6,
              "originalCode": "set-unique-color",
              "pseudoCode": "Set a unique color for the farmer."
            },
            {
              "lineNumber": 7,
              "originalCode": "reset-farmers-vars",
              "pseudoCode": "Reset the farmer's variables."
            },
            {
              "lineNumber": 8,
              "originalCode": "hubnet-send id \"num-goats-to-buy\" num-goats-to-buy",
              "pseudoCode": "Send the number of goats to buy to the hubnet with the given id."
            },
            {
              "lineNumber": 9,
              "originalCode": "send-system-info",
              "pseudoCode": "Send system information."
            },
            {
              "lineNumber": 10,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 11,
              "originalCode": "end",
              "pseudoCode": "End the procedure."
            }
          ]
        },
        {
          "name": "setup-farm",
          "documentation": "; situates the farmer in particular location\n; farmer procedure",
          "originalCode": "to setup-farm  ;; farmer procedure\n  setxy ((random-float (world-width - 2)) + min-pxcor + 1)\n        ((random-float (world-height - 2)) + min-pycor + 1)\n  hide-turtle\nend",
          "numberedOriginalCode": [
            "1 | to setup-farm  ;; farmer procedure",
            "2 |   setxy ((random-float (world-width - 2)) + min-pxcor + 1)",
            "3 |         ((random-float (world-height - 2)) + min-pycor + 1)",
            "4 |   hide-turtle",
            "5 | end"
          ],
          "pseudoCode": [
            "1 | When the setup-farm procedure is called:",
            "2 |   Move the turtle to a random x-coordinate and a random y-coordinate within the world boundaries.",
            "3 |   Move the turtle to a random x-coordinate and a random y-coordinate within the world boundaries.",
            "4 |   Hide the turtle.",
            "5 | End the setup-farm procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to setup-farm  ;; farmer procedure",
              "pseudoCode": "When the setup-farm procedure is called:"
            },
            {
              "lineNumber": 2,
              "originalCode": "setxy ((random-float (world-width - 2)) + min-pxcor + 1)",
              "pseudoCode": "Move the turtle to a random x-coordinate and a random y-coordinate within the world boundaries."
            },
            {
              "lineNumber": 3,
              "originalCode": "((random-float (world-height - 2)) + min-pycor + 1)",
              "pseudoCode": "Move the turtle to a random x-coordinate and a random y-coordinate within the world boundaries."
            },
            {
              "lineNumber": 4,
              "originalCode": "hide-turtle",
              "pseudoCode": "Hide the turtle."
            },
            {
              "lineNumber": 5,
              "originalCode": "end",
              "pseudoCode": "End the setup-farm procedure."
            }
          ]
        },
        {
          "name": "set-unique-color",
          "documentation": "; pick a color for the turtle\n; turtle procedure",
          "originalCode": "to set-unique-color  ;; turtle procedure\n  let code random num-colors\n  while [member? code used-colors and count farmers < num-colors]\n    [ set code random num-colors ]\n  set used-colors (lput code used-colors)\n  set color item code colors\nend",
          "numberedOriginalCode": [
            "1 | to set-unique-color  ;; turtle procedure",
            "2 |   let code random num-colors",
            "3 |   while [member? code used-colors and count farmers < num-colors]",
            "4 |     [ set code random num-colors ]",
            "5 |   set used-colors (lput code used-colors)",
            "6 |   set color item code colors",
            "7 | end"
          ],
          "pseudoCode": [
            "1 | When the turtle procedure set-unique-color is called:",
            "2 |   Generate a random number between 0 and the number of colors.",
            "3 |   While the random number is already in the list of used colors and the count of farmers is less than the number of colors:",
            "4 |     Generate a new random number between 0 and the number of colors.",
            "5 |   Add the random number to the list of used colors.",
            "6 |   Set the turtle's color to the color corresponding to the random number in the colors list.",
            "7 | End of the turtle procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to set-unique-color  ;; turtle procedure",
              "pseudoCode": "When the turtle procedure set-unique-color is called:"
            },
            {
              "lineNumber": 2,
              "originalCode": "let code random num-colors",
              "pseudoCode": "Generate a random number between 0 and the number of colors."
            },
            {
              "lineNumber": 3,
              "originalCode": "while [member? code used-colors and count farmers < num-colors]",
              "pseudoCode": "While the random number is already in the list of used colors and the count of farmers is less than the number of colors:"
            },
            {
              "lineNumber": 4,
              "originalCode": "[ set code random num-colors ]",
              "pseudoCode": "Generate a new random number between 0 and the number of colors."
            },
            {
              "lineNumber": 5,
              "originalCode": "set used-colors (lput code used-colors)",
              "pseudoCode": "Add the random number to the list of used colors."
            },
            {
              "lineNumber": 6,
              "originalCode": "set color item code colors",
              "pseudoCode": "Set the turtle's color to the color corresponding to the random number in the colors list."
            },
            {
              "lineNumber": 7,
              "originalCode": "end",
              "pseudoCode": "End of the turtle procedure."
            }
          ]
        },
        {
          "name": "reset-farmers-vars",
          "documentation": "; set farmer variables to initial values\n; farmer procedure",
          "originalCode": "to reset-farmers-vars  ;; farmer procedure\n  ;; reset the farmer variable to initial values\n  set revenue-lst []\n  set num-goats-to-buy 1\n  set total-assets cost/goat\n  set current-revenue 0\n\n  ;; get rid of existing goats\n  ask my-goats\n    [ die ]\n\n  ;; create new goats for the farmer\n  hatch init-num-goats/farmer\n    [ setup-goats user-id ]\n\n  send-personal-info\nend",
          "numberedOriginalCode": [
            " 1 | to reset-farmers-vars  ;; farmer procedure",
            " 2 |   ;; reset the farmer variable to initial values",
            " 3 |   set revenue-lst []",
            " 4 |   set num-goats-to-buy 1",
            " 5 |   set total-assets cost/goat",
            " 6 |   set current-revenue 0",
            " 7 |",
            " 8 |   ;; get rid of existing goats",
            " 9 |   ask my-goats",
            "10 |     [ die ]",
            "11 |",
            "12 |   ;; create new goats for the farmer",
            "13 |   hatch init-num-goats/farmer",
            "14 |     [ setup-goats user-id ]",
            "15 |",
            "16 |   send-personal-info",
            "17 | end"
          ],
          "pseudoCode": [
            "1 | define a procedure to reset farmer variables",
            "2 |   ;; reset the farmer variable to initial values",
            "3 |   set the revenue list to an empty list",
            "4 |   set the number of goats to buy to 1",
            "5 |   set the total assets to the cost of a goat",
            "6 |   set the current revenue to 0",
            "7 |",
            "8 |   ;; get rid of existing goats",
            "9 |   for each of my goats",
            "10 |     [ make the goat die ]",
            "11 |",
            "12 |   ;; create new goats for the farmer",
            "13 |   create initial number of goats for the farmer",
            "14 |     [ setup the goats with the user id ]",
            "15 |",
            "16 |   send personal information",
            "17 | end"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to reset-farmers-vars  ;; farmer procedure",
              "pseudoCode": "define a procedure to reset farmer variables"
            },
            {
              "lineNumber": 2,
              "originalCode": ";; reset the farmer variable to initial values",
              "pseudoCode": ";; reset the farmer variable to initial values"
            },
            {
              "lineNumber": 3,
              "originalCode": "set revenue-lst []",
              "pseudoCode": "set the revenue list to an empty list"
            },
            {
              "lineNumber": 4,
              "originalCode": "set num-goats-to-buy 1",
              "pseudoCode": "set the number of goats to buy to 1"
            },
            {
              "lineNumber": 5,
              "originalCode": "set total-assets cost/goat",
              "pseudoCode": "set the total assets to the cost of a goat"
            },
            {
              "lineNumber": 6,
              "originalCode": "set current-revenue 0",
              "pseudoCode": "set the current revenue to 0"
            },
            {
              "lineNumber": 7,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 8,
              "originalCode": ";; get rid of existing goats",
              "pseudoCode": ";; get rid of existing goats"
            },
            {
              "lineNumber": 9,
              "originalCode": "ask my-goats",
              "pseudoCode": "for each of my goats"
            },
            {
              "lineNumber": 10,
              "originalCode": "[ die ]",
              "pseudoCode": "[ make the goat die ]"
            },
            {
              "lineNumber": 11,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 12,
              "originalCode": ";; create new goats for the farmer",
              "pseudoCode": ";; create new goats for the farmer"
            },
            {
              "lineNumber": 13,
              "originalCode": "hatch init-num-goats/farmer",
              "pseudoCode": "create initial number of goats for the farmer"
            },
            {
              "lineNumber": 14,
              "originalCode": "[ setup-goats user-id ]",
              "pseudoCode": "[ setup the goats with the user id ]"
            },
            {
              "lineNumber": 15,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 16,
              "originalCode": "send-personal-info",
              "pseudoCode": "send personal information"
            },
            {
              "lineNumber": 17,
              "originalCode": "end",
              "pseudoCode": "end"
            }
          ]
        },
        {
          "name": "send-personal-info",
          "documentation": "; sends the appropriate monitor information back to the client\n; farmer procedure",
          "originalCode": "to send-personal-info  ;; farmer procedure\n  hubnet-send user-id \"My Goat Color\" (color->string color)\n  hubnet-send user-id \"Current Revenue\" current-revenue\n  hubnet-send user-id \"Total Assets\" total-assets\n  hubnet-send user-id \"My Goat Population\" count my-goats\nend",
          "numberedOriginalCode": [
            "1 | to send-personal-info  ;; farmer procedure",
            "2 |   hubnet-send user-id \"My Goat Color\" (color->string color)",
            "3 |   hubnet-send user-id \"Current Revenue\" current-revenue",
            "4 |   hubnet-send user-id \"Total Assets\" total-assets",
            "5 |   hubnet-send user-id \"My Goat Population\" count my-goats",
            "6 | end"
          ],
          "pseudoCode": [
            "1 | define a procedure named send-personal-info",
            "2 |   send the user's id and the label \"My Goat Color\" along with the color of the goat as a string",
            "3 |   send the user's id and the label \"Current Revenue\" along with the current revenue",
            "4 |   send the user's id and the label \"Total Assets\" along with the total assets",
            "5 |   send the user's id and the label \"My Goat Population\" along with the count of my goats",
            "6 | end the procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to send-personal-info  ;; farmer procedure",
              "pseudoCode": "define a procedure named send-personal-info"
            },
            {
              "lineNumber": 2,
              "originalCode": "hubnet-send user-id \"My Goat Color\" (color->string color)",
              "pseudoCode": "send the user's id and the label \"My Goat Color\" along with the color of the goat as a string"
            },
            {
              "lineNumber": 3,
              "originalCode": "hubnet-send user-id \"Current Revenue\" current-revenue",
              "pseudoCode": "send the user's id and the label \"Current Revenue\" along with the current revenue"
            },
            {
              "lineNumber": 4,
              "originalCode": "hubnet-send user-id \"Total Assets\" total-assets",
              "pseudoCode": "send the user's id and the label \"Total Assets\" along with the total assets"
            },
            {
              "lineNumber": 5,
              "originalCode": "hubnet-send user-id \"My Goat Population\" count my-goats",
              "pseudoCode": "send the user's id and the label \"My Goat Population\" along with the count of my goats"
            },
            {
              "lineNumber": 6,
              "originalCode": "end",
              "pseudoCode": "end the procedure"
            }
          ]
        },
        {
          "name": "color->string",
          "documentation": "; returns string version of color name",
          "originalCode": "to-report color->string [ color-value ]\n  report item (position color-value colors) color-names\nend",
          "numberedOriginalCode": [
            "1 | to-report color->string [ color-value ]",
            "2 |   report item (position color-value colors) color-names",
            "3 | end"
          ],
          "pseudoCode": [
            "1 | To report the color name corresponding to a given color value:",
            "2 |   Find the position of the color value in the list of colors.",
            "3 |   Report the color name at that position in the list of color names.",
            "4 | End the reporting function."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to-report color->string [ color-value ]",
              "pseudoCode": "To report the color name corresponding to a given color value:"
            },
            {
              "lineNumber": 2,
              "originalCode": "report item (position color-value colors) color-names",
              "pseudoCode": "Find the position of the color value in the list of colors."
            },
            {
              "lineNumber": 3,
              "originalCode": "end",
              "pseudoCode": "Report the color name at that position in the list of color names."
            }
          ]
        },
        {
          "name": "send-system-info",
          "documentation": "; sends the appropriate monitor information back to one client\n; farmer procedure",
          "originalCode": "to send-system-info  ;; farmer procedure\n  hubnet-send user-id \"Milk Amt\" milk-supply\n  hubnet-send user-id \"Grass Amt\" grass-supply\n  hubnet-send user-id \"Cost per Goat\" cost/goat\n  hubnet-send user-id \"Day\" day\nend",
          "numberedOriginalCode": [
            "1 | to send-system-info  ;; farmer procedure",
            "2 |   hubnet-send user-id \"Milk Amt\" milk-supply",
            "3 |   hubnet-send user-id \"Grass Amt\" grass-supply",
            "4 |   hubnet-send user-id \"Cost per Goat\" cost/goat",
            "5 |   hubnet-send user-id \"Day\" day",
            "6 | end"
          ],
          "pseudoCode": [
            "1 | Define a procedure named send-system-info.",
            "2 |   Send the user ID and the label \"Milk Amt\" along with the milk supply value.",
            "3 |   Send the user ID and the label \"Grass Amt\" along with the grass supply value.",
            "4 |   Send the user ID and the label \"Cost per Goat\" along with the cost per goat value.",
            "5 |   Send the user ID and the label \"Day\" along with the day value.",
            "6 | End the procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to send-system-info  ;; farmer procedure",
              "pseudoCode": "Define a procedure named send-system-info."
            },
            {
              "lineNumber": 2,
              "originalCode": "hubnet-send user-id \"Milk Amt\" milk-supply",
              "pseudoCode": "Send the user ID and the label \"Milk Amt\" along with the milk supply value."
            },
            {
              "lineNumber": 3,
              "originalCode": "hubnet-send user-id \"Grass Amt\" grass-supply",
              "pseudoCode": "Send the user ID and the label \"Grass Amt\" along with the grass supply value."
            },
            {
              "lineNumber": 4,
              "originalCode": "hubnet-send user-id \"Cost per Goat\" cost/goat",
              "pseudoCode": "Send the user ID and the label \"Cost per Goat\" along with the cost per goat value."
            },
            {
              "lineNumber": 5,
              "originalCode": "hubnet-send user-id \"Day\" day",
              "pseudoCode": "Send the user ID and the label \"Day\" along with the day value."
            },
            {
              "lineNumber": 6,
              "originalCode": "end",
              "pseudoCode": "End the procedure."
            }
          ]
        },
        {
          "name": "broadcast-system-info",
          "documentation": "; broadcasts the appropriate monitor information back to all clients",
          "originalCode": "to broadcast-system-info\n  hubnet-broadcast \"Milk Amt\" milk-supply\n  hubnet-broadcast \"Grass Amt\" (int grass-supply)\n  hubnet-broadcast \"Cost per Goat\" cost/goat\n  hubnet-broadcast \"Day\" day\nend",
          "numberedOriginalCode": [
            "1 | to broadcast-system-info",
            "2 |   hubnet-broadcast \"Milk Amt\" milk-supply",
            "3 |   hubnet-broadcast \"Grass Amt\" (int grass-supply)",
            "4 |   hubnet-broadcast \"Cost per Goat\" cost/goat",
            "5 |   hubnet-broadcast \"Day\" day",
            "6 | end"
          ],
          "pseudoCode": [
            "1 | When the broadcast-system-info procedure is called,",
            "2 |   send the message \"Milk Amt\" along with the milk supply value to the hubnet.",
            "3 |   send the message \"Grass Amt\" along with the integer value of the grass supply to the hubnet.",
            "4 |   send the message \"Cost per Goat\" along with the cost per goat value to the hubnet.",
            "5 |   send the message \"Day\" along with the day value to the hubnet.",
            "6 | End the broadcast-system-info procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to broadcast-system-info",
              "pseudoCode": "When the broadcast-system-info procedure is called,"
            },
            {
              "lineNumber": 2,
              "originalCode": "hubnet-broadcast \"Milk Amt\" milk-supply",
              "pseudoCode": "send the message \"Milk Amt\" along with the milk supply value to the hubnet."
            },
            {
              "lineNumber": 3,
              "originalCode": "hubnet-broadcast \"Grass Amt\" (int grass-supply)",
              "pseudoCode": "send the message \"Grass Amt\" along with the integer value of the grass supply to the hubnet."
            },
            {
              "lineNumber": 4,
              "originalCode": "hubnet-broadcast \"Cost per Goat\" cost/goat",
              "pseudoCode": "send the message \"Cost per Goat\" along with the cost per goat value to the hubnet."
            },
            {
              "lineNumber": 5,
              "originalCode": "hubnet-broadcast \"Day\" day",
              "pseudoCode": "send the message \"Day\" along with the day value to the hubnet."
            },
            {
              "lineNumber": 6,
              "originalCode": "end",
              "pseudoCode": "End the broadcast-system-info procedure."
            }
          ]
        },
        {
          "name": "remove-farmer",
          "documentation": "; delete farmers once client has exited",
          "originalCode": "to remove-farmer [ id ]\n  let old-color 0\n  ask farmers with [user-id = id]\n  [\n    set old-color color\n    ask my-goats\n      [ die ]\n    die\n  ]\n  if not any? farmers with [color = old-color]\n    [ set used-colors remove (position old-color colors) used-colors ]\nend",
          "numberedOriginalCode": [
            " 1 | to remove-farmer [ id ]",
            " 2 |   let old-color 0",
            " 3 |   ask farmers with [user-id = id]",
            " 4 |   [",
            " 5 |     set old-color color",
            " 6 |     ask my-goats",
            " 7 |       [ die ]",
            " 8 |     die",
            " 9 |   ]",
            "10 |   if not any? farmers with [color = old-color]",
            "11 |     [ set used-colors remove (position old-color colors) used-colors ]",
            "12 | end"
          ],
          "pseudoCode": [
            "1 | Define a procedure named \"remove-farmer\" that takes an \"id\" as input.",
            "2 |   Initialize a variable named \"old-color\" to 0.",
            "3 |   For each farmer whose \"user-id\" matches the given \"id\":",
            "4 |   [",
            "5 |     Save the current color of the farmer to \"old-color\".",
            "6 |     For each goat owned by the farmer:",
            "7 |       [ Make the goat die. ]",
            "8 |     Make the farmer die.",
            "9 |   ]",
            "10 |   If there are no more farmers with the color \"old-color\":",
            "11 |     [ Remove the position of \"old-color\" from the list of \"used-colors\". ]",
            "12 | End the procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to remove-farmer [ id ]",
              "pseudoCode": "Define a procedure named \"remove-farmer\" that takes an \"id\" as input."
            },
            {
              "lineNumber": 2,
              "originalCode": "let old-color 0",
              "pseudoCode": "Initialize a variable named \"old-color\" to 0."
            },
            {
              "lineNumber": 3,
              "originalCode": "ask farmers with [user-id = id]",
              "pseudoCode": "For each farmer whose \"user-id\" matches the given \"id\":"
            },
            {
              "lineNumber": 4,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 5,
              "originalCode": "set old-color color",
              "pseudoCode": "Save the current color of the farmer to \"old-color\"."
            },
            {
              "lineNumber": 6,
              "originalCode": "ask my-goats",
              "pseudoCode": "For each goat owned by the farmer:"
            },
            {
              "lineNumber": 7,
              "originalCode": "[ die ]",
              "pseudoCode": "[ Make the goat die. ]"
            },
            {
              "lineNumber": 8,
              "originalCode": "die",
              "pseudoCode": "Make the farmer die."
            },
            {
              "lineNumber": 9,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 10,
              "originalCode": "if not any? farmers with [color = old-color]",
              "pseudoCode": "If there are no more farmers with the color \"old-color\":"
            },
            {
              "lineNumber": 11,
              "originalCode": "[ set used-colors remove (position old-color colors) used-colors ]",
              "pseudoCode": "[ Remove the position of \"old-color\" from the list of \"used-colors\". ]"
            },
            {
              "lineNumber": 12,
              "originalCode": "end",
              "pseudoCode": "End the procedure."
            }
          ]
        }
      ]
    },
    {
      "modelId": "HubNet Activities_Root Beer Game HubNet",
      "title": "Root Beer Game HubNet",
      "documentation": "$",
      "sourceLink": "https://ccl.northwestern.edu/netlogo/models/models/HubNet%20Activities/Root%20Beer%20Game%20HubNet.nlogo",
      "license": "CC BY-NC-SA 3.0",
      "sourceType": "Models Library",
      "collectedAt": "2025-02-25T23:20:11.439637",
      "procedures": [
        {
          "name": "startup",
          "documentation": ";\n; Setup Procedures\n;",
          "originalCode": "to startup\n  hubnet-reset\n  ;; setup basic appearance globals\n  set-default-shape players \"circle\"\n  set-default-shape teams \"square\"\n  set colors [ red blue green violet pink orange brown yellow ]\n  set color-names [ \"red\" \"blue\" \"green\" \"violet\" \"pink\" \"orange\" \"brown\" \"yellow\" ]\n  set roles [ \"retailer\" \"distributor\" \"wholesaler\" \"factory\" ]\n  setup\nend",
          "numberedOriginalCode": [
            " 1 | to startup",
            " 2 |   hubnet-reset",
            " 3 |   ;; setup basic appearance globals",
            " 4 |   set-default-shape players \"circle\"",
            " 5 |   set-default-shape teams \"square\"",
            " 6 |   set colors [ red blue green violet pink orange brown yellow ]",
            " 7 |   set color-names [ \"red\" \"blue\" \"green\" \"violet\" \"pink\" \"orange\" \"brown\" \"yellow\" ]",
            " 8 |   set roles [ \"retailer\" \"distributor\" \"wholesaler\" \"factory\" ]",
            " 9 |   setup",
            "10 | end"
          ],
          "pseudoCode": [
            "1 | to start up",
            "2 |   reset the hubnet",
            "3 |   ;; set up basic appearance globals",
            "4 |   set the default shape for players to circle",
            "5 |   set the default shape for teams to square",
            "6 |   set the colors to red, blue, green, violet, pink, orange, brown, and yellow",
            "7 |   set the color names to \"red\", \"blue\", \"green\", \"violet\", \"pink\", \"orange\", \"brown\", and \"yellow\"",
            "8 |   set the roles to \"retailer\", \"distributor\", \"wholesaler\", and \"factory\"",
            "9 |   set up",
            "10 | end"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to startup",
              "pseudoCode": "to start up"
            },
            {
              "lineNumber": 2,
              "originalCode": "hubnet-reset",
              "pseudoCode": "reset the hubnet"
            },
            {
              "lineNumber": 3,
              "originalCode": ";; setup basic appearance globals",
              "pseudoCode": ";; set up basic appearance globals"
            },
            {
              "lineNumber": 4,
              "originalCode": "set-default-shape players \"circle\"",
              "pseudoCode": "set the default shape for players to circle"
            },
            {
              "lineNumber": 5,
              "originalCode": "set-default-shape teams \"square\"",
              "pseudoCode": "set the default shape for teams to square"
            },
            {
              "lineNumber": 6,
              "originalCode": "set colors [ red blue green violet pink orange brown yellow ]",
              "pseudoCode": "set the colors to red, blue, green, violet, pink, orange, brown, and yellow"
            },
            {
              "lineNumber": 7,
              "originalCode": "set color-names [ \"red\" \"blue\" \"green\" \"violet\" \"pink\" \"orange\" \"brown\" \"yellow\" ]",
              "pseudoCode": "set the color names to \"red\", \"blue\", \"green\", \"violet\", \"pink\", \"orange\", \"brown\", and \"yellow\""
            },
            {
              "lineNumber": 8,
              "originalCode": "set roles [ \"retailer\" \"distributor\" \"wholesaler\" \"factory\" ]",
              "pseudoCode": "set the roles to \"retailer\", \"distributor\", \"wholesaler\", and \"factory\""
            },
            {
              "lineNumber": 9,
              "originalCode": "setup",
              "pseudoCode": "set up"
            },
            {
              "lineNumber": 10,
              "originalCode": "end",
              "pseudoCode": "end"
            }
          ]
        },
        {
          "name": "setup",
          "documentation": "; start the game over with the same players\n; initial conditions, each player has placed an order of 4\n; and has an inventory of 12.",
          "originalCode": "to setup\n  ask supply-links\n    [ set orders-filled n-values periods-of-delay [ 0 ]  ]\n  ask demand-links\n    [ set orders-placed 4 ]\n  ask teams [\n    set cost 0\n    set clock 1\n    if not any? out-demand-link-neighbors\n    [ die ]\n  ]\n  ask players\n  [\n    set inventory 12\n    set back-orders 0\n    set last-received 0\n    set order-placed? false\n    set color [color] of my-team + 2\n    set ordered 4\n    update-player\n  ]\n  reset-plot\nend",
          "numberedOriginalCode": [
            " 1 | to setup",
            " 2 |   ask supply-links",
            " 3 |     [ set orders-filled n-values periods-of-delay [ 0 ]  ]",
            " 4 |   ask demand-links",
            " 5 |     [ set orders-placed 4 ]",
            " 6 |   ask teams [",
            " 7 |     set cost 0",
            " 8 |     set clock 1",
            " 9 |     if not any? out-demand-link-neighbors",
            "10 |     [ die ]",
            "11 |   ]",
            "12 |   ask players",
            "13 |   [",
            "14 |     set inventory 12",
            "15 |     set back-orders 0",
            "16 |     set last-received 0",
            "17 |     set order-placed? false",
            "18 |     set color [color] of my-team + 2",
            "19 |     set ordered 4",
            "20 |     update-player",
            "21 |   ]",
            "22 |   reset-plot",
            "23 | end"
          ],
          "pseudoCode": [
            "1 | Define a procedure named setup",
            "2 |   For each supply-link:",
            "3 |     Set orders-filled to a list of zeros with a length equal to periods-of-delay",
            "4 |   For each demand-link:",
            "5 |     Set orders-placed to 4",
            "6 |   For each team:",
            "7 |     Set cost to 0",
            "8 |     Set clock to 1",
            "9 |     If the team has no out-demand-link neighbors:",
            "10 |     Kill the team",
            "11 |   For each player:",
            "12 |   [",
            "13 |     Set inventory to 12",
            "14 |     Set back-orders to 0",
            "15 |     Set last-received to 0",
            "16 |     Set order-placed? to false",
            "17 |     Set color to the color of the player's team plus 2",
            "18 |     Set ordered to 4",
            "19 |     Call the update-player procedure",
            "20 |   ]",
            "21 |   Reset the plot",
            "22 | End the setup procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to setup",
              "pseudoCode": "Define a procedure named setup"
            },
            {
              "lineNumber": 2,
              "originalCode": "ask supply-links",
              "pseudoCode": "For each supply-link:"
            },
            {
              "lineNumber": 3,
              "originalCode": "[ set orders-filled n-values periods-of-delay [ 0 ]  ]",
              "pseudoCode": "Set orders-filled to a list of zeros with a length equal to periods-of-delay"
            },
            {
              "lineNumber": 4,
              "originalCode": "ask demand-links",
              "pseudoCode": "For each demand-link:"
            },
            {
              "lineNumber": 5,
              "originalCode": "[ set orders-placed 4 ]",
              "pseudoCode": "Set orders-placed to 4"
            },
            {
              "lineNumber": 6,
              "originalCode": "ask teams [",
              "pseudoCode": "For each team:"
            },
            {
              "lineNumber": 7,
              "originalCode": "set cost 0",
              "pseudoCode": "Set cost to 0"
            },
            {
              "lineNumber": 8,
              "originalCode": "set clock 1",
              "pseudoCode": "Set clock to 1"
            },
            {
              "lineNumber": 9,
              "originalCode": "if not any? out-demand-link-neighbors",
              "pseudoCode": "If the team has no out-demand-link neighbors:"
            },
            {
              "lineNumber": 10,
              "originalCode": "[ die ]",
              "pseudoCode": "Kill the team"
            },
            {
              "lineNumber": 11,
              "originalCode": "]",
              "pseudoCode": "For each player:"
            },
            {
              "lineNumber": 12,
              "originalCode": "ask players",
              "pseudoCode": "["
            },
            {
              "lineNumber": 13,
              "originalCode": "[",
              "pseudoCode": "Set inventory to 12"
            },
            {
              "lineNumber": 14,
              "originalCode": "set inventory 12",
              "pseudoCode": "Set back-orders to 0"
            },
            {
              "lineNumber": 15,
              "originalCode": "set back-orders 0",
              "pseudoCode": "Set last-received to 0"
            },
            {
              "lineNumber": 16,
              "originalCode": "set last-received 0",
              "pseudoCode": "Set order-placed? to false"
            },
            {
              "lineNumber": 17,
              "originalCode": "set order-placed? false",
              "pseudoCode": "Set color to the color of the player's team plus 2"
            },
            {
              "lineNumber": 18,
              "originalCode": "set color [color] of my-team + 2",
              "pseudoCode": "Set ordered to 4"
            },
            {
              "lineNumber": 19,
              "originalCode": "set ordered 4",
              "pseudoCode": "Call the update-player procedure"
            },
            {
              "lineNumber": 20,
              "originalCode": "update-player",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 21,
              "originalCode": "]",
              "pseudoCode": "Reset the plot"
            },
            {
              "lineNumber": 22,
              "originalCode": "reset-plot",
              "pseudoCode": "End the setup procedure"
            },
            {
              "lineNumber": 23,
              "originalCode": "end",
              "pseudoCode": ""
            }
          ]
        },
        {
          "name": "go",
          "documentation": "",
          "originalCode": "to go\n  ;; the flow of the activity is completely controlled by actions\n  ;; of the clients. when everyone on the team has placed an order\n  ;; the entire team moves on the next week. Teams may be on different days\n  listen-to-clients\n  every 0.1\n  [\n    display\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to go",
            " 2 |   ;; the flow of the activity is completely controlled by actions",
            " 3 |   ;; of the clients. when everyone on the team has placed an order",
            " 4 |   ;; the entire team moves on the next week. Teams may be on different days",
            " 5 |   listen-to-clients",
            " 6 |   every 0.1",
            " 7 |   [",
            " 8 |     display",
            " 9 |   ]",
            "10 | end"
          ],
          "pseudoCode": [
            "1 | define a procedure named go",
            "2 |   ;; the flow of the activity is completely controlled by actions",
            "3 |   ;; of the clients. when everyone on the team has placed an order",
            "4 |   ;; the entire team moves on the next week. Teams may be on different days",
            "5 |   listen to the clients",
            "6 |   every 0.1 seconds",
            "7 |   [",
            "8 |     update the display",
            "9 |   ]",
            "10 | end the procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to go",
              "pseudoCode": "define a procedure named go"
            },
            {
              "lineNumber": 2,
              "originalCode": ";; the flow of the activity is completely controlled by actions",
              "pseudoCode": ";; the flow of the activity is completely controlled by actions"
            },
            {
              "lineNumber": 3,
              "originalCode": ";; of the clients. when everyone on the team has placed an order",
              "pseudoCode": ";; of the clients. when everyone on the team has placed an order"
            },
            {
              "lineNumber": 4,
              "originalCode": ";; the entire team moves on the next week. Teams may be on different days",
              "pseudoCode": ";; the entire team moves on the next week. Teams may be on different days"
            },
            {
              "lineNumber": 5,
              "originalCode": "listen-to-clients",
              "pseudoCode": "listen to the clients"
            },
            {
              "lineNumber": 6,
              "originalCode": "every 0.1",
              "pseudoCode": "every 0.1 seconds"
            },
            {
              "lineNumber": 7,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 8,
              "originalCode": "display",
              "pseudoCode": "update the display"
            },
            {
              "lineNumber": 9,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 10,
              "originalCode": "end",
              "pseudoCode": "end the procedure"
            }
          ]
        },
        {
          "name": "listen-to-clients",
          "documentation": "",
          "originalCode": "to listen-to-clients\n  while [ hubnet-message-waiting? ]\n  [\n    hubnet-fetch-message\n    ifelse hubnet-enter-message?\n    [ create-new-student ]\n    [\n      ifelse hubnet-exit-message?\n      [ remove-student ]\n      [\n        execute-command hubnet-message-tag\n      ]\n    ]\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to listen-to-clients",
            " 2 |   while [ hubnet-message-waiting? ]",
            " 3 |   [",
            " 4 |     hubnet-fetch-message",
            " 5 |     ifelse hubnet-enter-message?",
            " 6 |     [ create-new-student ]",
            " 7 |     [",
            " 8 |       ifelse hubnet-exit-message?",
            " 9 |       [ remove-student ]",
            "10 |       [",
            "11 |         execute-command hubnet-message-tag",
            "12 |       ]",
            "13 |     ]",
            "14 |   ]",
            "15 | end"
          ],
          "pseudoCode": [
            "1 | When listening to clients,",
            "2 |   while there is a message waiting,",
            "3 |   [",
            "4 |     fetch the message",
            "5 |     if the message is an enter message,",
            "6 |     [ create a new student ]",
            "7 |     otherwise,",
            "8 |     [ if the message is an exit message,",
            "9 |       [ remove the student ]",
            "10 |       otherwise,",
            "11 |       [ execute the command with the message tag ]",
            "12 |     ]",
            "13 |   ]",
            "14 |   ]",
            "15 | end"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to listen-to-clients",
              "pseudoCode": "When listening to clients,"
            },
            {
              "lineNumber": 2,
              "originalCode": "while [ hubnet-message-waiting? ]",
              "pseudoCode": "while there is a message waiting,"
            },
            {
              "lineNumber": 3,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 4,
              "originalCode": "hubnet-fetch-message",
              "pseudoCode": "fetch the message"
            },
            {
              "lineNumber": 5,
              "originalCode": "ifelse hubnet-enter-message?",
              "pseudoCode": "if the message is an enter message,"
            },
            {
              "lineNumber": 6,
              "originalCode": "[ create-new-student ]",
              "pseudoCode": "[ create a new student ]"
            },
            {
              "lineNumber": 7,
              "originalCode": "[",
              "pseudoCode": "otherwise,"
            },
            {
              "lineNumber": 8,
              "originalCode": "ifelse hubnet-exit-message?",
              "pseudoCode": "[ if the message is an exit message,"
            },
            {
              "lineNumber": 9,
              "originalCode": "[ remove-student ]",
              "pseudoCode": "[ remove the student ]"
            },
            {
              "lineNumber": 10,
              "originalCode": "[",
              "pseudoCode": "otherwise,"
            },
            {
              "lineNumber": 11,
              "originalCode": "execute-command hubnet-message-tag",
              "pseudoCode": "[ execute the command with the message tag ]"
            },
            {
              "lineNumber": 12,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 13,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 14,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 15,
              "originalCode": "end",
              "pseudoCode": "end"
            }
          ]
        },
        {
          "name": "end-week",
          "documentation": "; team procedure",
          "originalCode": "to end-week ;; team procedure\n  ;; calculate the cost for the entire team\n  set cost sum [ inventory * 0.5 + back-orders ] of\n                   players with [ my-team = myself ]\n\n  plot-cost\n  plot-shipped\n  ;; the last player is the factory\n  ask last-player [ plot-orders ]\n\n  ;; update the external demand to the retailer that drives the game\n  ask my-out-demand-links\n  [\n    ;; the demand starts at 4 cases per week. In week 7 it rises to\n    ;; 8 cases and remains there the rest of the time.\n    set orders-placed ifelse-value [clock] of myself <= 5 [ 4 ][ 8 ]\n  ]\n\n  ;; produce the goods at the factory level\n  let orders-requested sum [ orders-placed ] of my-in-demand-links\n\n  ask my-out-supply-links\n  [ set orders-filled lput orders-requested orders-filled ]\n\n  ;; move goods into the factory, even though the factory\n  ;; has the ability to produce an infinite amount of goods\n  ;; there are still PERIODS-OF-DELAY weeks between the time\n  ;; they place the order for goods and the time it is produced.\n  ask out-supply-link-neighbors\n  [\n     set last-received sum [ first orders-filled  ] of my-in-supply-links\n     ask my-in-supply-links [ set orders-filled but-first orders-filled ]\n     set inventory inventory + last-received\n  ]\n\n  ;; everything is purchased on the retailer level\n  set inventory 0\n\n  ;; advance the week\n  set clock clock + 1\n  ;; update the client information for the next round\n  ask players with [ my-team = myself ]\n  [\n    set order-placed? false\n    set color [color] of my-team + 2\n    ask my-out-demand-links [ set orders-placed [ordered] of myself ]\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to end-week ;; team procedure",
            " 2 |   ;; calculate the cost for the entire team",
            " 3 |   set cost sum [ inventory * 0.5 + back-orders ] of",
            " 4 |                    players with [ my-team = myself ]",
            " 5 |",
            " 6 |   plot-cost",
            " 7 |   plot-shipped",
            " 8 |   ;; the last player is the factory",
            " 9 |   ask last-player [ plot-orders ]",
            "10 |",
            "11 |   ;; update the external demand to the retailer that drives the game",
            "12 |   ask my-out-demand-links",
            "13 |   [",
            "14 |     ;; the demand starts at 4 cases per week. In week 7 it rises to",
            "15 |     ;; 8 cases and remains there the rest of the time.",
            "16 |     set orders-placed ifelse-value [clock] of myself <= 5 [ 4 ][ 8 ]",
            "17 |   ]",
            "18 |",
            "19 |   ;; produce the goods at the factory level",
            "20 |   let orders-requested sum [ orders-placed ] of my-in-demand-links",
            "21 |",
            "22 |   ask my-out-supply-links",
            "23 |   [ set orders-filled lput orders-requested orders-filled ]",
            "24 |",
            "25 |   ;; move goods into the factory, even though the factory",
            "26 |   ;; has the ability to produce an infinite amount of goods",
            "27 |   ;; there are still PERIODS-OF-DELAY weeks between the time",
            "28 |   ;; they place the order for goods and the time it is produced.",
            "29 |   ask out-supply-link-neighbors",
            "30 |   [",
            "31 |      set last-received sum [ first orders-filled  ] of my-in-supply-links",
            "32 |      ask my-in-supply-links [ set orders-filled but-first orders-filled ]",
            "33 |      set inventory inventory + last-received",
            "34 |   ]",
            "35 |",
            "36 |   ;; everything is purchased on the retailer level",
            "37 |   set inventory 0",
            "38 |",
            "39 |   ;; advance the week",
            "40 |   set clock clock + 1",
            "41 |   ;; update the client information for the next round",
            "42 |   ask players with [ my-team = myself ]",
            "43 |   [",
            "44 |     set order-placed? false",
            "45 |     set color [color] of my-team + 2",
            "46 |     ask my-out-demand-links [ set orders-placed [ordered] of myself ]",
            "47 |   ]",
            "48 | end"
          ],
          "pseudoCode": [
            "1 | define the end-week procedure for the team",
            "2 |   calculate the cost for the entire team",
            "3 |   set the cost to the sum of inventory multiplied by 0.5 plus back-orders for all players in the team",
            "4 |                    for players with the same team as the current player",
            "5 |",
            "6 |   plot the cost",
            "7 |   plot the shipped amount",
            "8 |   for the last player, which is the factory",
            "9 |   ask the last player to plot the orders",
            "10 |",
            "11 |   update the external demand to the retailer that drives the game",
            "12 |   for each outbound demand link",
            "13 |   [",
            "14 |     the demand starts at 4 cases per week. In week 7 it rises to",
            "15 |     8 cases and remains there the rest of the time.",
            "16 |     set the orders placed to 4 if the clock is less than or equal to 5, otherwise set it to 8",
            "17 |   ]",
            "18 |",
            "19 |   produce the goods at the factory level",
            "20 |   let the orders requested be the sum of orders placed by all inbound demand links",
            "21 |",
            "22 |   for each outbound supply link",
            "23 |   [ set the orders filled to the list of orders requested ]",
            "24 |",
            "25 |   move goods into the factory, even though the factory",
            "26 |   has the ability to produce an infinite amount of goods",
            "27 |   there are still PERIODS-OF-DELAY weeks between the time",
            "28 |   they place the order for goods and the time it is produced.",
            "29 |   for each outbound supply link neighbor",
            "30 |   [",
            "31 |      set the last received to the sum of the first orders filled by all inbound supply links",
            "32 |      for each inbound supply link, set the orders filled to all but the first",
            "33 |      set the inventory to the inventory plus the last received",
            "34 |   ]",
            "35 |",
            "36 |   everything is purchased on the retailer level",
            "37 |   set the inventory to 0",
            "38 |",
            "39 |   advance the week",
            "40 |   set the clock to the clock plus 1",
            "41 |   update the client information for the next round",
            "42 |   for each player in the team",
            "43 |   [",
            "44 |     set order placed to false",
            "45 |     set the color to the color of the team plus 2",
            "46 |     for each outbound demand link, set the orders placed to the ordered amount",
            "47 |   ]",
            "48 | end the procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to end-week ;; team procedure",
              "pseudoCode": "define the end-week procedure for the team"
            },
            {
              "lineNumber": 2,
              "originalCode": ";; calculate the cost for the entire team",
              "pseudoCode": "calculate the cost for the entire team"
            },
            {
              "lineNumber": 3,
              "originalCode": "set cost sum [ inventory * 0.5 + back-orders ] of",
              "pseudoCode": "set the cost to the sum of inventory multiplied by 0.5 plus back-orders for all players in the team"
            },
            {
              "lineNumber": 4,
              "originalCode": "players with [ my-team = myself ]",
              "pseudoCode": "for players with the same team as the current player"
            },
            {
              "lineNumber": 5,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 6,
              "originalCode": "plot-cost",
              "pseudoCode": "plot the cost"
            },
            {
              "lineNumber": 7,
              "originalCode": "plot-shipped",
              "pseudoCode": "plot the shipped amount"
            },
            {
              "lineNumber": 8,
              "originalCode": ";; the last player is the factory",
              "pseudoCode": "for the last player, which is the factory"
            },
            {
              "lineNumber": 9,
              "originalCode": "ask last-player [ plot-orders ]",
              "pseudoCode": "ask the last player to plot the orders"
            },
            {
              "lineNumber": 10,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 11,
              "originalCode": ";; update the external demand to the retailer that drives the game",
              "pseudoCode": "update the external demand to the retailer that drives the game"
            },
            {
              "lineNumber": 12,
              "originalCode": "ask my-out-demand-links",
              "pseudoCode": "for each outbound demand link"
            },
            {
              "lineNumber": 13,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 14,
              "originalCode": ";; the demand starts at 4 cases per week. In week 7 it rises to",
              "pseudoCode": "the demand starts at 4 cases per week. In week 7 it rises to"
            },
            {
              "lineNumber": 15,
              "originalCode": ";; 8 cases and remains there the rest of the time.",
              "pseudoCode": "8 cases and remains there the rest of the time."
            },
            {
              "lineNumber": 16,
              "originalCode": "set orders-placed ifelse-value [clock] of myself <= 5 [ 4 ][ 8 ]",
              "pseudoCode": "set the orders placed to 4 if the clock is less than or equal to 5, otherwise set it to 8"
            },
            {
              "lineNumber": 17,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 18,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 19,
              "originalCode": ";; produce the goods at the factory level",
              "pseudoCode": "produce the goods at the factory level"
            },
            {
              "lineNumber": 20,
              "originalCode": "let orders-requested sum [ orders-placed ] of my-in-demand-links",
              "pseudoCode": "let the orders requested be the sum of orders placed by all inbound demand links"
            },
            {
              "lineNumber": 21,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 22,
              "originalCode": "ask my-out-supply-links",
              "pseudoCode": "for each outbound supply link"
            },
            {
              "lineNumber": 23,
              "originalCode": "[ set orders-filled lput orders-requested orders-filled ]",
              "pseudoCode": "[ set the orders filled to the list of orders requested ]"
            },
            {
              "lineNumber": 24,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 25,
              "originalCode": ";; move goods into the factory, even though the factory",
              "pseudoCode": "move goods into the factory, even though the factory"
            },
            {
              "lineNumber": 26,
              "originalCode": ";; has the ability to produce an infinite amount of goods",
              "pseudoCode": "has the ability to produce an infinite amount of goods"
            },
            {
              "lineNumber": 27,
              "originalCode": ";; there are still PERIODS-OF-DELAY weeks between the time",
              "pseudoCode": "there are still PERIODS-OF-DELAY weeks between the time"
            },
            {
              "lineNumber": 28,
              "originalCode": ";; they place the order for goods and the time it is produced.",
              "pseudoCode": "they place the order for goods and the time it is produced."
            },
            {
              "lineNumber": 29,
              "originalCode": "ask out-supply-link-neighbors",
              "pseudoCode": "for each outbound supply link neighbor"
            },
            {
              "lineNumber": 30,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 31,
              "originalCode": "set last-received sum [ first orders-filled  ] of my-in-supply-links",
              "pseudoCode": "set the last received to the sum of the first orders filled by all inbound supply links"
            },
            {
              "lineNumber": 32,
              "originalCode": "ask my-in-supply-links [ set orders-filled but-first orders-filled ]",
              "pseudoCode": "for each inbound supply link, set the orders filled to all but the first"
            },
            {
              "lineNumber": 33,
              "originalCode": "set inventory inventory + last-received",
              "pseudoCode": "set the inventory to the inventory plus the last received"
            },
            {
              "lineNumber": 34,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 35,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 36,
              "originalCode": ";; everything is purchased on the retailer level",
              "pseudoCode": "everything is purchased on the retailer level"
            },
            {
              "lineNumber": 37,
              "originalCode": "set inventory 0",
              "pseudoCode": "set the inventory to 0"
            },
            {
              "lineNumber": 38,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 39,
              "originalCode": ";; advance the week",
              "pseudoCode": "advance the week"
            },
            {
              "lineNumber": 40,
              "originalCode": "set clock clock + 1",
              "pseudoCode": "set the clock to the clock plus 1"
            },
            {
              "lineNumber": 41,
              "originalCode": ";; update the client information for the next round",
              "pseudoCode": "update the client information for the next round"
            },
            {
              "lineNumber": 42,
              "originalCode": "ask players with [ my-team = myself ]",
              "pseudoCode": "for each player in the team"
            },
            {
              "lineNumber": 43,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 44,
              "originalCode": "set order-placed? false",
              "pseudoCode": "set order placed to false"
            },
            {
              "lineNumber": 45,
              "originalCode": "set color [color] of my-team + 2",
              "pseudoCode": "set the color to the color of the team plus 2"
            },
            {
              "lineNumber": 46,
              "originalCode": "ask my-out-demand-links [ set orders-placed [ordered] of myself ]",
              "pseudoCode": "for each outbound demand link, set the orders placed to the ordered amount"
            },
            {
              "lineNumber": 47,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 48,
              "originalCode": "end",
              "pseudoCode": "end the procedure"
            }
          ]
        },
        {
          "name": "place-order",
          "documentation": "; player procedure",
          "originalCode": "to place-order ;; player procedure\n  ;; only change the order if we haven't\n  ;; done so this week as each player can only\n  ;; place 1 order per day and cannot change it\n  ;; once it is placed\n  if not order-placed?\n  [\n    set order-placed? true\n    set color [color] of my-team\n    set ordered order\n    update-player\n  ]\n\n  let teammates players with [ my-team = [my-team] of myself ]\n\n  ;; once the last player has placed an order\n  ;; all players ship and advance the week\n  if not any? teammates with [ not order-placed? ]\n  [\n    ask teammates\n    [\n      ship\n      ask my-out-demand-links\n        [ set orders-placed [ordered] of myself ]\n    ]\n    ask my-team\n    [\n      if clock <= weeks-of-simulation\n      [ end-week ]\n    ]\n    ;; make sure the info on the client gets updated\n    ask teammates\n    [ update-player ]\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to place-order ;; player procedure",
            " 2 |   ;; only change the order if we haven't",
            " 3 |   ;; done so this week as each player can only",
            " 4 |   ;; place 1 order per day and cannot change it",
            " 5 |   ;; once it is placed",
            " 6 |   if not order-placed?",
            " 7 |   [",
            " 8 |     set order-placed? true",
            " 9 |     set color [color] of my-team",
            "10 |     set ordered order",
            "11 |     update-player",
            "12 |   ]",
            "13 |",
            "14 |   let teammates players with [ my-team = [my-team] of myself ]",
            "15 |",
            "16 |   ;; once the last player has placed an order",
            "17 |   ;; all players ship and advance the week",
            "18 |   if not any? teammates with [ not order-placed? ]",
            "19 |   [",
            "20 |     ask teammates",
            "21 |     [",
            "22 |       ship",
            "23 |       ask my-out-demand-links",
            "24 |         [ set orders-placed [ordered] of myself ]",
            "25 |     ]",
            "26 |     ask my-team",
            "27 |     [",
            "28 |       if clock <= weeks-of-simulation",
            "29 |       [ end-week ]",
            "30 |     ]",
            "31 |     ;; make sure the info on the client gets updated",
            "32 |     ask teammates",
            "33 |     [ update-player ]",
            "34 |   ]",
            "35 | end"
          ],
          "pseudoCode": [
            "1 | Define a procedure named place-order for the player.",
            "2 |   ;; only change the order if we haven't",
            "3 |   ;; done so this week as each player can only",
            "4 |   ;; place 1 order per day and cannot change it",
            "5 |   ;; once it is placed",
            "6 |   If the order has not been placed,",
            "7 |   [",
            "8 |     Mark the order as placed.",
            "9 |     Set the color to the color of the team.",
            "10 |     Set the ordered value to the order.",
            "11 |     Update the player.",
            "12 |   ]",
            "13 |",
            "14 |   Let teammates be the players who are on the same team.",
            "15 |",
            "16 |   ;; once the last player has placed an order",
            "17 |   ;; all players ship and advance the week",
            "18 |   If no teammates have not placed an order,",
            "19 |   [",
            "20 |     For each teammate,",
            "21 |     [",
            "22 |       Ship the order.",
            "23 |       For each out-demand link,",
            "24 |         [ Set the orders-placed to the ordered value. ]",
            "25 |     ]",
            "26 |     For each member of the team,",
            "27 |     [",
            "28 |       If the clock is less than or equal to the weeks of simulation,",
            "29 |       [ End the week. ]",
            "30 |     ]",
            "31 |     ;; make sure the info on the client gets updated",
            "32 |     For each teammate,",
            "33 |     [ Update the player. ]",
            "34 |   ]",
            "35 | End the procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to place-order ;; player procedure",
              "pseudoCode": "Define a procedure named place-order for the player."
            },
            {
              "lineNumber": 2,
              "originalCode": ";; only change the order if we haven't",
              "pseudoCode": ";; only change the order if we haven't"
            },
            {
              "lineNumber": 3,
              "originalCode": ";; done so this week as each player can only",
              "pseudoCode": ";; done so this week as each player can only"
            },
            {
              "lineNumber": 4,
              "originalCode": ";; place 1 order per day and cannot change it",
              "pseudoCode": ";; place 1 order per day and cannot change it"
            },
            {
              "lineNumber": 5,
              "originalCode": ";; once it is placed",
              "pseudoCode": ";; once it is placed"
            },
            {
              "lineNumber": 6,
              "originalCode": "if not order-placed?",
              "pseudoCode": "If the order has not been placed,"
            },
            {
              "lineNumber": 7,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 8,
              "originalCode": "set order-placed? true",
              "pseudoCode": "Mark the order as placed."
            },
            {
              "lineNumber": 9,
              "originalCode": "set color [color] of my-team",
              "pseudoCode": "Set the color to the color of the team."
            },
            {
              "lineNumber": 10,
              "originalCode": "set ordered order",
              "pseudoCode": "Set the ordered value to the order."
            },
            {
              "lineNumber": 11,
              "originalCode": "update-player",
              "pseudoCode": "Update the player."
            },
            {
              "lineNumber": 12,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 13,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 14,
              "originalCode": "let teammates players with [ my-team = [my-team] of myself ]",
              "pseudoCode": "Let teammates be the players who are on the same team."
            },
            {
              "lineNumber": 15,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 16,
              "originalCode": ";; once the last player has placed an order",
              "pseudoCode": ";; once the last player has placed an order"
            },
            {
              "lineNumber": 17,
              "originalCode": ";; all players ship and advance the week",
              "pseudoCode": ";; all players ship and advance the week"
            },
            {
              "lineNumber": 18,
              "originalCode": "if not any? teammates with [ not order-placed? ]",
              "pseudoCode": "If no teammates have not placed an order,"
            },
            {
              "lineNumber": 19,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 20,
              "originalCode": "ask teammates",
              "pseudoCode": "For each teammate,"
            },
            {
              "lineNumber": 21,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 22,
              "originalCode": "ship",
              "pseudoCode": "Ship the order."
            },
            {
              "lineNumber": 23,
              "originalCode": "ask my-out-demand-links",
              "pseudoCode": "For each out-demand link,"
            },
            {
              "lineNumber": 24,
              "originalCode": "[ set orders-placed [ordered] of myself ]",
              "pseudoCode": "[ Set the orders-placed to the ordered value. ]"
            },
            {
              "lineNumber": 25,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 26,
              "originalCode": "ask my-team",
              "pseudoCode": "For each member of the team,"
            },
            {
              "lineNumber": 27,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 28,
              "originalCode": "if clock <= weeks-of-simulation",
              "pseudoCode": "If the clock is less than or equal to the weeks of simulation,"
            },
            {
              "lineNumber": 29,
              "originalCode": "[ end-week ]",
              "pseudoCode": "[ End the week. ]"
            },
            {
              "lineNumber": 30,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 31,
              "originalCode": ";; make sure the info on the client gets updated",
              "pseudoCode": ";; make sure the info on the client gets updated"
            },
            {
              "lineNumber": 32,
              "originalCode": "ask teammates",
              "pseudoCode": "For each teammate,"
            },
            {
              "lineNumber": 33,
              "originalCode": "[ update-player ]",
              "pseudoCode": "[ Update the player. ]"
            },
            {
              "lineNumber": 34,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 35,
              "originalCode": "end",
              "pseudoCode": "End the procedure."
            }
          ]
        },
        {
          "name": "ship",
          "documentation": "",
          "originalCode": "to ship\n  ;; move all the supplies along the chain.\n  ask out-supply-link-neighbors\n  [\n    ;; grab the shipment at the beginning of the list\n    ;; and add it to my inventory\n    set last-received sum [ first orders-filled  ] of my-in-supply-links\n    ask my-in-supply-links\n      [ set orders-filled but-first orders-filled ]\n    set inventory inventory + last-received\n  ]\n\n  ;; determine how many orders you need to send upstream\n  ;; this will be no more than the number of orders requested\n  ;; plus back orders or your inventory whichever is smaller\n  let new-orders [orders-placed] of one-of my-in-demand-links\n  let orders-requested new-orders + back-orders\n\n  ;; determine how much we can send given our current inventory\n  let orders-to-ship min list orders-requested inventory\n\n  ;; if there's not enough inventory they become back-orders\n  set back-orders max list 0 ( back-orders - inventory + new-orders )\n\n  ;; add the shipment to the shipping queue\n  ask my-out-supply-links\n    [ set orders-filled lput orders-to-ship orders-filled ]\n  set inventory inventory - orders-to-ship\nend",
          "numberedOriginalCode": [
            " 1 | to ship",
            " 2 |   ;; move all the supplies along the chain.",
            " 3 |   ask out-supply-link-neighbors",
            " 4 |   [",
            " 5 |     ;; grab the shipment at the beginning of the list",
            " 6 |     ;; and add it to my inventory",
            " 7 |     set last-received sum [ first orders-filled  ] of my-in-supply-links",
            " 8 |     ask my-in-supply-links",
            " 9 |       [ set orders-filled but-first orders-filled ]",
            "10 |     set inventory inventory + last-received",
            "11 |   ]",
            "12 |",
            "13 |   ;; determine how many orders you need to send upstream",
            "14 |   ;; this will be no more than the number of orders requested",
            "15 |   ;; plus back orders or your inventory whichever is smaller",
            "16 |   let new-orders [orders-placed] of one-of my-in-demand-links",
            "17 |   let orders-requested new-orders + back-orders",
            "18 |",
            "19 |   ;; determine how much we can send given our current inventory",
            "20 |   let orders-to-ship min list orders-requested inventory",
            "21 |",
            "22 |   ;; if there's not enough inventory they become back-orders",
            "23 |   set back-orders max list 0 ( back-orders - inventory + new-orders )",
            "24 |",
            "25 |   ;; add the shipment to the shipping queue",
            "26 |   ask my-out-supply-links",
            "27 |     [ set orders-filled lput orders-to-ship orders-filled ]",
            "28 |   set inventory inventory - orders-to-ship",
            "29 | end"
          ],
          "pseudoCode": [
            "1 | define a procedure called ship",
            "2 |   ;; move all the supplies along the chain.",
            "3 |   for each neighbor that is a supply link",
            "4 |   [",
            "5 |     ;; grab the shipment at the beginning of the list",
            "6 |     ;; and add it to my inventory",
            "7 |     set last received to the sum of the first order filled of my supply links",
            "8 |     for each of my supply links",
            "9 |       [ set orders filled to all but the first order filled ]",
            "10 |     add last received to inventory",
            "11 |   ]",
            "12 |",
            "13 |   ;; determine how many orders you need to send upstream",
            "14 |   ;; this will be no more than the number of orders requested",
            "15 |   ;; plus back orders or your inventory whichever is smaller",
            "16 |   let new orders to the orders placed of one of my demand links",
            "17 |   let orders requested to new orders plus back orders",
            "18 |",
            "19 |   ;; determine how much we can send given our current inventory",
            "20 |   let orders to ship to the minimum of orders requested and inventory",
            "21 |",
            "22 |   ;; if there's not enough inventory they become back-orders",
            "23 |   set back orders to the maximum of 0 and (back orders minus inventory plus new orders)",
            "24 |",
            "25 |   ;; add the shipment to the shipping queue",
            "26 |   for each of my supply links",
            "27 |     [ add orders to ship to the end of orders filled ]",
            "28 |   subtract orders to ship from inventory",
            "29 | end"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to ship",
              "pseudoCode": "define a procedure called ship"
            },
            {
              "lineNumber": 2,
              "originalCode": ";; move all the supplies along the chain.",
              "pseudoCode": ";; move all the supplies along the chain."
            },
            {
              "lineNumber": 3,
              "originalCode": "ask out-supply-link-neighbors",
              "pseudoCode": "for each neighbor that is a supply link"
            },
            {
              "lineNumber": 4,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 5,
              "originalCode": ";; grab the shipment at the beginning of the list",
              "pseudoCode": ";; grab the shipment at the beginning of the list"
            },
            {
              "lineNumber": 6,
              "originalCode": ";; and add it to my inventory",
              "pseudoCode": ";; and add it to my inventory"
            },
            {
              "lineNumber": 7,
              "originalCode": "set last-received sum [ first orders-filled  ] of my-in-supply-links",
              "pseudoCode": "set last received to the sum of the first order filled of my supply links"
            },
            {
              "lineNumber": 8,
              "originalCode": "ask my-in-supply-links",
              "pseudoCode": "for each of my supply links"
            },
            {
              "lineNumber": 9,
              "originalCode": "[ set orders-filled but-first orders-filled ]",
              "pseudoCode": "[ set orders filled to all but the first order filled ]"
            },
            {
              "lineNumber": 10,
              "originalCode": "set inventory inventory + last-received",
              "pseudoCode": "add last received to inventory"
            },
            {
              "lineNumber": 11,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 12,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 13,
              "originalCode": ";; determine how many orders you need to send upstream",
              "pseudoCode": ";; determine how many orders you need to send upstream"
            },
            {
              "lineNumber": 14,
              "originalCode": ";; this will be no more than the number of orders requested",
              "pseudoCode": ";; this will be no more than the number of orders requested"
            },
            {
              "lineNumber": 15,
              "originalCode": ";; plus back orders or your inventory whichever is smaller",
              "pseudoCode": ";; plus back orders or your inventory whichever is smaller"
            },
            {
              "lineNumber": 16,
              "originalCode": "let new-orders [orders-placed] of one-of my-in-demand-links",
              "pseudoCode": "let new orders to the orders placed of one of my demand links"
            },
            {
              "lineNumber": 17,
              "originalCode": "let orders-requested new-orders + back-orders",
              "pseudoCode": "let orders requested to new orders plus back orders"
            },
            {
              "lineNumber": 18,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 19,
              "originalCode": ";; determine how much we can send given our current inventory",
              "pseudoCode": ";; determine how much we can send given our current inventory"
            },
            {
              "lineNumber": 20,
              "originalCode": "let orders-to-ship min list orders-requested inventory",
              "pseudoCode": "let orders to ship to the minimum of orders requested and inventory"
            },
            {
              "lineNumber": 21,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 22,
              "originalCode": ";; if there's not enough inventory they become back-orders",
              "pseudoCode": ";; if there's not enough inventory they become back-orders"
            },
            {
              "lineNumber": 23,
              "originalCode": "set back-orders max list 0 ( back-orders - inventory + new-orders )",
              "pseudoCode": "set back orders to the maximum of 0 and (back orders minus inventory plus new orders)"
            },
            {
              "lineNumber": 24,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 25,
              "originalCode": ";; add the shipment to the shipping queue",
              "pseudoCode": ";; add the shipment to the shipping queue"
            },
            {
              "lineNumber": 26,
              "originalCode": "ask my-out-supply-links",
              "pseudoCode": "for each of my supply links"
            },
            {
              "lineNumber": 27,
              "originalCode": "[ set orders-filled lput orders-to-ship orders-filled ]",
              "pseudoCode": "[ add orders to ship to the end of orders filled ]"
            },
            {
              "lineNumber": 28,
              "originalCode": "set inventory inventory - orders-to-ship",
              "pseudoCode": "subtract orders to ship from inventory"
            },
            {
              "lineNumber": 29,
              "originalCode": "end",
              "pseudoCode": "end"
            }
          ]
        },
        {
          "name": "create-new-student",
          "documentation": "",
          "originalCode": "to create-new-student\n  ;; if there are no incomplete teams\n  ;; create a new one\n  if not any? teams with [ members < 4 ]\n  [ create-team ]\n\n  add-student-to one-of teams with [ members < 4 ]\nend",
          "numberedOriginalCode": [
            "1 | to create-new-student",
            "2 |   ;; if there are no incomplete teams",
            "3 |   ;; create a new one",
            "4 |   if not any? teams with [ members < 4 ]",
            "5 |   [ create-team ]",
            "6 |",
            "7 |   add-student-to one-of teams with [ members < 4 ]",
            "8 | end"
          ],
          "pseudoCode": [
            "1 | When creating a new student,",
            "2 |   ;; if there are no incomplete teams",
            "3 |   ;; create a new one",
            "4 |   if there are no teams with less than 4 members,",
            "5 |   [ create a new team ]",
            "6 |",
            "7 |   add the student to one of the teams with less than 4 members",
            "8 | End"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to create-new-student",
              "pseudoCode": "When creating a new student,"
            },
            {
              "lineNumber": 2,
              "originalCode": ";; if there are no incomplete teams",
              "pseudoCode": ";; if there are no incomplete teams"
            },
            {
              "lineNumber": 3,
              "originalCode": ";; create a new one",
              "pseudoCode": ";; create a new one"
            },
            {
              "lineNumber": 4,
              "originalCode": "if not any? teams with [ members < 4 ]",
              "pseudoCode": "if there are no teams with less than 4 members,"
            },
            {
              "lineNumber": 5,
              "originalCode": "[ create-team ]",
              "pseudoCode": "[ create a new team ]"
            },
            {
              "lineNumber": 6,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 7,
              "originalCode": "add-student-to one-of teams with [ members < 4 ]",
              "pseudoCode": "add the student to one of the teams with less than 4 members"
            },
            {
              "lineNumber": 8,
              "originalCode": "end",
              "pseudoCode": "End"
            }
          ]
        },
        {
          "name": "create-team",
          "documentation": "",
          "originalCode": "to create-team\n ;; there is one team per row in the world, if\n ;; we've run out of rows the user should\n ;; just make the size of the world larger\n let p one-of patches with [ pxcor = max-pxcor and not any? teams-here ]\n ifelse p != nobody\n [\n  create-teams 1\n  [\n    set members 0\n    set cost 0\n    set demand 4\n    set last-player self\n    move-to p\n    set-color\n    set size 0.5\n    create-plot-pens\n    set clock 1\n  ]\n ]\n [ user-message \"There is no more space for a new team, please increase the size of the world\" ]\nend",
          "numberedOriginalCode": [
            " 1 | to create-team",
            " 2 |  ;; there is one team per row in the world, if",
            " 3 |  ;; we've run out of rows the user should",
            " 4 |  ;; just make the size of the world larger",
            " 5 |  let p one-of patches with [ pxcor = max-pxcor and not any? teams-here ]",
            " 6 |  ifelse p != nobody",
            " 7 |  [",
            " 8 |   create-teams 1",
            " 9 |   [",
            "10 |     set members 0",
            "11 |     set cost 0",
            "12 |     set demand 4",
            "13 |     set last-player self",
            "14 |     move-to p",
            "15 |     set-color",
            "16 |     set size 0.5",
            "17 |     create-plot-pens",
            "18 |     set clock 1",
            "19 |   ]",
            "20 |  ]",
            "21 |  [ user-message \"There is no more space for a new team, please increase the size of the world\" ]",
            "22 | end"
          ],
          "pseudoCode": [
            "1 | Define a procedure to create a team",
            "2 |   ;; Comment: There is one team per row in the world. If we've run out of rows, the user should just make the size of the world larger",
            "3 |   ;; Comment: There is one team per row in the world. If we've run out of rows, the user should just make the size of the world larger",
            "4 |   ;; Comment: There is one team per row in the world. If we've run out of rows, the user should just make the size of the world larger",
            "5 |   Let p be one of the patches with the maximum x-coordinate and no teams present",
            "6 |   If p is not nobody",
            "7 |   [",
            "8 |     Create one team",
            "9 |     [",
            "10 |       Set the number of members to 0",
            "11 |       Set the cost to 0",
            "12 |       Set the demand to 4",
            "13 |       Set the last player to self",
            "14 |       Move to patch p",
            "15 |       Set the color",
            "16 |       Set the size to 0.5",
            "17 |       Create plot pens",
            "18 |       Set the clock to 1",
            "19 |     ]",
            "20 |   ]",
            "21 |   [ Display a user message: \"There is no more space for a new team, please increase the size of the world\" ]",
            "22 | End the procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to create-team",
              "pseudoCode": "Define a procedure to create a team"
            },
            {
              "lineNumber": 2,
              "originalCode": ";; there is one team per row in the world, if",
              "pseudoCode": ";; Comment: There is one team per row in the world. If we've run out of rows, the user should just make the size of the world larger"
            },
            {
              "lineNumber": 3,
              "originalCode": ";; we've run out of rows the user should",
              "pseudoCode": ";; Comment: There is one team per row in the world. If we've run out of rows, the user should just make the size of the world larger"
            },
            {
              "lineNumber": 4,
              "originalCode": ";; just make the size of the world larger",
              "pseudoCode": ";; Comment: There is one team per row in the world. If we've run out of rows, the user should just make the size of the world larger"
            },
            {
              "lineNumber": 5,
              "originalCode": "let p one-of patches with [ pxcor = max-pxcor and not any? teams-here ]",
              "pseudoCode": "Let p be one of the patches with the maximum x-coordinate and no teams present"
            },
            {
              "lineNumber": 6,
              "originalCode": "ifelse p != nobody",
              "pseudoCode": "If p is not nobody"
            },
            {
              "lineNumber": 7,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 8,
              "originalCode": "create-teams 1",
              "pseudoCode": "Create one team"
            },
            {
              "lineNumber": 9,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 10,
              "originalCode": "set members 0",
              "pseudoCode": "Set the number of members to 0"
            },
            {
              "lineNumber": 11,
              "originalCode": "set cost 0",
              "pseudoCode": "Set the cost to 0"
            },
            {
              "lineNumber": 12,
              "originalCode": "set demand 4",
              "pseudoCode": "Set the demand to 4"
            },
            {
              "lineNumber": 13,
              "originalCode": "set last-player self",
              "pseudoCode": "Set the last player to self"
            },
            {
              "lineNumber": 14,
              "originalCode": "move-to p",
              "pseudoCode": "Move to patch p"
            },
            {
              "lineNumber": 15,
              "originalCode": "set-color",
              "pseudoCode": "Set the color"
            },
            {
              "lineNumber": 16,
              "originalCode": "set size 0.5",
              "pseudoCode": "Set the size to 0.5"
            },
            {
              "lineNumber": 17,
              "originalCode": "create-plot-pens",
              "pseudoCode": "Create plot pens"
            },
            {
              "lineNumber": 18,
              "originalCode": "set clock 1",
              "pseudoCode": "Set the clock to 1"
            },
            {
              "lineNumber": 19,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 20,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 21,
              "originalCode": "[ user-message \"There is no more space for a new team, please increase the size of the world\" ]",
              "pseudoCode": "[ Display a user message: \"There is no more space for a new team, please increase the size of the world\" ]"
            },
            {
              "lineNumber": 22,
              "originalCode": "end",
              "pseudoCode": "End the procedure"
            }
          ]
        },
        {
          "name": "set-color",
          "documentation": "; grab a random color from the list of distinguishable colors",
          "originalCode": "to set-color\n  ;; if the size of the world is increased we have to reuse colors\n  if length colors = 0\n  [\n    set colors [ red blue green violet pink orange brown yellow ]\n    set color-names [ \"red\" \"blue\" \"green\" \"violet\" \"pink\" \"orange\" \"brown\" \"yellow\" ]\n  ]\n  let index random length colors\n  set color item index colors\n  set color-name item index color-names\n  set colors remove-item index colors\n  set color-names remove-item index color-names\nend",
          "numberedOriginalCode": [
            " 1 | to set-color",
            " 2 |   ;; if the size of the world is increased we have to reuse colors",
            " 3 |   if length colors = 0",
            " 4 |   [",
            " 5 |     set colors [ red blue green violet pink orange brown yellow ]",
            " 6 |     set color-names [ \"red\" \"blue\" \"green\" \"violet\" \"pink\" \"orange\" \"brown\" \"yellow\" ]",
            " 7 |   ]",
            " 8 |   let index random length colors",
            " 9 |   set color item index colors",
            "10 |   set color-name item index color-names",
            "11 |   set colors remove-item index colors",
            "12 |   set color-names remove-item index color-names",
            "13 | end"
          ],
          "pseudoCode": [
            "1 | to set the color",
            "2 |   ;; if the size of the world is increased we have to reuse colors",
            "3 |   if the number of colors is 0",
            "4 |   [",
            "5 |     set the colors to red, blue, green, violet, pink, orange, brown, and yellow",
            "6 |     set the color names to \"red\", \"blue\", \"green\", \"violet\", \"pink\", \"orange\", \"brown\", and \"yellow\"",
            "7 |   ]",
            "8 |   let index be a random number from 0 to the number of colors minus 1",
            "9 |   set the color to the color at the index position in the colors list",
            "10 |   set the color name to the color name at the index position in the color names list",
            "11 |   remove the color at the index position from the colors list",
            "12 |   remove the color name at the index position from the color names list",
            "13 | end"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to set-color",
              "pseudoCode": "to set the color"
            },
            {
              "lineNumber": 2,
              "originalCode": ";; if the size of the world is increased we have to reuse colors",
              "pseudoCode": ";; if the size of the world is increased we have to reuse colors"
            },
            {
              "lineNumber": 3,
              "originalCode": "if length colors = 0",
              "pseudoCode": "if the number of colors is 0"
            },
            {
              "lineNumber": 4,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 5,
              "originalCode": "set colors [ red blue green violet pink orange brown yellow ]",
              "pseudoCode": "set the colors to red, blue, green, violet, pink, orange, brown, and yellow"
            },
            {
              "lineNumber": 6,
              "originalCode": "set color-names [ \"red\" \"blue\" \"green\" \"violet\" \"pink\" \"orange\" \"brown\" \"yellow\" ]",
              "pseudoCode": "set the color names to \"red\", \"blue\", \"green\", \"violet\", \"pink\", \"orange\", \"brown\", and \"yellow\""
            },
            {
              "lineNumber": 7,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 8,
              "originalCode": "let index random length colors",
              "pseudoCode": "let index be a random number from 0 to the number of colors minus 1"
            },
            {
              "lineNumber": 9,
              "originalCode": "set color item index colors",
              "pseudoCode": "set the color to the color at the index position in the colors list"
            },
            {
              "lineNumber": 10,
              "originalCode": "set color-name item index color-names",
              "pseudoCode": "set the color name to the color name at the index position in the color names list"
            },
            {
              "lineNumber": 11,
              "originalCode": "set colors remove-item index colors",
              "pseudoCode": "remove the color at the index position from the colors list"
            },
            {
              "lineNumber": 12,
              "originalCode": "set color-names remove-item index color-names",
              "pseudoCode": "remove the color name at the index position from the color names list"
            },
            {
              "lineNumber": 13,
              "originalCode": "end",
              "pseudoCode": "end"
            }
          ]
        },
        {
          "name": "add-student-to",
          "documentation": "",
          "originalCode": "to add-student-to [this-team]\n  create-players 1\n  [\n    set user-id hubnet-message-source\n    set label user-id\n    set inventory 12\n    set back-orders 0\n    set order 4\n    set ordered 0\n    ;; attach the new player to the end of the chain.\n    ask [last-player] of this-team\n    [\n       create-demand-link-to myself\n         [ set orders-placed 4 ]\n       create-supply-link-from myself\n         [ set orders-filled n-values periods-of-delay [ 0 ] ]\n    ]\n    ;; set up directly left of the current last player\n    setxy [xcor] of [last-player] of this-team - 1 [ycor] of [last-player] of this-team\n    set my-team this-team\n    set role my-role [members] of my-team\n    ask this-team\n    [\n      set last-player myself\n      set members members + 1\n      ask my-out-supply-links [ die ]\n      ask my-in-demand-links [ die ]\n      create-supply-link-to myself\n        [ set orders-filled n-values periods-of-delay [ 0 ] hide-link ]\n      create-demand-link-from myself\n        [ set orders-placed 4 hide-link ]\n    ]\n    set order-placed? false\n    set color [color] of this-team + 2\n    init-player\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to add-student-to [this-team]",
            " 2 |   create-players 1",
            " 3 |   [",
            " 4 |     set user-id hubnet-message-source",
            " 5 |     set label user-id",
            " 6 |     set inventory 12",
            " 7 |     set back-orders 0",
            " 8 |     set order 4",
            " 9 |     set ordered 0",
            "10 |     ;; attach the new player to the end of the chain.",
            "11 |     ask [last-player] of this-team",
            "12 |     [",
            "13 |        create-demand-link-to myself",
            "14 |          [ set orders-placed 4 ]",
            "15 |        create-supply-link-from myself",
            "16 |          [ set orders-filled n-values periods-of-delay [ 0 ] ]",
            "17 |     ]",
            "18 |     ;; set up directly left of the current last player",
            "19 |     setxy [xcor] of [last-player] of this-team - 1 [ycor] of [last-player] of this-team",
            "20 |     set my-team this-team",
            "21 |     set role my-role [members] of my-team",
            "22 |     ask this-team",
            "23 |     [",
            "24 |       set last-player myself",
            "25 |       set members members + 1",
            "26 |       ask my-out-supply-links [ die ]",
            "27 |       ask my-in-demand-links [ die ]",
            "28 |       create-supply-link-to myself",
            "29 |         [ set orders-filled n-values periods-of-delay [ 0 ] hide-link ]",
            "30 |       create-demand-link-from myself",
            "31 |         [ set orders-placed 4 hide-link ]",
            "32 |     ]",
            "33 |     set order-placed? false",
            "34 |     set color [color] of this-team + 2",
            "35 |     init-player",
            "36 |   ]",
            "37 | end"
          ],
          "pseudoCode": [
            "1 | When adding a student to a team:",
            "2 |   Create one player",
            "3 |   [",
            "4 |     Set the user ID to the hubnet message source",
            "5 |     Set the label to the user ID",
            "6 |     Set the inventory to 12",
            "7 |     Set the back orders to 0",
            "8 |     Set the order to 4",
            "9 |     Set the ordered to 0",
            "10 |     ;; Attach the new player to the end of the chain.",
            "11 |     Ask the last player of the team",
            "12 |     [",
            "13 |        Create a demand link to myself",
            "14 |          [ Set orders placed to 4 ]",
            "15 |        Create a supply link from myself",
            "16 |          [ Set orders filled to a list of zeros with length equal to periods of delay ]",
            "17 |     ]",
            "18 |     ;; Set up directly left of the current last player",
            "19 |     Set the x and y coordinates to one unit left of the last player's coordinates",
            "20 |     Set my team to the team",
            "21 |     Set the role to the role of the members of my team",
            "22 |     Ask the team",
            "23 |     [",
            "24 |       Set the last player to myself",
            "25 |       Increase the members by 1",
            "26 |       Ask my out supply links to die",
            "27 |       Ask my in demand links to die",
            "28 |       Create a supply link to myself",
            "29 |         [ Set orders filled to a list of zeros with length equal to periods of delay and hide the link ]",
            "30 |       Create a demand link from myself",
            "31 |         [ Set orders placed to 4 and hide the link ]",
            "32 |     ]",
            "33 |     Set order placed to false",
            "34 |     Set the color to the team's color plus 2",
            "35 |     Initialize the player",
            "36 |   ]",
            "37 | End"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to add-student-to [this-team]",
              "pseudoCode": "When adding a student to a team:"
            },
            {
              "lineNumber": 2,
              "originalCode": "create-players 1",
              "pseudoCode": "Create one player"
            },
            {
              "lineNumber": 3,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 4,
              "originalCode": "set user-id hubnet-message-source",
              "pseudoCode": "Set the user ID to the hubnet message source"
            },
            {
              "lineNumber": 5,
              "originalCode": "set label user-id",
              "pseudoCode": "Set the label to the user ID"
            },
            {
              "lineNumber": 6,
              "originalCode": "set inventory 12",
              "pseudoCode": "Set the inventory to 12"
            },
            {
              "lineNumber": 7,
              "originalCode": "set back-orders 0",
              "pseudoCode": "Set the back orders to 0"
            },
            {
              "lineNumber": 8,
              "originalCode": "set order 4",
              "pseudoCode": "Set the order to 4"
            },
            {
              "lineNumber": 9,
              "originalCode": "set ordered 0",
              "pseudoCode": "Set the ordered to 0"
            },
            {
              "lineNumber": 10,
              "originalCode": ";; attach the new player to the end of the chain.",
              "pseudoCode": ";; Attach the new player to the end of the chain."
            },
            {
              "lineNumber": 11,
              "originalCode": "ask [last-player] of this-team",
              "pseudoCode": "Ask the last player of the team"
            },
            {
              "lineNumber": 12,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 13,
              "originalCode": "create-demand-link-to myself",
              "pseudoCode": "Create a demand link to myself"
            },
            {
              "lineNumber": 14,
              "originalCode": "[ set orders-placed 4 ]",
              "pseudoCode": "[ Set orders placed to 4 ]"
            },
            {
              "lineNumber": 15,
              "originalCode": "create-supply-link-from myself",
              "pseudoCode": "Create a supply link from myself"
            },
            {
              "lineNumber": 16,
              "originalCode": "[ set orders-filled n-values periods-of-delay [ 0 ] ]",
              "pseudoCode": "[ Set orders filled to a list of zeros with length equal to periods of delay ]"
            },
            {
              "lineNumber": 17,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 18,
              "originalCode": ";; set up directly left of the current last player",
              "pseudoCode": ";; Set up directly left of the current last player"
            },
            {
              "lineNumber": 19,
              "originalCode": "setxy [xcor] of [last-player] of this-team - 1 [ycor] of [last-player] of this-team",
              "pseudoCode": "Set the x and y coordinates to one unit left of the last player's coordinates"
            },
            {
              "lineNumber": 20,
              "originalCode": "set my-team this-team",
              "pseudoCode": "Set my team to the team"
            },
            {
              "lineNumber": 21,
              "originalCode": "set role my-role [members] of my-team",
              "pseudoCode": "Set the role to the role of the members of my team"
            },
            {
              "lineNumber": 22,
              "originalCode": "ask this-team",
              "pseudoCode": "Ask the team"
            },
            {
              "lineNumber": 23,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 24,
              "originalCode": "set last-player myself",
              "pseudoCode": "Set the last player to myself"
            },
            {
              "lineNumber": 25,
              "originalCode": "set members members + 1",
              "pseudoCode": "Increase the members by 1"
            },
            {
              "lineNumber": 26,
              "originalCode": "ask my-out-supply-links [ die ]",
              "pseudoCode": "Ask my out supply links to die"
            },
            {
              "lineNumber": 27,
              "originalCode": "ask my-in-demand-links [ die ]",
              "pseudoCode": "Ask my in demand links to die"
            },
            {
              "lineNumber": 28,
              "originalCode": "create-supply-link-to myself",
              "pseudoCode": "Create a supply link to myself"
            },
            {
              "lineNumber": 29,
              "originalCode": "[ set orders-filled n-values periods-of-delay [ 0 ] hide-link ]",
              "pseudoCode": "[ Set orders filled to a list of zeros with length equal to periods of delay and hide the link ]"
            },
            {
              "lineNumber": 30,
              "originalCode": "create-demand-link-from myself",
              "pseudoCode": "Create a demand link from myself"
            },
            {
              "lineNumber": 31,
              "originalCode": "[ set orders-placed 4 hide-link ]",
              "pseudoCode": "[ Set orders placed to 4 and hide the link ]"
            },
            {
              "lineNumber": 32,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 33,
              "originalCode": "set order-placed? false",
              "pseudoCode": "Set order placed to false"
            },
            {
              "lineNumber": 34,
              "originalCode": "set color [color] of this-team + 2",
              "pseudoCode": "Set the color to the team's color plus 2"
            },
            {
              "lineNumber": 35,
              "originalCode": "init-player",
              "pseudoCode": "Initialize the player"
            },
            {
              "lineNumber": 36,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 37,
              "originalCode": "end",
              "pseudoCode": "End"
            }
          ]
        },
        {
          "name": "my-role",
          "documentation": "; set size appropriate to your position in the chain.\n; factories are biggest and retailers smallest\n; report the name of the role",
          "originalCode": "to-report my-role [degree]\n  set size degree * 0.1 + 0.5\n  report item degree roles\nend",
          "numberedOriginalCode": [
            "1 | to-report my-role [degree]",
            "2 |   set size degree * 0.1 + 0.5",
            "3 |   report item degree roles",
            "4 | end"
          ],
          "pseudoCode": [
            "1 | To report the role based on the degree:",
            "2 |   Set the size to degree times 0.1 plus 0.5",
            "3 |   Report the item at degree in roles",
            "4 | End"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to-report my-role [degree]",
              "pseudoCode": "To report the role based on the degree:"
            },
            {
              "lineNumber": 2,
              "originalCode": "set size degree * 0.1 + 0.5",
              "pseudoCode": "Set the size to degree times 0.1 plus 0.5"
            },
            {
              "lineNumber": 3,
              "originalCode": "report item degree roles",
              "pseudoCode": "Report the item at degree in roles"
            },
            {
              "lineNumber": 4,
              "originalCode": "end",
              "pseudoCode": "End"
            }
          ]
        },
        {
          "name": "reassign-role",
          "documentation": "; if a player leaves the game we may need to\n; get new roles since the new player will be\n; added to the end rather than where the last player left.",
          "originalCode": "to reassign-role\n  let degree [xcor] of my-team - xcor - 1\n  set role my-role degree\n  set role item degree roles\nend",
          "numberedOriginalCode": [
            "1 | to reassign-role",
            "2 |   let degree [xcor] of my-team - xcor - 1",
            "3 |   set role my-role degree",
            "4 |   set role item degree roles",
            "5 | end"
          ],
          "pseudoCode": [
            "1 | Define a procedure named reassign-role",
            "2 |   Calculate the degree by subtracting the x-coordinate of the current turtle from the x-coordinate of the turtle's team minus one",
            "3 |   Set the role of the current turtle to the value at the calculated degree in the roles list",
            "4 |   Set the role of the current turtle to the item at the calculated degree in the roles list",
            "5 | End the procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to reassign-role",
              "pseudoCode": "Define a procedure named reassign-role"
            },
            {
              "lineNumber": 2,
              "originalCode": "let degree [xcor] of my-team - xcor - 1",
              "pseudoCode": "Calculate the degree by subtracting the x-coordinate of the current turtle from the x-coordinate of the turtle's team minus one"
            },
            {
              "lineNumber": 3,
              "originalCode": "set role my-role degree",
              "pseudoCode": "Set the role of the current turtle to the value at the calculated degree in the roles list"
            },
            {
              "lineNumber": 4,
              "originalCode": "set role item degree roles",
              "pseudoCode": "Set the role of the current turtle to the item at the calculated degree in the roles list"
            },
            {
              "lineNumber": 5,
              "originalCode": "end",
              "pseudoCode": "End the procedure"
            }
          ]
        },
        {
          "name": "remove-student",
          "documentation": "",
          "originalCode": "to remove-student\n  ask players with [ user-id = hubnet-message-source ]\n    [ remove-self ]\nend",
          "numberedOriginalCode": [
            "1 | to remove-student",
            "2 |   ask players with [ user-id = hubnet-message-source ]",
            "3 |     [ remove-self ]",
            "4 | end"
          ],
          "pseudoCode": [
            "1 | When the procedure to remove a student is called,",
            "2 |   For each player whose user ID matches the source of the hubnet message,",
            "3 |     Remove that player from the simulation.",
            "4 | End the procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to remove-student",
              "pseudoCode": "When the procedure to remove a student is called,"
            },
            {
              "lineNumber": 2,
              "originalCode": "ask players with [ user-id = hubnet-message-source ]",
              "pseudoCode": "For each player whose user ID matches the source of the hubnet message,"
            },
            {
              "lineNumber": 3,
              "originalCode": "[ remove-self ]",
              "pseudoCode": "Remove that player from the simulation."
            },
            {
              "lineNumber": 4,
              "originalCode": "end",
              "pseudoCode": "End the procedure."
            }
          ]
        },
        {
          "name": "remove-self",
          "documentation": "",
          "originalCode": "to remove-self\n  ;; if I am the last player make my neighbor\n  ;; to the right the last player\n  if [last-player] of my-team = self\n  [\n    ask my-team\n    [\n      set last-player [ one-of out-supply-link-neighbors ] of myself\n    ]\n  ]\n\n  ask my-team\n  [\n    set members members - 1\n    ;; if I am the last player take the team with me.\n    if members = 0\n    [\n      ;; return the colors to the available list\n      set colors lput color colors\n      set color-names lput color-name color-names\n      die\n      ;; we've shifted perspective to make the above code\n      ;; simpler so we must use myself to kill the player\n      ;; as well as the team.  if we're the last player in\n      ;; the team we don't have to do the rest of the bookkeeping\n      ;; below so we do want to abort immediately\n      ask myself [ die ]\n    ]\n  ]\n\n  ;; if this was the last player on the team this code never\n  ;; gets executed because the above code kills the turtle\n\n  ;; players up the chain from me move into their\n  ;; new position so there aren't gaps\n  let affected-players players with [ my-team = [my-team] of myself and xcor < [xcor] of myself ]\n  ask affected-players\n    [ set xcor xcor + 1 ]\n\n  ;; link my supply and demand neighbors to\n  ;; each other instead of me.\n  let n one-of out-supply-link-neighbors\n  ask in-supply-link-neighbors\n  [\n    if n != nobody and not out-supply-link-neighbor? n\n    [ create-supply-link-to n\n      [ set orders-filled n-values periods-of-delay [ 0 ] ] ]\n  ]\n\n  set n one-of out-demand-link-neighbors\n  ask in-demand-link-neighbors\n  [\n    if n != nobody and not out-demand-link-neighbor? n\n    [ create-demand-link-to n [] ]\n  ]\n\n  ask affected-players\n  [\n    reassign-role\n    init-player\n  ]\n  die\nend",
          "numberedOriginalCode": [
            " 1 | to remove-self",
            " 2 |   ;; if I am the last player make my neighbor",
            " 3 |   ;; to the right the last player",
            " 4 |   if [last-player] of my-team = self",
            " 5 |   [",
            " 6 |     ask my-team",
            " 7 |     [",
            " 8 |       set last-player [ one-of out-supply-link-neighbors ] of myself",
            " 9 |     ]",
            "10 |   ]",
            "11 |",
            "12 |   ask my-team",
            "13 |   [",
            "14 |     set members members - 1",
            "15 |     ;; if I am the last player take the team with me.",
            "16 |     if members = 0",
            "17 |     [",
            "18 |       ;; return the colors to the available list",
            "19 |       set colors lput color colors",
            "20 |       set color-names lput color-name color-names",
            "21 |       die",
            "22 |       ;; we've shifted perspective to make the above code",
            "23 |       ;; simpler so we must use myself to kill the player",
            "24 |       ;; as well as the team.  if we're the last player in",
            "25 |       ;; the team we don't have to do the rest of the bookkeeping",
            "26 |       ;; below so we do want to abort immediately",
            "27 |       ask myself [ die ]",
            "28 |     ]",
            "29 |   ]",
            "30 |",
            "31 |   ;; if this was the last player on the team this code never",
            "32 |   ;; gets executed because the above code kills the turtle",
            "33 |",
            "34 |   ;; players up the chain from me move into their",
            "35 |   ;; new position so there aren't gaps",
            "36 |   let affected-players players with [ my-team = [my-team] of myself and xcor < [xcor] of myself ]",
            "37 |   ask affected-players",
            "38 |     [ set xcor xcor + 1 ]",
            "39 |",
            "40 |   ;; link my supply and demand neighbors to",
            "41 |   ;; each other instead of me.",
            "42 |   let n one-of out-supply-link-neighbors",
            "43 |   ask in-supply-link-neighbors",
            "44 |   [",
            "45 |     if n != nobody and not out-supply-link-neighbor? n",
            "46 |     [ create-supply-link-to n",
            "47 |       [ set orders-filled n-values periods-of-delay [ 0 ] ] ]",
            "48 |   ]",
            "49 |",
            "50 |   set n one-of out-demand-link-neighbors",
            "51 |   ask in-demand-link-neighbors",
            "52 |   [",
            "53 |     if n != nobody and not out-demand-link-neighbor? n",
            "54 |     [ create-demand-link-to n [] ]",
            "55 |   ]",
            "56 |",
            "57 |   ask affected-players",
            "58 |   [",
            "59 |     reassign-role",
            "60 |     init-player",
            "61 |   ]",
            "62 |   die",
            "63 | end"
          ],
          "pseudoCode": [
            "1 | define a procedure to remove self",
            "2 |   ;; if I am the last player make my neighbor",
            "3 |   ;; to the right the last player",
            "4 |   if the last player of my team is myself",
            "5 |   [",
            "6 |     for each member of my team",
            "7 |     [",
            "8 |       set the last player to one of my out supply link neighbors",
            "9 |     ]",
            "10 |   ]",
            "11 |",
            "12 |   for each member of my team",
            "13 |   [",
            "14 |     decrease the number of members by 1",
            "15 |     ;; if I am the last player take the team with me.",
            "16 |     if the number of members is 0",
            "17 |     [",
            "18 |       ;; return the colors to the available list",
            "19 |       add my color to the list of colors",
            "20 |       add my color name to the list of color names",
            "21 |       remove myself",
            "22 |       ;; we've shifted perspective to make the above code",
            "23 |       ;; simpler so we must use myself to kill the player",
            "24 |       ;; as well as the team.  if we're the last player in",
            "25 |       ;; the team we don't have to do the rest of the bookkeeping",
            "26 |       ;; below so we do want to abort immediately",
            "27 |       remove myself",
            "28 |     ]",
            "29 |   ]",
            "30 |",
            "31 |   ;; if this was the last player on the team this code never",
            "32 |   ;; gets executed because the above code kills the turtle",
            "33 |",
            "34 |   ;; players up the chain from me move into their",
            "35 |   ;; new position so there aren't gaps",
            "36 |   let affected players be the players with the same team as me and xcor less than mine",
            "37 |   for each affected player",
            "38 |     [ increase their xcor by 1 ]",
            "39 |",
            "40 |   ;; link my supply and demand neighbors to",
            "41 |   ;; each other instead of me.",
            "42 |   let n be one of my out supply link neighbors",
            "43 |   for each of my in supply link neighbors",
            "44 |   [",
            "45 |     if n is not nobody and n is not my out supply link neighbor",
            "46 |     [ create a supply link to n",
            "47 |       [ set orders filled to n values of periods of delay with 0 ] ]",
            "48 |   ]",
            "49 |",
            "50 |   set n to one of my out demand link neighbors",
            "51 |   for each of my in demand link neighbors",
            "52 |   [",
            "53 |     if n is not nobody and n is not my out demand link neighbor",
            "54 |     [ create a demand link to n with no orders ]",
            "55 |   ]",
            "56 |",
            "57 |   for each affected player",
            "58 |   [",
            "59 |     reassign their role",
            "60 |     initialize the player",
            "61 |   ]",
            "62 |   remove myself",
            "63 | end"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to remove-self",
              "pseudoCode": "define a procedure to remove self"
            },
            {
              "lineNumber": 2,
              "originalCode": ";; if I am the last player make my neighbor",
              "pseudoCode": ";; if I am the last player make my neighbor"
            },
            {
              "lineNumber": 3,
              "originalCode": ";; to the right the last player",
              "pseudoCode": ";; to the right the last player"
            },
            {
              "lineNumber": 4,
              "originalCode": "if [last-player] of my-team = self",
              "pseudoCode": "if the last player of my team is myself"
            },
            {
              "lineNumber": 5,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 6,
              "originalCode": "ask my-team",
              "pseudoCode": "for each member of my team"
            },
            {
              "lineNumber": 7,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 8,
              "originalCode": "set last-player [ one-of out-supply-link-neighbors ] of myself",
              "pseudoCode": "set the last player to one of my out supply link neighbors"
            },
            {
              "lineNumber": 9,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 10,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 11,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 12,
              "originalCode": "ask my-team",
              "pseudoCode": "for each member of my team"
            },
            {
              "lineNumber": 13,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 14,
              "originalCode": "set members members - 1",
              "pseudoCode": "decrease the number of members by 1"
            },
            {
              "lineNumber": 15,
              "originalCode": ";; if I am the last player take the team with me.",
              "pseudoCode": ";; if I am the last player take the team with me."
            },
            {
              "lineNumber": 16,
              "originalCode": "if members = 0",
              "pseudoCode": "if the number of members is 0"
            },
            {
              "lineNumber": 17,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 18,
              "originalCode": ";; return the colors to the available list",
              "pseudoCode": ";; return the colors to the available list"
            },
            {
              "lineNumber": 19,
              "originalCode": "set colors lput color colors",
              "pseudoCode": "add my color to the list of colors"
            },
            {
              "lineNumber": 20,
              "originalCode": "set color-names lput color-name color-names",
              "pseudoCode": "add my color name to the list of color names"
            },
            {
              "lineNumber": 21,
              "originalCode": "die",
              "pseudoCode": "remove myself"
            },
            {
              "lineNumber": 22,
              "originalCode": ";; we've shifted perspective to make the above code",
              "pseudoCode": ";; we've shifted perspective to make the above code"
            },
            {
              "lineNumber": 23,
              "originalCode": ";; simpler so we must use myself to kill the player",
              "pseudoCode": ";; simpler so we must use myself to kill the player"
            },
            {
              "lineNumber": 24,
              "originalCode": ";; as well as the team.  if we're the last player in",
              "pseudoCode": ";; as well as the team.  if we're the last player in"
            },
            {
              "lineNumber": 25,
              "originalCode": ";; the team we don't have to do the rest of the bookkeeping",
              "pseudoCode": ";; the team we don't have to do the rest of the bookkeeping"
            },
            {
              "lineNumber": 26,
              "originalCode": ";; below so we do want to abort immediately",
              "pseudoCode": ";; below so we do want to abort immediately"
            },
            {
              "lineNumber": 27,
              "originalCode": "ask myself [ die ]",
              "pseudoCode": "remove myself"
            },
            {
              "lineNumber": 28,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 29,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 30,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 31,
              "originalCode": ";; if this was the last player on the team this code never",
              "pseudoCode": ";; if this was the last player on the team this code never"
            },
            {
              "lineNumber": 32,
              "originalCode": ";; gets executed because the above code kills the turtle",
              "pseudoCode": ";; gets executed because the above code kills the turtle"
            },
            {
              "lineNumber": 33,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 34,
              "originalCode": ";; players up the chain from me move into their",
              "pseudoCode": ";; players up the chain from me move into their"
            },
            {
              "lineNumber": 35,
              "originalCode": ";; new position so there aren't gaps",
              "pseudoCode": ";; new position so there aren't gaps"
            },
            {
              "lineNumber": 36,
              "originalCode": "let affected-players players with [ my-team = [my-team] of myself and xcor < [xcor] of myself ]",
              "pseudoCode": "let affected players be the players with the same team as me and xcor less than mine"
            },
            {
              "lineNumber": 37,
              "originalCode": "ask affected-players",
              "pseudoCode": "for each affected player"
            },
            {
              "lineNumber": 38,
              "originalCode": "[ set xcor xcor + 1 ]",
              "pseudoCode": "[ increase their xcor by 1 ]"
            },
            {
              "lineNumber": 39,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 40,
              "originalCode": ";; link my supply and demand neighbors to",
              "pseudoCode": ";; link my supply and demand neighbors to"
            },
            {
              "lineNumber": 41,
              "originalCode": ";; each other instead of me.",
              "pseudoCode": ";; each other instead of me."
            },
            {
              "lineNumber": 42,
              "originalCode": "let n one-of out-supply-link-neighbors",
              "pseudoCode": "let n be one of my out supply link neighbors"
            },
            {
              "lineNumber": 43,
              "originalCode": "ask in-supply-link-neighbors",
              "pseudoCode": "for each of my in supply link neighbors"
            },
            {
              "lineNumber": 44,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 45,
              "originalCode": "if n != nobody and not out-supply-link-neighbor? n",
              "pseudoCode": "if n is not nobody and n is not my out supply link neighbor"
            },
            {
              "lineNumber": 46,
              "originalCode": "[ create-supply-link-to n",
              "pseudoCode": "[ create a supply link to n"
            },
            {
              "lineNumber": 47,
              "originalCode": "[ set orders-filled n-values periods-of-delay [ 0 ] ] ]",
              "pseudoCode": "[ set orders filled to n values of periods of delay with 0 ] ]"
            },
            {
              "lineNumber": 48,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 49,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 50,
              "originalCode": "set n one-of out-demand-link-neighbors",
              "pseudoCode": "set n to one of my out demand link neighbors"
            },
            {
              "lineNumber": 51,
              "originalCode": "ask in-demand-link-neighbors",
              "pseudoCode": "for each of my in demand link neighbors"
            },
            {
              "lineNumber": 52,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 53,
              "originalCode": "if n != nobody and not out-demand-link-neighbor? n",
              "pseudoCode": "if n is not nobody and n is not my out demand link neighbor"
            },
            {
              "lineNumber": 54,
              "originalCode": "[ create-demand-link-to n [] ]",
              "pseudoCode": "[ create a demand link to n with no orders ]"
            },
            {
              "lineNumber": 55,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 56,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 57,
              "originalCode": "ask affected-players",
              "pseudoCode": "for each affected player"
            },
            {
              "lineNumber": 58,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 59,
              "originalCode": "reassign-role",
              "pseudoCode": "reassign their role"
            },
            {
              "lineNumber": 60,
              "originalCode": "init-player",
              "pseudoCode": "initialize the player"
            },
            {
              "lineNumber": 61,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 62,
              "originalCode": "die",
              "pseudoCode": "remove myself"
            },
            {
              "lineNumber": 63,
              "originalCode": "end",
              "pseudoCode": "end"
            }
          ]
        },
        {
          "name": "execute-command",
          "documentation": "; there are only two client actions.\n; moving the ORDERS-TO-PLACE slider\n; and placing the order.",
          "originalCode": "to execute-command [cmd]\n  ask players with [ user-id = hubnet-message-source ]\n  [\n    ;; don't let players keep going once they've reached the\n    ;; end of the simulation\n    if [clock] of my-team <= weeks-of-simulation\n    [\n      ;; catch changes to the slider\n      ifelse hubnet-message-tag = \"orders-to-place\"\n      [ set order hubnet-message ]\n      ;; lock in the order\n      [ if hubnet-message-tag = \"place-order\"\n        [\n          ask players with [ user-id = hubnet-message-source ]\n            [ place-order ]\n        ]\n      ]\n    ]\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to execute-command [cmd]",
            " 2 |   ask players with [ user-id = hubnet-message-source ]",
            " 3 |   [",
            " 4 |     ;; don't let players keep going once they've reached the",
            " 5 |     ;; end of the simulation",
            " 6 |     if [clock] of my-team <= weeks-of-simulation",
            " 7 |     [",
            " 8 |       ;; catch changes to the slider",
            " 9 |       ifelse hubnet-message-tag = \"orders-to-place\"",
            "10 |       [ set order hubnet-message ]",
            "11 |       ;; lock in the order",
            "12 |       [ if hubnet-message-tag = \"place-order\"",
            "13 |         [",
            "14 |           ask players with [ user-id = hubnet-message-source ]",
            "15 |             [ place-order ]",
            "16 |         ]",
            "17 |       ]",
            "18 |     ]",
            "19 |   ]",
            "20 | end"
          ],
          "pseudoCode": [
            "1 | define a procedure named execute-command that takes a command as input",
            "2 |   for each player whose user-id matches the hubnet-message-source",
            "3 |   [",
            "4 |     ;; don't let players keep going once they've reached the",
            "5 |     ;; end of the simulation",
            "6 |     if the clock of the player's team is less than or equal to the weeks of simulation",
            "7 |     [",
            "8 |       ;; catch changes to the slider",
            "9 |       if the hubnet-message-tag is \"orders-to-place\"",
            "10 |       [ set the player's order to the hubnet-message ]",
            "11 |       ;; lock in the order",
            "12 |       [ if the hubnet-message-tag is \"place-order\"",
            "13 |         [",
            "14 |           for each player whose user-id matches the hubnet-message-source",
            "15 |             [ place the player's order ]",
            "16 |         ]",
            "17 |       ]",
            "18 |     ]",
            "19 |   ]",
            "20 | end the procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to execute-command [cmd]",
              "pseudoCode": "define a procedure named execute-command that takes a command as input"
            },
            {
              "lineNumber": 2,
              "originalCode": "ask players with [ user-id = hubnet-message-source ]",
              "pseudoCode": "for each player whose user-id matches the hubnet-message-source"
            },
            {
              "lineNumber": 3,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 4,
              "originalCode": ";; don't let players keep going once they've reached the",
              "pseudoCode": ";; don't let players keep going once they've reached the"
            },
            {
              "lineNumber": 5,
              "originalCode": ";; end of the simulation",
              "pseudoCode": ";; end of the simulation"
            },
            {
              "lineNumber": 6,
              "originalCode": "if [clock] of my-team <= weeks-of-simulation",
              "pseudoCode": "if the clock of the player's team is less than or equal to the weeks of simulation"
            },
            {
              "lineNumber": 7,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 8,
              "originalCode": ";; catch changes to the slider",
              "pseudoCode": ";; catch changes to the slider"
            },
            {
              "lineNumber": 9,
              "originalCode": "ifelse hubnet-message-tag = \"orders-to-place\"",
              "pseudoCode": "if the hubnet-message-tag is \"orders-to-place\""
            },
            {
              "lineNumber": 10,
              "originalCode": "[ set order hubnet-message ]",
              "pseudoCode": "[ set the player's order to the hubnet-message ]"
            },
            {
              "lineNumber": 11,
              "originalCode": ";; lock in the order",
              "pseudoCode": ";; lock in the order"
            },
            {
              "lineNumber": 12,
              "originalCode": "[ if hubnet-message-tag = \"place-order\"",
              "pseudoCode": "[ if the hubnet-message-tag is \"place-order\""
            },
            {
              "lineNumber": 13,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 14,
              "originalCode": "ask players with [ user-id = hubnet-message-source ]",
              "pseudoCode": "for each player whose user-id matches the hubnet-message-source"
            },
            {
              "lineNumber": 15,
              "originalCode": "[ place-order ]",
              "pseudoCode": "[ place the player's order ]"
            },
            {
              "lineNumber": 16,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 17,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 18,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 19,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 20,
              "originalCode": "end",
              "pseudoCode": "end the procedure"
            }
          ]
        },
        {
          "name": "init-player",
          "documentation": "; send everything",
          "originalCode": "to init-player\n  hubnet-send user-id \"team\" [color-name] of my-team\n  hubnet-send user-id \"role\" role\n  update-player\nend",
          "numberedOriginalCode": [
            "1 | to init-player",
            "2 |   hubnet-send user-id \"team\" [color-name] of my-team",
            "3 |   hubnet-send user-id \"role\" role",
            "4 |   update-player",
            "5 | end"
          ],
          "pseudoCode": [
            "1 | When initializing the player,",
            "2 |   send the user's team color name to the hubnet",
            "3 |   send the user's role to the hubnet",
            "4 |   update the player",
            "5 | End the initialization process"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to init-player",
              "pseudoCode": "When initializing the player,"
            },
            {
              "lineNumber": 2,
              "originalCode": "hubnet-send user-id \"team\" [color-name] of my-team",
              "pseudoCode": "send the user's team color name to the hubnet"
            },
            {
              "lineNumber": 3,
              "originalCode": "hubnet-send user-id \"role\" role",
              "pseudoCode": "send the user's role to the hubnet"
            },
            {
              "lineNumber": 4,
              "originalCode": "update-player",
              "pseudoCode": "update the player"
            },
            {
              "lineNumber": 5,
              "originalCode": "end",
              "pseudoCode": "End the initialization process"
            }
          ]
        },
        {
          "name": "update-player",
          "documentation": "; send the stuff that changes",
          "originalCode": "to update-player\n  if [clock] of my-team <= weeks-of-simulation\n  [\n    hubnet-send user-id \"demand\" [orders-placed] of one-of my-in-demand-links\n    hubnet-send user-id \"inventory\" inventory\n    hubnet-send user-id \"back-orders\" back-orders\n    hubnet-send user-id \"my-cost\" inventory * 0.5 + back-orders\n    hubnet-send user-id \"last-amount-shipped\" sum [ last orders-filled ] of my-out-supply-links\n\n    hubnet-send user-id \"last-amount-received\" round last-received\n    hubnet-send user-id \"week\" round [clock] of my-team\n    hubnet-send user-id \"order-placed?\" order-placed?\n    hubnet-send user-id \"order-placed\" ordered\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to update-player",
            " 2 |   if [clock] of my-team <= weeks-of-simulation",
            " 3 |   [",
            " 4 |     hubnet-send user-id \"demand\" [orders-placed] of one-of my-in-demand-links",
            " 5 |     hubnet-send user-id \"inventory\" inventory",
            " 6 |     hubnet-send user-id \"back-orders\" back-orders",
            " 7 |     hubnet-send user-id \"my-cost\" inventory * 0.5 + back-orders",
            " 8 |     hubnet-send user-id \"last-amount-shipped\" sum [ last orders-filled ] of my-out-supply-links",
            " 9 |",
            "10 |     hubnet-send user-id \"last-amount-received\" round last-received",
            "11 |     hubnet-send user-id \"week\" round [clock] of my-team",
            "12 |     hubnet-send user-id \"order-placed?\" order-placed?",
            "13 |     hubnet-send user-id \"order-placed\" ordered",
            "14 |   ]",
            "15 | end"
          ],
          "pseudoCode": [
            "1 | to update the player",
            "2 |   if the clock of my team is less than or equal to the weeks of simulation",
            "3 |   [",
            "4 |     send the demand of the orders placed of one of my in demand links to the user",
            "5 |     send the inventory to the user",
            "6 |     send the back orders to the user",
            "7 |     send the cost of my inventory to the user",
            "8 |     send the last amount shipped of my out supply links to the user",
            "9 |",
            "10 |     send the last amount received to the user",
            "11 |     send the week of my team to the user",
            "12 |     send whether an order has been placed to the user",
            "13 |     send the order placed to the user",
            "14 |   ]",
            "15 | end"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to update-player",
              "pseudoCode": "to update the player"
            },
            {
              "lineNumber": 2,
              "originalCode": "if [clock] of my-team <= weeks-of-simulation",
              "pseudoCode": "if the clock of my team is less than or equal to the weeks of simulation"
            },
            {
              "lineNumber": 3,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 4,
              "originalCode": "hubnet-send user-id \"demand\" [orders-placed] of one-of my-in-demand-links",
              "pseudoCode": "send the demand of the orders placed of one of my in demand links to the user"
            },
            {
              "lineNumber": 5,
              "originalCode": "hubnet-send user-id \"inventory\" inventory",
              "pseudoCode": "send the inventory to the user"
            },
            {
              "lineNumber": 6,
              "originalCode": "hubnet-send user-id \"back-orders\" back-orders",
              "pseudoCode": "send the back orders to the user"
            },
            {
              "lineNumber": 7,
              "originalCode": "hubnet-send user-id \"my-cost\" inventory * 0.5 + back-orders",
              "pseudoCode": "send the cost of my inventory to the user"
            },
            {
              "lineNumber": 8,
              "originalCode": "hubnet-send user-id \"last-amount-shipped\" sum [ last orders-filled ] of my-out-supply-links",
              "pseudoCode": "send the last amount shipped of my out supply links to the user"
            },
            {
              "lineNumber": 9,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 10,
              "originalCode": "hubnet-send user-id \"last-amount-received\" round last-received",
              "pseudoCode": "send the last amount received to the user"
            },
            {
              "lineNumber": 11,
              "originalCode": "hubnet-send user-id \"week\" round [clock] of my-team",
              "pseudoCode": "send the week of my team to the user"
            },
            {
              "lineNumber": 12,
              "originalCode": "hubnet-send user-id \"order-placed?\" order-placed?",
              "pseudoCode": "send whether an order has been placed to the user"
            },
            {
              "lineNumber": 13,
              "originalCode": "hubnet-send user-id \"order-placed\" ordered",
              "pseudoCode": "send the order placed to the user"
            },
            {
              "lineNumber": 14,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 15,
              "originalCode": "end",
              "pseudoCode": "end"
            }
          ]
        },
        {
          "name": "create-plot-pens",
          "documentation": "; use temporary plot pens for each team\n; so the legend is neat and the plot pen color\n; matches the color of the team",
          "originalCode": "to create-plot-pens\n  create-plot-pen \"Orders to Factory\"\n  create-plot-pen \"Cost\"\n  create-plot-pen \"Orders Shipped\"\nend",
          "numberedOriginalCode": [
            "1 | to create-plot-pens",
            "2 |   create-plot-pen \"Orders to Factory\"",
            "3 |   create-plot-pen \"Cost\"",
            "4 |   create-plot-pen \"Orders Shipped\"",
            "5 | end"
          ],
          "pseudoCode": [
            "1 | When the procedure to create plot pens is called,",
            "2 |   Create a new plot pen for \"Orders to Factory\"",
            "3 |   Create a new plot pen for \"Cost\"",
            "4 |   Create a new plot pen for \"Orders Shipped\"",
            "5 | End the procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to create-plot-pens",
              "pseudoCode": "When the procedure to create plot pens is called,"
            },
            {
              "lineNumber": 2,
              "originalCode": "create-plot-pen \"Orders to Factory\"",
              "pseudoCode": "Create a new plot pen for \"Orders to Factory\""
            },
            {
              "lineNumber": 3,
              "originalCode": "create-plot-pen \"Cost\"",
              "pseudoCode": "Create a new plot pen for \"Cost\""
            },
            {
              "lineNumber": 4,
              "originalCode": "create-plot-pen \"Orders Shipped\"",
              "pseudoCode": "Create a new plot pen for \"Orders Shipped\""
            },
            {
              "lineNumber": 5,
              "originalCode": "end",
              "pseudoCode": "End the procedure"
            }
          ]
        },
        {
          "name": "create-plot-pen",
          "documentation": "",
          "originalCode": "to create-plot-pen [my-plot]\n  set-current-plot my-plot\n  create-temporary-plot-pen color-name\n  set-plot-pen-color color\nend",
          "numberedOriginalCode": [
            "1 | to create-plot-pen [my-plot]",
            "2 |   set-current-plot my-plot",
            "3 |   create-temporary-plot-pen color-name",
            "4 |   set-plot-pen-color color",
            "5 | end"
          ],
          "pseudoCode": [
            "1 | When the procedure to create a plot pen is called with a plot,",
            "2 |   Set the current plot to the given plot.",
            "3 |   Create a temporary plot pen with the color name.",
            "4 |   Set the color of the plot pen.",
            "5 | End the procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to create-plot-pen [my-plot]",
              "pseudoCode": "When the procedure to create a plot pen is called with a plot,"
            },
            {
              "lineNumber": 2,
              "originalCode": "set-current-plot my-plot",
              "pseudoCode": "Set the current plot to the given plot."
            },
            {
              "lineNumber": 3,
              "originalCode": "create-temporary-plot-pen color-name",
              "pseudoCode": "Create a temporary plot pen with the color name."
            },
            {
              "lineNumber": 4,
              "originalCode": "set-plot-pen-color color",
              "pseudoCode": "Set the color of the plot pen."
            },
            {
              "lineNumber": 5,
              "originalCode": "end",
              "pseudoCode": "End the procedure."
            }
          ]
        },
        {
          "name": "plot-orders",
          "documentation": "",
          "originalCode": "to plot-orders\n  set-current-plot \"Orders to Factory\"\n  plot last-received\nend",
          "numberedOriginalCode": [
            "1 | to plot-orders",
            "2 |   set-current-plot \"Orders to Factory\"",
            "3 |   plot last-received",
            "4 | end"
          ],
          "pseudoCode": [
            "1 | when the plot-orders procedure is called",
            "2 |   set the current plot to \"Orders to Factory\"",
            "3 |   plot the last received value",
            "4 | end the procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to plot-orders",
              "pseudoCode": "when the plot-orders procedure is called"
            },
            {
              "lineNumber": 2,
              "originalCode": "set-current-plot \"Orders to Factory\"",
              "pseudoCode": "set the current plot to \"Orders to Factory\""
            },
            {
              "lineNumber": 3,
              "originalCode": "plot last-received",
              "pseudoCode": "plot the last received value"
            },
            {
              "lineNumber": 4,
              "originalCode": "end",
              "pseudoCode": "end the procedure"
            }
          ]
        },
        {
          "name": "plot-cost",
          "documentation": "",
          "originalCode": "to plot-cost\n  set-current-plot \"Cost\"\n  set-current-plot-pen color-name\n  plot cost\nend",
          "numberedOriginalCode": [
            "1 | to plot-cost",
            "2 |   set-current-plot \"Cost\"",
            "3 |   set-current-plot-pen color-name",
            "4 |   plot cost",
            "5 | end"
          ],
          "pseudoCode": [
            "1 | When the plot-cost procedure is called,",
            "2 |   set the current plot to \"Cost\"",
            "3 |   set the current plot pen to the color name",
            "4 |   plot the cost",
            "5 | End the plot-cost procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to plot-cost",
              "pseudoCode": "When the plot-cost procedure is called,"
            },
            {
              "lineNumber": 2,
              "originalCode": "set-current-plot \"Cost\"",
              "pseudoCode": "set the current plot to \"Cost\""
            },
            {
              "lineNumber": 3,
              "originalCode": "set-current-plot-pen color-name",
              "pseudoCode": "set the current plot pen to the color name"
            },
            {
              "lineNumber": 4,
              "originalCode": "plot cost",
              "pseudoCode": "plot the cost"
            },
            {
              "lineNumber": 5,
              "originalCode": "end",
              "pseudoCode": "End the plot-cost procedure"
            }
          ]
        },
        {
          "name": "plot-shipped",
          "documentation": "",
          "originalCode": "to plot-shipped\n  set-current-plot \"Orders Shipped\"\n  set-current-plot-pen color-name\n  plot sum [ last orders-filled ] of my-in-supply-links\nend",
          "numberedOriginalCode": [
            "1 | to plot-shipped",
            "2 |   set-current-plot \"Orders Shipped\"",
            "3 |   set-current-plot-pen color-name",
            "4 |   plot sum [ last orders-filled ] of my-in-supply-links",
            "5 | end"
          ],
          "pseudoCode": [
            "1 | When the plot-shipped procedure is called,",
            "2 |   set the current plot to \"Orders Shipped\"",
            "3 |   set the current plot pen to the color name",
            "4 |   plot the sum of the last orders filled by my in-supply links",
            "5 | End the procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to plot-shipped",
              "pseudoCode": "When the plot-shipped procedure is called,"
            },
            {
              "lineNumber": 2,
              "originalCode": "set-current-plot \"Orders Shipped\"",
              "pseudoCode": "set the current plot to \"Orders Shipped\""
            },
            {
              "lineNumber": 3,
              "originalCode": "set-current-plot-pen color-name",
              "pseudoCode": "set the current plot pen to the color name"
            },
            {
              "lineNumber": 4,
              "originalCode": "plot sum [ last orders-filled ] of my-in-supply-links",
              "pseudoCode": "plot the sum of the last orders filled by my in-supply links"
            },
            {
              "lineNumber": 5,
              "originalCode": "end",
              "pseudoCode": "End the procedure"
            }
          ]
        },
        {
          "name": "reset-plot",
          "documentation": "; clearing the plot also clears the temporary\n; plot pens, so recreate them.",
          "originalCode": "to reset-plot\n  clear-all-plots\n  ask teams [ create-plot-pens ]\nend",
          "numberedOriginalCode": [
            "1 | to reset-plot",
            "2 |   clear-all-plots",
            "3 |   ask teams [ create-plot-pens ]",
            "4 | end"
          ],
          "pseudoCode": [
            "1 | to reset the plot",
            "2 |   clear all plots",
            "3 |   for each team, create plot pens",
            "4 | end"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to reset-plot",
              "pseudoCode": "to reset the plot"
            },
            {
              "lineNumber": 2,
              "originalCode": "clear-all-plots",
              "pseudoCode": "clear all plots"
            },
            {
              "lineNumber": 3,
              "originalCode": "ask teams [ create-plot-pens ]",
              "pseudoCode": "for each team, create plot pens"
            },
            {
              "lineNumber": 4,
              "originalCode": "end",
              "pseudoCode": "end"
            }
          ]
        }
      ]
    },
    {
      "modelId": "HubNet Activities_Sampler HubNet",
      "title": "Sampler HubNet",
      "documentation": "$",
      "sourceLink": "https://ccl.northwestern.edu/netlogo/models/models/HubNet%20Activities/Sampler%20HubNet.nlogo",
      "license": "CC BY-NC-SA 3.0",
      "sourceType": "Models Library",
      "collectedAt": "2025-02-25T23:20:48.872972",
      "procedures": [
        {
          "name": "startup",
          "documentation": "",
          "originalCode": "to startup\n  hubnet-reset\n  setup\nend",
          "numberedOriginalCode": [
            "1 | to startup",
            "2 |   hubnet-reset",
            "3 |   setup",
            "4 | end"
          ],
          "pseudoCode": [
            "1 | to start up",
            "2 |   reset the hubnet",
            "3 |   set up",
            "4 | end"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to startup",
              "pseudoCode": "to start up"
            },
            {
              "lineNumber": 2,
              "originalCode": "hubnet-reset",
              "pseudoCode": "reset the hubnet"
            },
            {
              "lineNumber": 3,
              "originalCode": "setup",
              "pseudoCode": "set up"
            },
            {
              "lineNumber": 4,
              "originalCode": "end",
              "pseudoCode": "end"
            }
          ]
        },
        {
          "name": "setup",
          "documentation": "",
          "originalCode": "to setup\n  ;; don't clear the turtles since they contain\n  ;; the information we need to communicate with the clients\n  clear-all-plots\n\n  ;; return variables to initial state\n  ;; that means clearing information from previous rounds\n  setup-variables\n\n  clear-drawing\n\n  ;; if random-%-green is on choose a random value\n  ;; otherwise, use the %-GREEN\n  let actual-%-green %-green\n\n  if random-%-green?\n  [ set actual-%-green random 101\n    ;; when we're using a random-%-green\n    ;; hide the slider bar so it's not misleading\n    set %-green -10 ]\n\n  ask patches\n  [\n    ;; colors are hidden by default\n    set pcolor white - 2\n    set true-color blue - 2.5\n  ]\n\n  ask n-of (actual-%-green * count patches / 100) patches\n    [ set true-color green - 1 ]\n\n  ;; cluster the colors a bit since we\n  ;; don't always want a uniform distribution\n  apply-abnormality-distribution\n\n  ;; return clients to initial state\n  ask clients [ setup-client ]\nend",
          "numberedOriginalCode": [
            " 1 | to setup",
            " 2 |   ;; don't clear the turtles since they contain",
            " 3 |   ;; the information we need to communicate with the clients",
            " 4 |   clear-all-plots",
            " 5 |",
            " 6 |   ;; return variables to initial state",
            " 7 |   ;; that means clearing information from previous rounds",
            " 8 |   setup-variables",
            " 9 |",
            "10 |   clear-drawing",
            "11 |",
            "12 |   ;; if random-%-green is on choose a random value",
            "13 |   ;; otherwise, use the %-GREEN",
            "14 |   let actual-%-green %-green",
            "15 |",
            "16 |   if random-%-green?",
            "17 |   [ set actual-%-green random 101",
            "18 |     ;; when we're using a random-%-green",
            "19 |     ;; hide the slider bar so it's not misleading",
            "20 |     set %-green -10 ]",
            "21 |",
            "22 |   ask patches",
            "23 |   [",
            "24 |     ;; colors are hidden by default",
            "25 |     set pcolor white - 2",
            "26 |     set true-color blue - 2.5",
            "27 |   ]",
            "28 |",
            "29 |   ask n-of (actual-%-green * count patches / 100) patches",
            "30 |     [ set true-color green - 1 ]",
            "31 |",
            "32 |   ;; cluster the colors a bit since we",
            "33 |   ;; don't always want a uniform distribution",
            "34 |   apply-abnormality-distribution",
            "35 |",
            "36 |   ;; return clients to initial state",
            "37 |   ask clients [ setup-client ]",
            "38 | end"
          ],
          "pseudoCode": [
            "1 | Define a procedure named setup",
            "2 |   ;; Do not clear the turtles as they contain information needed for communication with clients",
            "3 |   ;; Do not clear the turtles as they contain information needed for communication with clients",
            "4 |   Clear all plots",
            "5 |",
            "6 |   ;; Reset variables to their initial state, which means clearing information from previous rounds",
            "7 |   ;; Reset variables to their initial state, which means clearing information from previous rounds",
            "8 |   Setup variables",
            "9 |",
            "10 |   Clear the drawing",
            "11 |",
            "12 |   ;; If random-%-green is enabled, choose a random value; otherwise, use the %-GREEN",
            "13 |   ;; If random-%-green is enabled, choose a random value; otherwise, use the %-GREEN",
            "14 |   Set actual-%-green to %-green",
            "15 |",
            "16 |   If random-%-green is enabled",
            "17 |   [ Set actual-%-green to a random value between 0 and 100",
            "18 |     ;; When using a random-%-green, hide the slider bar to avoid misleading the user",
            "19 |     ;; When using a random-%-green, hide the slider bar to avoid misleading the user",
            "20 |     Set %-green to -10 ]",
            "21 |",
            "22 |   For each patch",
            "23 |   [",
            "24 |     ;; Colors are hidden by default",
            "25 |     Set the patch color to white - 2",
            "26 |     Set the true color to blue - 2.5",
            "27 |   ]",
            "28 |",
            "29 |   For a number of patches equal to (actual-%-green * total number of patches / 100)",
            "30 |     [ Set the true color to green - 1 ]",
            "31 |",
            "32 |   ;; Cluster the colors slightly since we don't always want a uniform distribution",
            "33 |   ;; Cluster the colors slightly since we don't always want a uniform distribution",
            "34 |   Apply the abnormal distribution to the colors",
            "35 |",
            "36 |   ;; Reset clients to their initial state",
            "37 |   For each client, setup the client",
            "38 | End the procedure setup"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to setup",
              "pseudoCode": "Define a procedure named setup"
            },
            {
              "lineNumber": 2,
              "originalCode": ";; don't clear the turtles since they contain",
              "pseudoCode": ";; Do not clear the turtles as they contain information needed for communication with clients"
            },
            {
              "lineNumber": 3,
              "originalCode": ";; the information we need to communicate with the clients",
              "pseudoCode": ";; Do not clear the turtles as they contain information needed for communication with clients"
            },
            {
              "lineNumber": 4,
              "originalCode": "clear-all-plots",
              "pseudoCode": "Clear all plots"
            },
            {
              "lineNumber": 5,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 6,
              "originalCode": ";; return variables to initial state",
              "pseudoCode": ";; Reset variables to their initial state, which means clearing information from previous rounds"
            },
            {
              "lineNumber": 7,
              "originalCode": ";; that means clearing information from previous rounds",
              "pseudoCode": ";; Reset variables to their initial state, which means clearing information from previous rounds"
            },
            {
              "lineNumber": 8,
              "originalCode": "setup-variables",
              "pseudoCode": "Setup variables"
            },
            {
              "lineNumber": 9,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 10,
              "originalCode": "clear-drawing",
              "pseudoCode": "Clear the drawing"
            },
            {
              "lineNumber": 11,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 12,
              "originalCode": ";; if random-%-green is on choose a random value",
              "pseudoCode": ";; If random-%-green is enabled, choose a random value; otherwise, use the %-GREEN"
            },
            {
              "lineNumber": 13,
              "originalCode": ";; otherwise, use the %-GREEN",
              "pseudoCode": ";; If random-%-green is enabled, choose a random value; otherwise, use the %-GREEN"
            },
            {
              "lineNumber": 14,
              "originalCode": "let actual-%-green %-green",
              "pseudoCode": "Set actual-%-green to %-green"
            },
            {
              "lineNumber": 15,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 16,
              "originalCode": "if random-%-green?",
              "pseudoCode": "If random-%-green is enabled"
            },
            {
              "lineNumber": 17,
              "originalCode": "[ set actual-%-green random 101",
              "pseudoCode": "[ Set actual-%-green to a random value between 0 and 100"
            },
            {
              "lineNumber": 18,
              "originalCode": ";; when we're using a random-%-green",
              "pseudoCode": ";; When using a random-%-green, hide the slider bar to avoid misleading the user"
            },
            {
              "lineNumber": 19,
              "originalCode": ";; hide the slider bar so it's not misleading",
              "pseudoCode": ";; When using a random-%-green, hide the slider bar to avoid misleading the user"
            },
            {
              "lineNumber": 20,
              "originalCode": "set %-green -10 ]",
              "pseudoCode": "Set %-green to -10 ]"
            },
            {
              "lineNumber": 21,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 22,
              "originalCode": "ask patches",
              "pseudoCode": "For each patch"
            },
            {
              "lineNumber": 23,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 24,
              "originalCode": ";; colors are hidden by default",
              "pseudoCode": ";; Colors are hidden by default"
            },
            {
              "lineNumber": 25,
              "originalCode": "set pcolor white - 2",
              "pseudoCode": "Set the patch color to white - 2"
            },
            {
              "lineNumber": 26,
              "originalCode": "set true-color blue - 2.5",
              "pseudoCode": "Set the true color to blue - 2.5"
            },
            {
              "lineNumber": 27,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 28,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 29,
              "originalCode": "ask n-of (actual-%-green * count patches / 100) patches",
              "pseudoCode": "For a number of patches equal to (actual-%-green * total number of patches / 100)"
            },
            {
              "lineNumber": 30,
              "originalCode": "[ set true-color green - 1 ]",
              "pseudoCode": "[ Set the true color to green - 1 ]"
            },
            {
              "lineNumber": 31,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 32,
              "originalCode": ";; cluster the colors a bit since we",
              "pseudoCode": ";; Cluster the colors slightly since we don't always want a uniform distribution"
            },
            {
              "lineNumber": 33,
              "originalCode": ";; don't always want a uniform distribution",
              "pseudoCode": ";; Cluster the colors slightly since we don't always want a uniform distribution"
            },
            {
              "lineNumber": 34,
              "originalCode": "apply-abnormality-distribution",
              "pseudoCode": "Apply the abnormal distribution to the colors"
            },
            {
              "lineNumber": 35,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 36,
              "originalCode": ";; return clients to initial state",
              "pseudoCode": ";; Reset clients to their initial state"
            },
            {
              "lineNumber": 37,
              "originalCode": "ask clients [ setup-client ]",
              "pseudoCode": "For each client, setup the client"
            },
            {
              "lineNumber": 38,
              "originalCode": "end",
              "pseudoCode": "End the procedure setup"
            }
          ]
        },
        {
          "name": "setup-variables",
          "documentation": "",
          "originalCode": "to setup-variables\n  set max-$$ 100\n  set guess-averages []\n  set guesses []\nend",
          "numberedOriginalCode": [
            "1 | to setup-variables",
            "2 |   set max-$$ 100",
            "3 |   set guess-averages []",
            "4 |   set guesses []",
            "5 | end"
          ],
          "pseudoCode": [
            "1 | to define the setup-variables procedure",
            "2 |   set the maximum value to 100",
            "3 |   create an empty list for guess averages",
            "4 |   create an empty list for guesses",
            "5 | end the procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to setup-variables",
              "pseudoCode": "to define the setup-variables procedure"
            },
            {
              "lineNumber": 2,
              "originalCode": "set max-$$ 100",
              "pseudoCode": "set the maximum value to 100"
            },
            {
              "lineNumber": 3,
              "originalCode": "set guess-averages []",
              "pseudoCode": "create an empty list for guess averages"
            },
            {
              "lineNumber": 4,
              "originalCode": "set guesses []",
              "pseudoCode": "create an empty list for guesses"
            },
            {
              "lineNumber": 5,
              "originalCode": "end",
              "pseudoCode": "end the procedure"
            }
          ]
        },
        {
          "name": "apply-abnormality-distribution",
          "documentation": "",
          "originalCode": "to apply-abnormality-distribution\n  ask n-of (4 + random 4) patches   ;; choose a slightly variable number of clusters\n  [\n    repeat (20 * abnormality)   ;; the larger the abnormality do more clustering\n    [\n      let p2 one-of patches in-radius 8 with [true-color = blue - 2.5]   ;; find a blue patch near me\n      let p1 one-of patches in-radius 16 with [true-color = green] ;; find a green patch maybe not quite as near me\n      if p1 != nobody and p2 != nobody  ;; if there are some\n      [\n        ;; swap 'em\n        ask p1 [ set true-color blue - 2.5]\n        ask p2 [ set true-color green - 1]\n      ]\n    ]\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to apply-abnormality-distribution",
            " 2 |   ask n-of (4 + random 4) patches   ;; choose a slightly variable number of clusters",
            " 3 |   [",
            " 4 |     repeat (20 * abnormality)   ;; the larger the abnormality do more clustering",
            " 5 |     [",
            " 6 |       let p2 one-of patches in-radius 8 with [true-color = blue - 2.5]   ;; find a blue patch near me",
            " 7 |       let p1 one-of patches in-radius 16 with [true-color = green] ;; find a green patch maybe not quite as near me",
            " 8 |       if p1 != nobody and p2 != nobody  ;; if there are some",
            " 9 |       [",
            "10 |         ;; swap 'em",
            "11 |         ask p1 [ set true-color blue - 2.5]",
            "12 |         ask p2 [ set true-color green - 1]",
            "13 |       ]",
            "14 |     ]",
            "15 |   ]",
            "16 | end"
          ],
          "pseudoCode": [
            "1 | to apply abnormality distribution",
            "2 |   for each of a slightly variable number of patches",
            "3 |   [",
            "4 |     repeat a number of times based on the abnormality",
            "5 |     [",
            "6 |       find a blue patch within a radius of 8",
            "7 |       find a green patch within a radius of 16",
            "8 |       if both patches are found",
            "9 |       [",
            "10 |         ;; swap their colors",
            "11 |         set the color of the first patch to blue - 2.5",
            "12 |         set the color of the second patch to green - 1",
            "13 |       ]",
            "14 |     ]",
            "15 |   ]",
            "16 | end"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to apply-abnormality-distribution",
              "pseudoCode": "to apply abnormality distribution"
            },
            {
              "lineNumber": 2,
              "originalCode": "ask n-of (4 + random 4) patches   ;; choose a slightly variable number of clusters",
              "pseudoCode": "for each of a slightly variable number of patches"
            },
            {
              "lineNumber": 3,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 4,
              "originalCode": "repeat (20 * abnormality)   ;; the larger the abnormality do more clustering",
              "pseudoCode": "repeat a number of times based on the abnormality"
            },
            {
              "lineNumber": 5,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 6,
              "originalCode": "let p2 one-of patches in-radius 8 with [true-color = blue - 2.5]   ;; find a blue patch near me",
              "pseudoCode": "find a blue patch within a radius of 8"
            },
            {
              "lineNumber": 7,
              "originalCode": "let p1 one-of patches in-radius 16 with [true-color = green] ;; find a green patch maybe not quite as near me",
              "pseudoCode": "find a green patch within a radius of 16"
            },
            {
              "lineNumber": 8,
              "originalCode": "if p1 != nobody and p2 != nobody  ;; if there are some",
              "pseudoCode": "if both patches are found"
            },
            {
              "lineNumber": 9,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 10,
              "originalCode": ";; swap 'em",
              "pseudoCode": ";; swap their colors"
            },
            {
              "lineNumber": 11,
              "originalCode": "ask p1 [ set true-color blue - 2.5]",
              "pseudoCode": "set the color of the first patch to blue - 2.5"
            },
            {
              "lineNumber": 12,
              "originalCode": "ask p2 [ set true-color green - 1]",
              "pseudoCode": "set the color of the second patch to green - 1"
            },
            {
              "lineNumber": 13,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 14,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 15,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 16,
              "originalCode": "end",
              "pseudoCode": "end"
            }
          ]
        },
        {
          "name": "go",
          "documentation": "",
          "originalCode": "to go\n  ;; let the teacher sample at any time\n  if mouse-down?\n  [\n    ;; if we're not keeping samples cover up the old one first\n    if not keep-samples?\n    [ ask patches [ set pcolor white - 2 ] ]\n    ;; uncover a new sample at the mouse click\n    ask sample-patches mouse-xcor mouse-ycor sample-size\n    [ set pcolor true-color ]\n  ]\n\n  ;; process messages from the client\n  listen-clients\n\n  every 0.1 [ display ]\nend",
          "numberedOriginalCode": [
            " 1 | to go",
            " 2 |   ;; let the teacher sample at any time",
            " 3 |   if mouse-down?",
            " 4 |   [",
            " 5 |     ;; if we're not keeping samples cover up the old one first",
            " 6 |     if not keep-samples?",
            " 7 |     [ ask patches [ set pcolor white - 2 ] ]",
            " 8 |     ;; uncover a new sample at the mouse click",
            " 9 |     ask sample-patches mouse-xcor mouse-ycor sample-size",
            "10 |     [ set pcolor true-color ]",
            "11 |   ]",
            "12 |",
            "13 |   ;; process messages from the client",
            "14 |   listen-clients",
            "15 |",
            "16 |   every 0.1 [ display ]",
            "17 | end"
          ],
          "pseudoCode": [
            "1 | when the go procedure is called",
            "2 |   ;; let the teacher sample at any time",
            "3 |   if the mouse button is pressed down",
            "4 |   [",
            "5 |     ;; if we're not keeping samples cover up the old one first",
            "6 |     if samples are not being kept",
            "7 |     [ for each patch, set its color to light grey ]",
            "8 |     ;; uncover a new sample at the mouse click",
            "9 |     for the patches in the sample area at the mouse click location, with the given sample size",
            "10 |     [ set the patch color to the true color ]",
            "11 |   ]",
            "12 |",
            "13 |   ;; process messages from the client",
            "14 |   process messages from the clients",
            "15 |",
            "16 |   every 0.1 seconds, update the display",
            "17 | end"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to go",
              "pseudoCode": "when the go procedure is called"
            },
            {
              "lineNumber": 2,
              "originalCode": ";; let the teacher sample at any time",
              "pseudoCode": ";; let the teacher sample at any time"
            },
            {
              "lineNumber": 3,
              "originalCode": "if mouse-down?",
              "pseudoCode": "if the mouse button is pressed down"
            },
            {
              "lineNumber": 4,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 5,
              "originalCode": ";; if we're not keeping samples cover up the old one first",
              "pseudoCode": ";; if we're not keeping samples cover up the old one first"
            },
            {
              "lineNumber": 6,
              "originalCode": "if not keep-samples?",
              "pseudoCode": "if samples are not being kept"
            },
            {
              "lineNumber": 7,
              "originalCode": "[ ask patches [ set pcolor white - 2 ] ]",
              "pseudoCode": "[ for each patch, set its color to light grey ]"
            },
            {
              "lineNumber": 8,
              "originalCode": ";; uncover a new sample at the mouse click",
              "pseudoCode": ";; uncover a new sample at the mouse click"
            },
            {
              "lineNumber": 9,
              "originalCode": "ask sample-patches mouse-xcor mouse-ycor sample-size",
              "pseudoCode": "for the patches in the sample area at the mouse click location, with the given sample size"
            },
            {
              "lineNumber": 10,
              "originalCode": "[ set pcolor true-color ]",
              "pseudoCode": "[ set the patch color to the true color ]"
            },
            {
              "lineNumber": 11,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 12,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 13,
              "originalCode": ";; process messages from the client",
              "pseudoCode": ";; process messages from the client"
            },
            {
              "lineNumber": 14,
              "originalCode": "listen-clients",
              "pseudoCode": "process messages from the clients"
            },
            {
              "lineNumber": 15,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 16,
              "originalCode": "every 0.1 [ display ]",
              "pseudoCode": "every 0.1 seconds, update the display"
            },
            {
              "lineNumber": 17,
              "originalCode": "end",
              "pseudoCode": "end"
            }
          ]
        },
        {
          "name": "show-population",
          "documentation": "",
          "originalCode": "to show-population\n  ifelse organize?\n  [ organize-population ]\n  [ ask patches [ set pcolor true-color ] ]\nend",
          "numberedOriginalCode": [
            "1 | to show-population",
            "2 |   ifelse organize?",
            "3 |   [ organize-population ]",
            "4 |   [ ask patches [ set pcolor true-color ] ]",
            "5 | end"
          ],
          "pseudoCode": [
            "1 | When the show-population procedure is invoked,",
            "2 |   if the organize? variable is true,",
            "3 |     then call the organize-population procedure,",
            "4 |   otherwise,",
            "5 |     for each patch,",
            "6 |       set the patch's color to the true-color."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to show-population",
              "pseudoCode": "When the show-population procedure is invoked,"
            },
            {
              "lineNumber": 2,
              "originalCode": "ifelse organize?",
              "pseudoCode": "if the organize? variable is true,"
            },
            {
              "lineNumber": 3,
              "originalCode": "[ organize-population ]",
              "pseudoCode": "then call the organize-population procedure,"
            },
            {
              "lineNumber": 4,
              "originalCode": "[ ask patches [ set pcolor true-color ] ]",
              "pseudoCode": "otherwise,"
            },
            {
              "lineNumber": 5,
              "originalCode": "end",
              "pseudoCode": "for each patch,"
            }
          ]
        },
        {
          "name": "hide-population",
          "documentation": "",
          "originalCode": "to hide-population\n  ask patches [ set pcolor white - 2 ]\nend",
          "numberedOriginalCode": [
            "1 | to hide-population",
            "2 |   ask patches [ set pcolor white - 2 ]",
            "3 | end"
          ],
          "pseudoCode": [
            "1 | When the hide-population procedure is called,",
            "2 |   For each patch,",
            "3 |     Set the patch color to white minus 2",
            "4 | End the procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to hide-population",
              "pseudoCode": "When the hide-population procedure is called,"
            },
            {
              "lineNumber": 2,
              "originalCode": "ask patches [ set pcolor white - 2 ]",
              "pseudoCode": "For each patch,"
            },
            {
              "lineNumber": 3,
              "originalCode": "end",
              "pseudoCode": "Set the patch color to white minus 2"
            }
          ]
        },
        {
          "name": "organize-population",
          "documentation": "",
          "originalCode": "to organize-population\n  let green-fraction count patches with [true-color = green - 1] / count patches\n  set %-green green-fraction * 100\n  ;; this will always work out to a whole number as there are 100 columns and\n  ;; only whole number percents are allowed.\n  let xcor-of-divider min-pxcor + ( world-width * green-fraction )\n\n  ask patches\n  [\n    ifelse pxcor < xcor-of-divider\n    [ set pcolor green - 1 ]\n    [ set pcolor blue - 2.5 ]\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to organize-population",
            " 2 |   let green-fraction count patches with [true-color = green - 1] / count patches",
            " 3 |   set %-green green-fraction * 100",
            " 4 |   ;; this will always work out to a whole number as there are 100 columns and",
            " 5 |   ;; only whole number percents are allowed.",
            " 6 |   let xcor-of-divider min-pxcor + ( world-width * green-fraction )",
            " 7 |",
            " 8 |   ask patches",
            " 9 |   [",
            "10 |     ifelse pxcor < xcor-of-divider",
            "11 |     [ set pcolor green - 1 ]",
            "12 |     [ set pcolor blue - 2.5 ]",
            "13 |   ]",
            "14 | end"
          ],
          "pseudoCode": [
            "1 | to organize the population",
            "2 |   calculate the fraction of green patches",
            "3 |   set the percentage of green to the fraction of green patches times 100",
            "4 |   ;; this will always work out to a whole number as there are 100 columns and",
            "5 |   ;; only whole number percents are allowed.",
            "6 |   calculate the x-coordinate of the divider",
            "7 |",
            "8 |   for each patch",
            "9 |   [",
            "10 |     if the patch's x-coordinate is less than the x-coordinate of the divider",
            "11 |     [ set the patch color to green - 1 ]",
            "12 |     [ set the patch color to blue - 2.5 ]",
            "13 |   ]",
            "14 | end"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to organize-population",
              "pseudoCode": "to organize the population"
            },
            {
              "lineNumber": 2,
              "originalCode": "let green-fraction count patches with [true-color = green - 1] / count patches",
              "pseudoCode": "calculate the fraction of green patches"
            },
            {
              "lineNumber": 3,
              "originalCode": "set %-green green-fraction * 100",
              "pseudoCode": "set the percentage of green to the fraction of green patches times 100"
            },
            {
              "lineNumber": 4,
              "originalCode": ";; this will always work out to a whole number as there are 100 columns and",
              "pseudoCode": ";; this will always work out to a whole number as there are 100 columns and"
            },
            {
              "lineNumber": 5,
              "originalCode": ";; only whole number percents are allowed.",
              "pseudoCode": ";; only whole number percents are allowed."
            },
            {
              "lineNumber": 6,
              "originalCode": "let xcor-of-divider min-pxcor + ( world-width * green-fraction )",
              "pseudoCode": "calculate the x-coordinate of the divider"
            },
            {
              "lineNumber": 7,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 8,
              "originalCode": "ask patches",
              "pseudoCode": "for each patch"
            },
            {
              "lineNumber": 9,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 10,
              "originalCode": "ifelse pxcor < xcor-of-divider",
              "pseudoCode": "if the patch's x-coordinate is less than the x-coordinate of the divider"
            },
            {
              "lineNumber": 11,
              "originalCode": "[ set pcolor green - 1 ]",
              "pseudoCode": "[ set the patch color to green - 1 ]"
            },
            {
              "lineNumber": 12,
              "originalCode": "[ set pcolor blue - 2.5 ]",
              "pseudoCode": "[ set the patch color to blue - 2.5 ]"
            },
            {
              "lineNumber": 13,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 14,
              "originalCode": "end",
              "pseudoCode": "end"
            }
          ]
        },
        {
          "name": "pool-samples",
          "documentation": "; show the samples made by all the clients",
          "originalCode": "to pool-samples\n  ask clients\n  [\n    ask my-sampled-patches\n    [ set pcolor true-color ]\n  ]\nend",
          "numberedOriginalCode": [
            "1 | to pool-samples",
            "2 |   ask clients",
            "3 |   [",
            "4 |     ask my-sampled-patches",
            "5 |     [ set pcolor true-color ]",
            "6 |   ]",
            "7 | end"
          ],
          "pseudoCode": [
            "1 | When the pool-samples procedure is called,",
            "2 |   For each client,",
            "3 |   [",
            "4 |     For each patch that the client has sampled,",
            "5 |     [ Set the patch color to the true color ]",
            "6 |   ]",
            "7 | End the pool-samples procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to pool-samples",
              "pseudoCode": "When the pool-samples procedure is called,"
            },
            {
              "lineNumber": 2,
              "originalCode": "ask clients",
              "pseudoCode": "For each client,"
            },
            {
              "lineNumber": 3,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 4,
              "originalCode": "ask my-sampled-patches",
              "pseudoCode": "For each patch that the client has sampled,"
            },
            {
              "lineNumber": 5,
              "originalCode": "[ set pcolor true-color ]",
              "pseudoCode": "[ Set the patch color to the true color ]"
            },
            {
              "lineNumber": 6,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 7,
              "originalCode": "end",
              "pseudoCode": "End the pool-samples procedure"
            }
          ]
        },
        {
          "name": "replenish-$$",
          "documentation": "; for the $$ game, give everyone more $$",
          "originalCode": "to replenish-$$\n  ask clients\n  [ set my-$$ max-$$ ]\n  hubnet-broadcast \"$$\" max-$$\nend",
          "numberedOriginalCode": [
            "1 | to replenish-$$",
            "2 |   ask clients",
            "3 |   [ set my-$$ max-$$ ]",
            "4 |   hubnet-broadcast \"$$\" max-$$",
            "5 | end"
          ],
          "pseudoCode": [
            "1 | When replenishing money,",
            "2 |   For each client,",
            "3 |     Set their money to the maximum amount.",
            "4 |   Broadcast the maximum money amount to the hubnet.",
            "5 | End."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to replenish-$$",
              "pseudoCode": "When replenishing money,"
            },
            {
              "lineNumber": 2,
              "originalCode": "ask clients",
              "pseudoCode": "For each client,"
            },
            {
              "lineNumber": 3,
              "originalCode": "[ set my-$$ max-$$ ]",
              "pseudoCode": "Set their money to the maximum amount."
            },
            {
              "lineNumber": 4,
              "originalCode": "hubnet-broadcast \"$$\" max-$$",
              "pseudoCode": "Broadcast the maximum money amount to the hubnet."
            },
            {
              "lineNumber": 5,
              "originalCode": "end",
              "pseudoCode": "End."
            }
          ]
        },
        {
          "name": "update-$$",
          "documentation": "; update the score on clients for the $$ game",
          "originalCode": "to update-$$ [guess-mean]\n  let group-error abs( %-green - guess-mean)\n  ask clients\n  [\n    ;; if a client chose \"go with group\" use that as the error\n    ;; otherwise calculate his/her own error\n    let err ifelse-value my-go-with-group? [group-error][abs( %-green - my-guess )]\n    ;; subtract from the score if outside the margin of error\n    if err > margin-of-error\n    [ set my-$$ my-$$ - ( err - margin-of-error) ]\n    ;; update the client monitor\n    hubnet-send user-id \"$$\" my-$$\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to update-$$ [guess-mean]",
            " 2 |   let group-error abs( %-green - guess-mean)",
            " 3 |   ask clients",
            " 4 |   [",
            " 5 |     ;; if a client chose \"go with group\" use that as the error",
            " 6 |     ;; otherwise calculate his/her own error",
            " 7 |     let err ifelse-value my-go-with-group? [group-error][abs( %-green - my-guess )]",
            " 8 |     ;; subtract from the score if outside the margin of error",
            " 9 |     if err > margin-of-error",
            "10 |     [ set my-$$ my-$$ - ( err - margin-of-error) ]",
            "11 |     ;; update the client monitor",
            "12 |     hubnet-send user-id \"$$\" my-$$",
            "13 |   ]",
            "14 | end"
          ],
          "pseudoCode": [
            "1 | Define a procedure named update-$$ that takes a parameter named guess-mean.",
            "2 |   Calculate the absolute difference between the percentage of green and the guess-mean, and store it in a variable named group-error.",
            "3 |   For each client:",
            "4 |   [",
            "5 |     ;; If a client chose \"go with group\" use that as the error",
            "6 |     ;; otherwise calculate his/her own error",
            "7 |     Calculate the error as either the group-error or the absolute difference between the percentage of green and the client's guess, depending on whether the client chose to go with the group.",
            "8 |     ;; subtract from the score if outside the margin of error",
            "9 |     If the error is greater than the margin of error, then",
            "10 |     [ Subtract the excess error from the client's score ]",
            "11 |     ;; update the client monitor",
            "12 |     Send the client's updated score to the hubnet.",
            "13 |   ]",
            "14 | End the procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to update-$$ [guess-mean]",
              "pseudoCode": "Define a procedure named update-$$ that takes a parameter named guess-mean."
            },
            {
              "lineNumber": 2,
              "originalCode": "let group-error abs( %-green - guess-mean)",
              "pseudoCode": "Calculate the absolute difference between the percentage of green and the guess-mean, and store it in a variable named group-error."
            },
            {
              "lineNumber": 3,
              "originalCode": "ask clients",
              "pseudoCode": "For each client:"
            },
            {
              "lineNumber": 4,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 5,
              "originalCode": ";; if a client chose \"go with group\" use that as the error",
              "pseudoCode": ";; If a client chose \"go with group\" use that as the error"
            },
            {
              "lineNumber": 6,
              "originalCode": ";; otherwise calculate his/her own error",
              "pseudoCode": ";; otherwise calculate his/her own error"
            },
            {
              "lineNumber": 7,
              "originalCode": "let err ifelse-value my-go-with-group? [group-error][abs( %-green - my-guess )]",
              "pseudoCode": "Calculate the error as either the group-error or the absolute difference between the percentage of green and the client's guess, depending on whether the client chose to go with the group."
            },
            {
              "lineNumber": 8,
              "originalCode": ";; subtract from the score if outside the margin of error",
              "pseudoCode": ";; subtract from the score if outside the margin of error"
            },
            {
              "lineNumber": 9,
              "originalCode": "if err > margin-of-error",
              "pseudoCode": "If the error is greater than the margin of error, then"
            },
            {
              "lineNumber": 10,
              "originalCode": "[ set my-$$ my-$$ - ( err - margin-of-error) ]",
              "pseudoCode": "[ Subtract the excess error from the client's score ]"
            },
            {
              "lineNumber": 11,
              "originalCode": ";; update the client monitor",
              "pseudoCode": ";; update the client monitor"
            },
            {
              "lineNumber": 12,
              "originalCode": "hubnet-send user-id \"$$\" my-$$",
              "pseudoCode": "Send the client's updated score to the hubnet."
            },
            {
              "lineNumber": 13,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 14,
              "originalCode": "end",
              "pseudoCode": "End the procedure."
            }
          ]
        },
        {
          "name": "plot-guesses",
          "documentation": "; do all the plotting and bookkeeping needed to end a round\n; get ready for the next one",
          "originalCode": "to plot-guesses\n  let submitted-clients clients with [submitted?]\n  if not any? submitted-clients\n  [ user-message \"No clients have submitted answers.\"\n    stop ]\n  if count submitted-clients < count clients and\n     not user-yes-or-no? \"There are some clients that have not submitted an answer. Do you want to continue?\"\n  [ stop ]\n\n  set-current-plot \"Student Guesses\"\n\n  ;; we're going to redraw the entire plot\n  clear-plot\n\n  set guesses [my-guess] of clients with [submitted?]\n  let guess-mean mean guesses\n\n  set-current-plot-pen \"guesses\"\n  ;; sometimes we want to dump multiple ranks in a single bin\n  set-histogram-num-bars 100 / ranks-per-bin\n  ;; do it!\n  histogram guesses\n\n  ;; draw a vertical line for the mean\n  set-current-plot-pen \"mean-of-guesses\"\n  plot-pen-up\n  plotxy guess-mean plot-y-min\n  plot-pen-down\n  plotxy guess-mean plot-y-max\n\n  ;; update the $$ game stats\n  update-$$ guess-mean\n\n  ;; add the current average to the average history\n  set guess-averages fput guess-mean guess-averages\n\n  ;; plot the average history as lines\n  set-current-plot-pen \"means\"\n  foreach guess-averages [ guess-average ->\n    plot-pen-up\n    plotxy guess-average  0\n    plot-pen-down\n    plotxy guess-average 25\n  ]\n\n  ;; draw a vertical line for the historical mean\n  set-current-plot-pen \"mean-of-means\"\n  plot-pen-up\n  plotxy mean guess-averages 0\n  plot-pen-down\n  plotxy mean guess-averages 25\n\n  ;; return clients to the initial state\n  ask clients [ setup-client ]\nend",
          "numberedOriginalCode": [
            " 1 | to plot-guesses",
            " 2 |   let submitted-clients clients with [submitted?]",
            " 3 |   if not any? submitted-clients",
            " 4 |   [ user-message \"No clients have submitted answers.\"",
            " 5 |     stop ]",
            " 6 |   if count submitted-clients < count clients and",
            " 7 |      not user-yes-or-no? \"There are some clients that have not submitted an answer. Do you want to continue?\"",
            " 8 |   [ stop ]",
            " 9 |",
            "10 |   set-current-plot \"Student Guesses\"",
            "11 |",
            "12 |   ;; we're going to redraw the entire plot",
            "13 |   clear-plot",
            "14 |",
            "15 |   set guesses [my-guess] of clients with [submitted?]",
            "16 |   let guess-mean mean guesses",
            "17 |",
            "18 |   set-current-plot-pen \"guesses\"",
            "19 |   ;; sometimes we want to dump multiple ranks in a single bin",
            "20 |   set-histogram-num-bars 100 / ranks-per-bin",
            "21 |   ;; do it!",
            "22 |   histogram guesses",
            "23 |",
            "24 |   ;; draw a vertical line for the mean",
            "25 |   set-current-plot-pen \"mean-of-guesses\"",
            "26 |   plot-pen-up",
            "27 |   plotxy guess-mean plot-y-min",
            "28 |   plot-pen-down",
            "29 |   plotxy guess-mean plot-y-max",
            "30 |",
            "31 |   ;; update the $$ game stats",
            "32 |   update-$$ guess-mean",
            "33 |",
            "34 |   ;; add the current average to the average history",
            "35 |   set guess-averages fput guess-mean guess-averages",
            "36 |",
            "37 |   ;; plot the average history as lines",
            "38 |   set-current-plot-pen \"means\"",
            "39 |   foreach guess-averages [ guess-average ->",
            "40 |     plot-pen-up",
            "41 |     plotxy guess-average  0",
            "42 |     plot-pen-down",
            "43 |     plotxy guess-average 25",
            "44 |   ]",
            "45 |",
            "46 |   ;; draw a vertical line for the historical mean",
            "47 |   set-current-plot-pen \"mean-of-means\"",
            "48 |   plot-pen-up",
            "49 |   plotxy mean guess-averages 0",
            "50 |   plot-pen-down",
            "51 |   plotxy mean guess-averages 25",
            "52 |",
            "53 |   ;; return clients to the initial state",
            "54 |   ask clients [ setup-client ]",
            "55 | end"
          ],
          "pseudoCode": [
            "1 | to plot the guesses",
            "2 |   let submitted-clients be the clients who have submitted",
            "3 |   if there are no submitted-clients",
            "4 |   [ show a message \"No clients have submitted answers.\"",
            "5 |     stop the process ]",
            "6 |   if the number of submitted-clients is less than the total number of clients and",
            "7 |      the user does not want to continue when asked \"There are some clients that have not submitted an answer. Do you want to continue?\"",
            "8 |   [ stop the process ]",
            "9 |",
            "10 |   set the current plot to \"Student Guesses\"",
            "11 |",
            "12 |   ;; we're going to redraw the entire plot",
            "13 |   clear the plot",
            "14 |",
            "15 |   set guesses to the guesses of the clients who have submitted",
            "16 |   let guess-mean be the mean of the guesses",
            "17 |",
            "18 |   set the current plot pen to \"guesses\"",
            "19 |   ;; sometimes we want to dump multiple ranks in a single bin",
            "20 |   set the number of histogram bars to 100 divided by ranks-per-bin",
            "21 |   ;; do it!",
            "22 |   create a histogram of the guesses",
            "23 |",
            "24 |   ;; draw a vertical line for the mean",
            "25 |   set the current plot pen to \"mean-of-guesses\"",
            "26 |   lift the plot pen",
            "27 |   plot a point at guess-mean and the minimum y value",
            "28 |   lower the plot pen",
            "29 |   plot a point at guess-mean and the maximum y value",
            "30 |",
            "31 |   ;; update the $$ game stats",
            "32 |   update the $$ game stats with the guess-mean",
            "33 |",
            "34 |   ;; add the current average to the average history",
            "35 |   add the guess-mean to the beginning of the guess-averages list",
            "36 |",
            "37 |   ;; plot the average history as lines",
            "38 |   set the current plot pen to \"means\"",
            "39 |   for each guess-average in guess-averages",
            "40 |     lift the plot pen",
            "41 |     plot a point at guess-average and 0",
            "42 |     lower the plot pen",
            "43 |     plot a point at guess-average and 25",
            "44 |   end for",
            "45 |",
            "46 |   ;; draw a vertical line for the historical mean",
            "47 |   set the current plot pen to \"mean-of-means\"",
            "48 |   lift the plot pen",
            "49 |   plot a point at the mean of guess-averages and 0",
            "50 |   lower the plot pen",
            "51 |   plot a point at the mean of guess-averages and 25",
            "52 |",
            "53 |   ;; return clients to the initial state",
            "54 |   ask each client to set up",
            "55 | end"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to plot-guesses",
              "pseudoCode": "to plot the guesses"
            },
            {
              "lineNumber": 2,
              "originalCode": "let submitted-clients clients with [submitted?]",
              "pseudoCode": "let submitted-clients be the clients who have submitted"
            },
            {
              "lineNumber": 3,
              "originalCode": "if not any? submitted-clients",
              "pseudoCode": "if there are no submitted-clients"
            },
            {
              "lineNumber": 4,
              "originalCode": "[ user-message \"No clients have submitted answers.\"",
              "pseudoCode": "[ show a message \"No clients have submitted answers.\""
            },
            {
              "lineNumber": 5,
              "originalCode": "stop ]",
              "pseudoCode": "stop the process ]"
            },
            {
              "lineNumber": 6,
              "originalCode": "if count submitted-clients < count clients and",
              "pseudoCode": "if the number of submitted-clients is less than the total number of clients and"
            },
            {
              "lineNumber": 7,
              "originalCode": "not user-yes-or-no? \"There are some clients that have not submitted an answer. Do you want to continue?\"",
              "pseudoCode": "the user does not want to continue when asked \"There are some clients that have not submitted an answer. Do you want to continue?\""
            },
            {
              "lineNumber": 8,
              "originalCode": "[ stop ]",
              "pseudoCode": "[ stop the process ]"
            },
            {
              "lineNumber": 9,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 10,
              "originalCode": "set-current-plot \"Student Guesses\"",
              "pseudoCode": "set the current plot to \"Student Guesses\""
            },
            {
              "lineNumber": 11,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 12,
              "originalCode": ";; we're going to redraw the entire plot",
              "pseudoCode": ";; we're going to redraw the entire plot"
            },
            {
              "lineNumber": 13,
              "originalCode": "clear-plot",
              "pseudoCode": "clear the plot"
            },
            {
              "lineNumber": 14,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 15,
              "originalCode": "set guesses [my-guess] of clients with [submitted?]",
              "pseudoCode": "set guesses to the guesses of the clients who have submitted"
            },
            {
              "lineNumber": 16,
              "originalCode": "let guess-mean mean guesses",
              "pseudoCode": "let guess-mean be the mean of the guesses"
            },
            {
              "lineNumber": 17,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 18,
              "originalCode": "set-current-plot-pen \"guesses\"",
              "pseudoCode": "set the current plot pen to \"guesses\""
            },
            {
              "lineNumber": 19,
              "originalCode": ";; sometimes we want to dump multiple ranks in a single bin",
              "pseudoCode": ";; sometimes we want to dump multiple ranks in a single bin"
            },
            {
              "lineNumber": 20,
              "originalCode": "set-histogram-num-bars 100 / ranks-per-bin",
              "pseudoCode": "set the number of histogram bars to 100 divided by ranks-per-bin"
            },
            {
              "lineNumber": 21,
              "originalCode": ";; do it!",
              "pseudoCode": ";; do it!"
            },
            {
              "lineNumber": 22,
              "originalCode": "histogram guesses",
              "pseudoCode": "create a histogram of the guesses"
            },
            {
              "lineNumber": 23,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 24,
              "originalCode": ";; draw a vertical line for the mean",
              "pseudoCode": ";; draw a vertical line for the mean"
            },
            {
              "lineNumber": 25,
              "originalCode": "set-current-plot-pen \"mean-of-guesses\"",
              "pseudoCode": "set the current plot pen to \"mean-of-guesses\""
            },
            {
              "lineNumber": 26,
              "originalCode": "plot-pen-up",
              "pseudoCode": "lift the plot pen"
            },
            {
              "lineNumber": 27,
              "originalCode": "plotxy guess-mean plot-y-min",
              "pseudoCode": "plot a point at guess-mean and the minimum y value"
            },
            {
              "lineNumber": 28,
              "originalCode": "plot-pen-down",
              "pseudoCode": "lower the plot pen"
            },
            {
              "lineNumber": 29,
              "originalCode": "plotxy guess-mean plot-y-max",
              "pseudoCode": "plot a point at guess-mean and the maximum y value"
            },
            {
              "lineNumber": 30,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 31,
              "originalCode": ";; update the $$ game stats",
              "pseudoCode": ";; update the $$ game stats"
            },
            {
              "lineNumber": 32,
              "originalCode": "update-$$ guess-mean",
              "pseudoCode": "update the $$ game stats with the guess-mean"
            },
            {
              "lineNumber": 33,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 34,
              "originalCode": ";; add the current average to the average history",
              "pseudoCode": ";; add the current average to the average history"
            },
            {
              "lineNumber": 35,
              "originalCode": "set guess-averages fput guess-mean guess-averages",
              "pseudoCode": "add the guess-mean to the beginning of the guess-averages list"
            },
            {
              "lineNumber": 36,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 37,
              "originalCode": ";; plot the average history as lines",
              "pseudoCode": ";; plot the average history as lines"
            },
            {
              "lineNumber": 38,
              "originalCode": "set-current-plot-pen \"means\"",
              "pseudoCode": "set the current plot pen to \"means\""
            },
            {
              "lineNumber": 39,
              "originalCode": "foreach guess-averages [ guess-average ->",
              "pseudoCode": "for each guess-average in guess-averages"
            },
            {
              "lineNumber": 40,
              "originalCode": "plot-pen-up",
              "pseudoCode": "lift the plot pen"
            },
            {
              "lineNumber": 41,
              "originalCode": "plotxy guess-average  0",
              "pseudoCode": "plot a point at guess-average and 0"
            },
            {
              "lineNumber": 42,
              "originalCode": "plot-pen-down",
              "pseudoCode": "lower the plot pen"
            },
            {
              "lineNumber": 43,
              "originalCode": "plotxy guess-average 25",
              "pseudoCode": "plot a point at guess-average and 25"
            },
            {
              "lineNumber": 44,
              "originalCode": "]",
              "pseudoCode": "end for"
            },
            {
              "lineNumber": 45,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 46,
              "originalCode": ";; draw a vertical line for the historical mean",
              "pseudoCode": ";; draw a vertical line for the historical mean"
            },
            {
              "lineNumber": 47,
              "originalCode": "set-current-plot-pen \"mean-of-means\"",
              "pseudoCode": "set the current plot pen to \"mean-of-means\""
            },
            {
              "lineNumber": 48,
              "originalCode": "plot-pen-up",
              "pseudoCode": "lift the plot pen"
            },
            {
              "lineNumber": 49,
              "originalCode": "plotxy mean guess-averages 0",
              "pseudoCode": "plot a point at the mean of guess-averages and 0"
            },
            {
              "lineNumber": 50,
              "originalCode": "plot-pen-down",
              "pseudoCode": "lower the plot pen"
            },
            {
              "lineNumber": 51,
              "originalCode": "plotxy mean guess-averages 25",
              "pseudoCode": "plot a point at the mean of guess-averages and 25"
            },
            {
              "lineNumber": 52,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 53,
              "originalCode": ";; return clients to the initial state",
              "pseudoCode": ";; return clients to the initial state"
            },
            {
              "lineNumber": 54,
              "originalCode": "ask clients [ setup-client ]",
              "pseudoCode": "ask each client to set up"
            },
            {
              "lineNumber": 55,
              "originalCode": "end",
              "pseudoCode": "end"
            }
          ]
        },
        {
          "name": "listen-clients",
          "documentation": "",
          "originalCode": "to listen-clients\n  while [ hubnet-message-waiting? ]\n  [\n    hubnet-fetch-message\n    ifelse hubnet-enter-message?\n    [ create-client ]\n    [\n      ifelse hubnet-exit-message?\n      [ remove-client ]\n      [ ask clients with [user-id = hubnet-message-source] [ execute-command hubnet-message-tag ] ]\n    ]\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to listen-clients",
            " 2 |   while [ hubnet-message-waiting? ]",
            " 3 |   [",
            " 4 |     hubnet-fetch-message",
            " 5 |     ifelse hubnet-enter-message?",
            " 6 |     [ create-client ]",
            " 7 |     [",
            " 8 |       ifelse hubnet-exit-message?",
            " 9 |       [ remove-client ]",
            "10 |       [ ask clients with [user-id = hubnet-message-source] [ execute-command hubnet-message-tag ] ]",
            "11 |     ]",
            "12 |   ]",
            "13 | end"
          ],
          "pseudoCode": [
            "1 | When listening to clients,",
            "2 |   while there is a message waiting,",
            "3 |   [",
            "4 |     fetch the message,",
            "5 |     if the message is an enter message,",
            "6 |     [ create a client ]",
            "7 |     [",
            "8 |       if the message is an exit message,",
            "9 |       [ remove the client ]",
            "10 |       [ ask the client with the same user-id as the message source to execute the command in the message tag ]",
            "11 |     ]",
            "12 |   ]",
            "13 | end"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to listen-clients",
              "pseudoCode": "When listening to clients,"
            },
            {
              "lineNumber": 2,
              "originalCode": "while [ hubnet-message-waiting? ]",
              "pseudoCode": "while there is a message waiting,"
            },
            {
              "lineNumber": 3,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 4,
              "originalCode": "hubnet-fetch-message",
              "pseudoCode": "fetch the message,"
            },
            {
              "lineNumber": 5,
              "originalCode": "ifelse hubnet-enter-message?",
              "pseudoCode": "if the message is an enter message,"
            },
            {
              "lineNumber": 6,
              "originalCode": "[ create-client ]",
              "pseudoCode": "[ create a client ]"
            },
            {
              "lineNumber": 7,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 8,
              "originalCode": "ifelse hubnet-exit-message?",
              "pseudoCode": "if the message is an exit message,"
            },
            {
              "lineNumber": 9,
              "originalCode": "[ remove-client ]",
              "pseudoCode": "[ remove the client ]"
            },
            {
              "lineNumber": 10,
              "originalCode": "[ ask clients with [user-id = hubnet-message-source] [ execute-command hubnet-message-tag ] ]",
              "pseudoCode": "[ ask the client with the same user-id as the message source to execute the command in the message tag ]"
            },
            {
              "lineNumber": 11,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 12,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 13,
              "originalCode": "end",
              "pseudoCode": "end"
            }
          ]
        },
        {
          "name": "create-client",
          "documentation": "",
          "originalCode": "to create-client\n  create-clients 1\n  [\n    ;; client turtles do not appear in the view\n    ;; they are only used to save state from the clients\n    hide-turtle\n    set user-id hubnet-message-source\n    setup-client\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to create-client",
            " 2 |   create-clients 1",
            " 3 |   [",
            " 4 |     ;; client turtles do not appear in the view",
            " 5 |     ;; they are only used to save state from the clients",
            " 6 |     hide-turtle",
            " 7 |     set user-id hubnet-message-source",
            " 8 |     setup-client",
            " 9 |   ]",
            "10 | end"
          ],
          "pseudoCode": [
            "1 | Define a procedure named create-client",
            "2 |   Create one client",
            "3 |   [",
            "4 |     ;; Client turtles do not appear in the view",
            "5 |     ;; They are only used to save state from the clients",
            "6 |     Hide the turtle",
            "7 |     Set the user-id to the hubnet message source",
            "8 |     Setup the client",
            "9 |   ]",
            "10 | End the procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to create-client",
              "pseudoCode": "Define a procedure named create-client"
            },
            {
              "lineNumber": 2,
              "originalCode": "create-clients 1",
              "pseudoCode": "Create one client"
            },
            {
              "lineNumber": 3,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 4,
              "originalCode": ";; client turtles do not appear in the view",
              "pseudoCode": ";; Client turtles do not appear in the view"
            },
            {
              "lineNumber": 5,
              "originalCode": ";; they are only used to save state from the clients",
              "pseudoCode": ";; They are only used to save state from the clients"
            },
            {
              "lineNumber": 6,
              "originalCode": "hide-turtle",
              "pseudoCode": "Hide the turtle"
            },
            {
              "lineNumber": 7,
              "originalCode": "set user-id hubnet-message-source",
              "pseudoCode": "Set the user-id to the hubnet message source"
            },
            {
              "lineNumber": 8,
              "originalCode": "setup-client",
              "pseudoCode": "Setup the client"
            },
            {
              "lineNumber": 9,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 10,
              "originalCode": "end",
              "pseudoCode": "End the procedure"
            }
          ]
        },
        {
          "name": "setup-client",
          "documentation": "; set client variables to initial values\n; and update their monitors",
          "originalCode": "to setup-client\n  set my-sample-size sample-size\n  set my-sampling-allowance sampling-allowance\n  set my-guess 50\n  set my-sampled-patches no-patches\n  set my-go-with-group? false\n  set my-$$ max-$$\n  set submitted? false\n  hubnet-send user-id \"Sampling Allowance\" my-sampling-allowance\n  hubnet-send user-id \"$$\" my-$$\n  hubnet-send user-id \"%-green\" my-guess\n  hubnet-send user-id \"submitted?\" submitted?\n  hubnet-clear-overrides user-id\nend",
          "numberedOriginalCode": [
            " 1 | to setup-client",
            " 2 |   set my-sample-size sample-size",
            " 3 |   set my-sampling-allowance sampling-allowance",
            " 4 |   set my-guess 50",
            " 5 |   set my-sampled-patches no-patches",
            " 6 |   set my-go-with-group? false",
            " 7 |   set my-$$ max-$$",
            " 8 |   set submitted? false",
            " 9 |   hubnet-send user-id \"Sampling Allowance\" my-sampling-allowance",
            "10 |   hubnet-send user-id \"$$\" my-$$",
            "11 |   hubnet-send user-id \"%-green\" my-guess",
            "12 |   hubnet-send user-id \"submitted?\" submitted?",
            "13 |   hubnet-clear-overrides user-id",
            "14 | end"
          ],
          "pseudoCode": [
            "1 | Define a procedure named setup-client",
            "2 |   Set the variable my-sample-size to the value of sample-size",
            "3 |   Set the variable my-sampling-allowance to the value of sampling-allowance",
            "4 |   Set the variable my-guess to 50",
            "5 |   Set the variable my-sampled-patches to an empty list of patches",
            "6 |   Set the variable my-go-with-group? to false",
            "7 |   Set the variable my-$$ to the value of max-$$",
            "8 |   Set the variable submitted? to false",
            "9 |   Send the value of my-sampling-allowance to the hubnet with the label \"Sampling Allowance\"",
            "10 |   Send the value of my-$$ to the hubnet with the label \"$$\"",
            "11 |   Send the value of my-guess to the hubnet with the label \"%-green\"",
            "12 |   Send the value of submitted? to the hubnet with the label \"submitted?\"",
            "13 |   Clear any overrides for the user-id in the hubnet",
            "14 | End the procedure setup-client"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to setup-client",
              "pseudoCode": "Define a procedure named setup-client"
            },
            {
              "lineNumber": 2,
              "originalCode": "set my-sample-size sample-size",
              "pseudoCode": "Set the variable my-sample-size to the value of sample-size"
            },
            {
              "lineNumber": 3,
              "originalCode": "set my-sampling-allowance sampling-allowance",
              "pseudoCode": "Set the variable my-sampling-allowance to the value of sampling-allowance"
            },
            {
              "lineNumber": 4,
              "originalCode": "set my-guess 50",
              "pseudoCode": "Set the variable my-guess to 50"
            },
            {
              "lineNumber": 5,
              "originalCode": "set my-sampled-patches no-patches",
              "pseudoCode": "Set the variable my-sampled-patches to an empty list of patches"
            },
            {
              "lineNumber": 6,
              "originalCode": "set my-go-with-group? false",
              "pseudoCode": "Set the variable my-go-with-group? to false"
            },
            {
              "lineNumber": 7,
              "originalCode": "set my-$$ max-$$",
              "pseudoCode": "Set the variable my-$$ to the value of max-$$"
            },
            {
              "lineNumber": 8,
              "originalCode": "set submitted? false",
              "pseudoCode": "Set the variable submitted? to false"
            },
            {
              "lineNumber": 9,
              "originalCode": "hubnet-send user-id \"Sampling Allowance\" my-sampling-allowance",
              "pseudoCode": "Send the value of my-sampling-allowance to the hubnet with the label \"Sampling Allowance\""
            },
            {
              "lineNumber": 10,
              "originalCode": "hubnet-send user-id \"$$\" my-$$",
              "pseudoCode": "Send the value of my-$$ to the hubnet with the label \"$$\""
            },
            {
              "lineNumber": 11,
              "originalCode": "hubnet-send user-id \"%-green\" my-guess",
              "pseudoCode": "Send the value of my-guess to the hubnet with the label \"%-green\""
            },
            {
              "lineNumber": 12,
              "originalCode": "hubnet-send user-id \"submitted?\" submitted?",
              "pseudoCode": "Send the value of submitted? to the hubnet with the label \"submitted?\""
            },
            {
              "lineNumber": 13,
              "originalCode": "hubnet-clear-overrides user-id",
              "pseudoCode": "Clear any overrides for the user-id in the hubnet"
            },
            {
              "lineNumber": 14,
              "originalCode": "end",
              "pseudoCode": "End the procedure setup-client"
            }
          ]
        },
        {
          "name": "remove-client",
          "documentation": "",
          "originalCode": "to remove-client\n ask clients with [user-id = hubnet-message-source]\n   [ die ]\nend",
          "numberedOriginalCode": [
            "1 | to remove-client",
            "2 |  ask clients with [user-id = hubnet-message-source]",
            "3 |    [ die ]",
            "4 | end"
          ],
          "pseudoCode": [
            "1 | When the procedure to remove a client is called,",
            "2 |   For each client whose user ID matches the source of the hubnet message,",
            "3 |     The client should be removed from the simulation.",
            "4 | End of the procedure to remove a client."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to remove-client",
              "pseudoCode": "When the procedure to remove a client is called,"
            },
            {
              "lineNumber": 2,
              "originalCode": "ask clients with [user-id = hubnet-message-source]",
              "pseudoCode": "For each client whose user ID matches the source of the hubnet message,"
            },
            {
              "lineNumber": 3,
              "originalCode": "[ die ]",
              "pseudoCode": "The client should be removed from the simulation."
            },
            {
              "lineNumber": 4,
              "originalCode": "end",
              "pseudoCode": "End of the procedure to remove a client."
            }
          ]
        },
        {
          "name": "execute-command",
          "documentation": "; client procedure",
          "originalCode": "to execute-command [cmd] ;; client procedure\n  if cmd = \"View\" and student-sampling?\n  [\n    let x item 0 hubnet-message\n    let y item 1 hubnet-message\n    ;; get the sample for the mouse click the sample size is determined either\n    ;; by my-sample-size on the client or the sample-size on the server\n    let sample sample-patches x y ifelse-value student-sample-size? [my-sample-size][sample-size]\n    ;; if I have enough sampling allowance left show me the patches\n    if my-sampling-allowance > count sample\n    [\n      ;; if we're not keeping samples clear the\n      ;; overrides first\n      if not keep-samples?\n      [\n        hubnet-clear-overrides user-id\n        set my-sampled-patches no-patches\n      ]\n      ;; send the override\n      hubnet-send-override user-id sample \"pcolor\" [true-color]\n      ;; keep track of the patches I am viewing\n      set my-sampled-patches (patch-set my-sampled-patches sample)\n      ;; update the sample allowance\n      set my-sampling-allowance my-sampling-allowance - count sample\n      ;; update the corresponding monitor\n      hubnet-send user-id \"Sampling Allowance\" my-sampling-allowance\n    ]\n    stop\n  ]\n  ;; update the state related to interface changes on the client\n  if cmd = \"my-sample-size\"\n  [ set my-sample-size hubnet-message stop ]\n  if cmd = \"%-green\"\n  [ set my-guess hubnet-message stop ]\n  if cmd = \"go with group\"\n  [ set my-go-with-group? true stop ]\n  if cmd = \"submit-answer\"\n  [ set submitted? true\n    hubnet-send user-id \"submitted?\" submitted?\n    stop ]\nend",
          "numberedOriginalCode": [
            " 1 | to execute-command [cmd] ;; client procedure",
            " 2 |   if cmd = \"View\" and student-sampling?",
            " 3 |   [",
            " 4 |     let x item 0 hubnet-message",
            " 5 |     let y item 1 hubnet-message",
            " 6 |     ;; get the sample for the mouse click the sample size is determined either",
            " 7 |     ;; by my-sample-size on the client or the sample-size on the server",
            " 8 |     let sample sample-patches x y ifelse-value student-sample-size? [my-sample-size][sample-size]",
            " 9 |     ;; if I have enough sampling allowance left show me the patches",
            "10 |     if my-sampling-allowance > count sample",
            "11 |     [",
            "12 |       ;; if we're not keeping samples clear the",
            "13 |       ;; overrides first",
            "14 |       if not keep-samples?",
            "15 |       [",
            "16 |         hubnet-clear-overrides user-id",
            "17 |         set my-sampled-patches no-patches",
            "18 |       ]",
            "19 |       ;; send the override",
            "20 |       hubnet-send-override user-id sample \"pcolor\" [true-color]",
            "21 |       ;; keep track of the patches I am viewing",
            "22 |       set my-sampled-patches (patch-set my-sampled-patches sample)",
            "23 |       ;; update the sample allowance",
            "24 |       set my-sampling-allowance my-sampling-allowance - count sample",
            "25 |       ;; update the corresponding monitor",
            "26 |       hubnet-send user-id \"Sampling Allowance\" my-sampling-allowance",
            "27 |     ]",
            "28 |     stop",
            "29 |   ]",
            "30 |   ;; update the state related to interface changes on the client",
            "31 |   if cmd = \"my-sample-size\"",
            "32 |   [ set my-sample-size hubnet-message stop ]",
            "33 |   if cmd = \"%-green\"",
            "34 |   [ set my-guess hubnet-message stop ]",
            "35 |   if cmd = \"go with group\"",
            "36 |   [ set my-go-with-group? true stop ]",
            "37 |   if cmd = \"submit-answer\"",
            "38 |   [ set submitted? true",
            "39 |     hubnet-send user-id \"submitted?\" submitted?",
            "40 |     stop ]",
            "41 | end"
          ],
          "pseudoCode": [
            "1 | define a procedure named execute-command that takes a command as input",
            "2 |   if the command is \"View\" and student sampling is enabled",
            "3 |   [",
            "4 |     get the first item from the hubnet message",
            "5 |     get the second item from the hubnet message",
            "6 |     ;; get the sample for the mouse click the sample size is determined either",
            "7 |     ;; by my-sample-size on the client or the sample-size on the server",
            "8 |     get the sample patches at the coordinates x and y with the sample size determined by my-sample-size if student-sample-size is true, otherwise use sample-size",
            "9 |     ;; if I have enough sampling allowance left show me the patches",
            "10 |     if my sampling allowance is greater than the count of the sample",
            "11 |     [",
            "12 |       ;; if we're not keeping samples clear the",
            "13 |       ;; overrides first",
            "14 |       if not keeping samples",
            "15 |       [",
            "16 |         clear the hubnet overrides for the user",
            "17 |         set my sampled patches to no patches",
            "18 |       ]",
            "19 |       ;; send the override",
            "20 |       send the hubnet override for the user with the sample and the color true-color",
            "21 |       ;; keep track of the patches I am viewing",
            "22 |       add the sample patches to my sampled patches",
            "23 |       ;; update the sample allowance",
            "24 |       decrease my sampling allowance by the count of the sample",
            "25 |       ;; update the corresponding monitor",
            "26 |       send the hubnet message to the user with the sampling allowance",
            "27 |     ]",
            "28 |     stop the procedure",
            "29 |   ]",
            "30 |   ;; update the state related to interface changes on the client",
            "31 |   if the command is \"my-sample-size\"",
            "32 |   [ set my sample size to the hubnet message and stop the procedure ]",
            "33 |   if the command is \"%-green\"",
            "34 |   [ set my guess to the hubnet message and stop the procedure ]",
            "35 |   if the command is \"go with group\"",
            "36 |   [ set my go with group to true and stop the procedure ]",
            "37 |   if the command is \"submit-answer\"",
            "38 |   [ set submitted to true",
            "39 |     send the hubnet message to the user with the submitted status",
            "40 |     stop the procedure ]",
            "41 | end the procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to execute-command [cmd] ;; client procedure",
              "pseudoCode": "define a procedure named execute-command that takes a command as input"
            },
            {
              "lineNumber": 2,
              "originalCode": "if cmd = \"View\" and student-sampling?",
              "pseudoCode": "if the command is \"View\" and student sampling is enabled"
            },
            {
              "lineNumber": 3,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 4,
              "originalCode": "let x item 0 hubnet-message",
              "pseudoCode": "get the first item from the hubnet message"
            },
            {
              "lineNumber": 5,
              "originalCode": "let y item 1 hubnet-message",
              "pseudoCode": "get the second item from the hubnet message"
            },
            {
              "lineNumber": 6,
              "originalCode": ";; get the sample for the mouse click the sample size is determined either",
              "pseudoCode": ";; get the sample for the mouse click the sample size is determined either"
            },
            {
              "lineNumber": 7,
              "originalCode": ";; by my-sample-size on the client or the sample-size on the server",
              "pseudoCode": ";; by my-sample-size on the client or the sample-size on the server"
            },
            {
              "lineNumber": 8,
              "originalCode": "let sample sample-patches x y ifelse-value student-sample-size? [my-sample-size][sample-size]",
              "pseudoCode": "get the sample patches at the coordinates x and y with the sample size determined by my-sample-size if student-sample-size is true, otherwise use sample-size"
            },
            {
              "lineNumber": 9,
              "originalCode": ";; if I have enough sampling allowance left show me the patches",
              "pseudoCode": ";; if I have enough sampling allowance left show me the patches"
            },
            {
              "lineNumber": 10,
              "originalCode": "if my-sampling-allowance > count sample",
              "pseudoCode": "if my sampling allowance is greater than the count of the sample"
            },
            {
              "lineNumber": 11,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 12,
              "originalCode": ";; if we're not keeping samples clear the",
              "pseudoCode": ";; if we're not keeping samples clear the"
            },
            {
              "lineNumber": 13,
              "originalCode": ";; overrides first",
              "pseudoCode": ";; overrides first"
            },
            {
              "lineNumber": 14,
              "originalCode": "if not keep-samples?",
              "pseudoCode": "if not keeping samples"
            },
            {
              "lineNumber": 15,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 16,
              "originalCode": "hubnet-clear-overrides user-id",
              "pseudoCode": "clear the hubnet overrides for the user"
            },
            {
              "lineNumber": 17,
              "originalCode": "set my-sampled-patches no-patches",
              "pseudoCode": "set my sampled patches to no patches"
            },
            {
              "lineNumber": 18,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 19,
              "originalCode": ";; send the override",
              "pseudoCode": ";; send the override"
            },
            {
              "lineNumber": 20,
              "originalCode": "hubnet-send-override user-id sample \"pcolor\" [true-color]",
              "pseudoCode": "send the hubnet override for the user with the sample and the color true-color"
            },
            {
              "lineNumber": 21,
              "originalCode": ";; keep track of the patches I am viewing",
              "pseudoCode": ";; keep track of the patches I am viewing"
            },
            {
              "lineNumber": 22,
              "originalCode": "set my-sampled-patches (patch-set my-sampled-patches sample)",
              "pseudoCode": "add the sample patches to my sampled patches"
            },
            {
              "lineNumber": 23,
              "originalCode": ";; update the sample allowance",
              "pseudoCode": ";; update the sample allowance"
            },
            {
              "lineNumber": 24,
              "originalCode": "set my-sampling-allowance my-sampling-allowance - count sample",
              "pseudoCode": "decrease my sampling allowance by the count of the sample"
            },
            {
              "lineNumber": 25,
              "originalCode": ";; update the corresponding monitor",
              "pseudoCode": ";; update the corresponding monitor"
            },
            {
              "lineNumber": 26,
              "originalCode": "hubnet-send user-id \"Sampling Allowance\" my-sampling-allowance",
              "pseudoCode": "send the hubnet message to the user with the sampling allowance"
            },
            {
              "lineNumber": 27,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 28,
              "originalCode": "stop",
              "pseudoCode": "stop the procedure"
            },
            {
              "lineNumber": 29,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 30,
              "originalCode": ";; update the state related to interface changes on the client",
              "pseudoCode": ";; update the state related to interface changes on the client"
            },
            {
              "lineNumber": 31,
              "originalCode": "if cmd = \"my-sample-size\"",
              "pseudoCode": "if the command is \"my-sample-size\""
            },
            {
              "lineNumber": 32,
              "originalCode": "[ set my-sample-size hubnet-message stop ]",
              "pseudoCode": "[ set my sample size to the hubnet message and stop the procedure ]"
            },
            {
              "lineNumber": 33,
              "originalCode": "if cmd = \"%-green\"",
              "pseudoCode": "if the command is \"%-green\""
            },
            {
              "lineNumber": 34,
              "originalCode": "[ set my-guess hubnet-message stop ]",
              "pseudoCode": "[ set my guess to the hubnet message and stop the procedure ]"
            },
            {
              "lineNumber": 35,
              "originalCode": "if cmd = \"go with group\"",
              "pseudoCode": "if the command is \"go with group\""
            },
            {
              "lineNumber": 36,
              "originalCode": "[ set my-go-with-group? true stop ]",
              "pseudoCode": "[ set my go with group to true and stop the procedure ]"
            },
            {
              "lineNumber": 37,
              "originalCode": "if cmd = \"submit-answer\"",
              "pseudoCode": "if the command is \"submit-answer\""
            },
            {
              "lineNumber": 38,
              "originalCode": "[ set submitted? true",
              "pseudoCode": "[ set submitted to true"
            },
            {
              "lineNumber": 39,
              "originalCode": "hubnet-send user-id \"submitted?\" submitted?",
              "pseudoCode": "send the hubnet message to the user with the submitted status"
            },
            {
              "lineNumber": 40,
              "originalCode": "stop ]",
              "pseudoCode": "stop the procedure ]"
            },
            {
              "lineNumber": 41,
              "originalCode": "end",
              "pseudoCode": "end the procedure"
            }
          ]
        },
        {
          "name": "replenish-sampling-allowance",
          "documentation": "; give the clients their allowance",
          "originalCode": "to replenish-sampling-allowance\n  ask clients\n  [\n    set my-sampling-allowance sampling-allowance\n    hubnet-send user-id \"Sampling Allowance\" my-sampling-allowance\n  ]\nend",
          "numberedOriginalCode": [
            "1 | to replenish-sampling-allowance",
            "2 |   ask clients",
            "3 |   [",
            "4 |     set my-sampling-allowance sampling-allowance",
            "5 |     hubnet-send user-id \"Sampling Allowance\" my-sampling-allowance",
            "6 |   ]",
            "7 | end"
          ],
          "pseudoCode": [
            "1 | When the replenish-sampling-allowance procedure is called,",
            "2 |   For each client,",
            "3 |   [",
            "4 |     Set their sampling allowance to the global sampling allowance.",
            "5 |     Send the client's user ID and their new sampling allowance to the HubNet.",
            "6 |   ]",
            "7 | End the procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to replenish-sampling-allowance",
              "pseudoCode": "When the replenish-sampling-allowance procedure is called,"
            },
            {
              "lineNumber": 2,
              "originalCode": "ask clients",
              "pseudoCode": "For each client,"
            },
            {
              "lineNumber": 3,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 4,
              "originalCode": "set my-sampling-allowance sampling-allowance",
              "pseudoCode": "Set their sampling allowance to the global sampling allowance."
            },
            {
              "lineNumber": 5,
              "originalCode": "hubnet-send user-id \"Sampling Allowance\" my-sampling-allowance",
              "pseudoCode": "Send the client's user ID and their new sampling allowance to the HubNet."
            },
            {
              "lineNumber": 6,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 7,
              "originalCode": "end",
              "pseudoCode": "End the procedure."
            }
          ]
        },
        {
          "name": "sample-patches",
          "documentation": "; get the patch agentset of the sample\n; this is moore neighborhood with radius\n; sample-size of the clicked patch",
          "originalCode": "to-report sample-patches [x y width]\n  let radius ( width - 1 ) / 2\n  report [patches at-points n-values (width ^ 2)\n          [ n -> list (n mod width - radius)\n           (floor (n / width) - radius)]] of patch x y\nend",
          "numberedOriginalCode": [
            "1 | to-report sample-patches [x y width]",
            "2 |   let radius ( width - 1 ) / 2",
            "3 |   report [patches at-points n-values (width ^ 2)",
            "4 |           [ n -> list (n mod width - radius)",
            "5 |            (floor (n / width) - radius)]] of patch x y",
            "6 | end"
          ],
          "pseudoCode": [
            "1 | To report a sample of patches given x, y, and width:",
            "2 |   Calculate the radius as (width - 1) divided by 2.",
            "3 |   Report the patches at points generated by the following process:",
            "4 |     For each number from 0 to (width squared - 1), calculate the point:",
            "5 |       The x-coordinate is (current number modulo width) minus radius.",
            "6 |       The y-coordinate is (current number divided by width) minus radius.",
            "7 |   These points are relative to the patch at coordinates x, y."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to-report sample-patches [x y width]",
              "pseudoCode": "To report a sample of patches given x, y, and width:"
            },
            {
              "lineNumber": 2,
              "originalCode": "let radius ( width - 1 ) / 2",
              "pseudoCode": "Calculate the radius as (width - 1) divided by 2."
            },
            {
              "lineNumber": 3,
              "originalCode": "report [patches at-points n-values (width ^ 2)",
              "pseudoCode": "Report the patches at points generated by the following process:"
            },
            {
              "lineNumber": 4,
              "originalCode": "[ n -> list (n mod width - radius)",
              "pseudoCode": "For each number from 0 to (width squared - 1), calculate the point:"
            },
            {
              "lineNumber": 5,
              "originalCode": "(floor (n / width) - radius)]] of patch x y",
              "pseudoCode": "The x-coordinate is (current number modulo width) minus radius."
            },
            {
              "lineNumber": 6,
              "originalCode": "end",
              "pseudoCode": "The y-coordinate is (current number divided by width) minus radius."
            }
          ]
        }
      ]
    },
    {
      "modelId": "HubNet Activities_Polling HubNet",
      "title": "Polling HubNet",
      "documentation": "$",
      "sourceLink": "https://ccl.northwestern.edu/netlogo/models/models/HubNet%20Activities/Polling%20HubNet.nlogo",
      "license": "CC BY-NC-SA 3.0",
      "sourceType": "Models Library",
      "collectedAt": "2025-02-25T23:21:20.823499",
      "procedures": [
        {
          "name": "startup",
          "documentation": "",
          "originalCode": "to startup\n  hubnet-reset\n  setup\nend",
          "numberedOriginalCode": [
            "1 | to startup",
            "2 |   hubnet-reset",
            "3 |   setup",
            "4 | end"
          ],
          "pseudoCode": [
            "1 | Define a procedure named startup",
            "2 |   Reset the hubnet",
            "3 |   Call the setup procedure",
            "4 | End the startup procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to startup",
              "pseudoCode": "Define a procedure named startup"
            },
            {
              "lineNumber": 2,
              "originalCode": "hubnet-reset",
              "pseudoCode": "Reset the hubnet"
            },
            {
              "lineNumber": 3,
              "originalCode": "setup",
              "pseudoCode": "Call the setup procedure"
            },
            {
              "lineNumber": 4,
              "originalCode": "end",
              "pseudoCode": "End the startup procedure"
            }
          ]
        },
        {
          "name": "setup",
          "documentation": "; Initializes the display, and creates a list that contains the names of the shapes\n; used by turtles in this activity.  The placement of the shape names in the last\n; corresponds to the numbers sent by calculators.  Also initializes the data lists.",
          "originalCode": "to setup\n  clear-all\n  clear-output\n  setup-vars\n  setup-quick-start\nend",
          "numberedOriginalCode": [
            "1 | to setup",
            "2 |   clear-all",
            "3 |   clear-output",
            "4 |   setup-vars",
            "5 |   setup-quick-start",
            "6 | end"
          ],
          "pseudoCode": [],
          "codeToPseudoCodeMap": []
        },
        {
          "name": "setup-vars",
          "documentation": "; initialize global variables",
          "originalCode": "to setup-vars\n  set not-voted?-color violet - 2\n  set voted?-color violet + 2\n  clear-all-data-and-questions\nend",
          "numberedOriginalCode": [
            "1 | to setup-vars",
            "2 |   set not-voted?-color violet - 2",
            "3 |   set voted?-color violet + 2",
            "4 |   clear-all-data-and-questions",
            "5 | end"
          ],
          "pseudoCode": [
            "1 | to setup-vars",
            "2 |   set the not-voted?-color to violet minus 2",
            "3 |   set the voted?-color to violet plus 2",
            "4 |   clear all data and questions",
            "5 | end"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to setup-vars",
              "pseudoCode": "to setup-vars"
            },
            {
              "lineNumber": 2,
              "originalCode": "set not-voted?-color violet - 2",
              "pseudoCode": "set the not-voted?-color to violet minus 2"
            },
            {
              "lineNumber": 3,
              "originalCode": "set voted?-color violet + 2",
              "pseudoCode": "set the voted?-color to violet plus 2"
            },
            {
              "lineNumber": 4,
              "originalCode": "clear-all-data-and-questions",
              "pseudoCode": "clear all data and questions"
            },
            {
              "lineNumber": 5,
              "originalCode": "end",
              "pseudoCode": "end"
            }
          ]
        },
        {
          "name": "clear-clients",
          "documentation": "",
          "originalCode": "to clear-clients\n  clear-plot\n  clear-patches\n  clear-turtles\n  clear-output\nend",
          "numberedOriginalCode": [
            "1 | to clear-clients",
            "2 |   clear-plot",
            "3 |   clear-patches",
            "4 |   clear-turtles",
            "5 |   clear-output",
            "6 | end"
          ],
          "pseudoCode": [
            "1 | to define a procedure named clear-clients",
            "2 |   clear the plot",
            "3 |   clear all patches",
            "4 |   clear all turtles",
            "5 |   clear the output",
            "6 | end the procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to clear-clients",
              "pseudoCode": "to define a procedure named clear-clients"
            },
            {
              "lineNumber": 2,
              "originalCode": "clear-plot",
              "pseudoCode": "clear the plot"
            },
            {
              "lineNumber": 3,
              "originalCode": "clear-patches",
              "pseudoCode": "clear all patches"
            },
            {
              "lineNumber": 4,
              "originalCode": "clear-turtles",
              "pseudoCode": "clear all turtles"
            },
            {
              "lineNumber": 5,
              "originalCode": "clear-output",
              "pseudoCode": "clear the output"
            },
            {
              "lineNumber": 6,
              "originalCode": "end",
              "pseudoCode": "end the procedure"
            }
          ]
        },
        {
          "name": "clear-all-data-and-questions",
          "documentation": "",
          "originalCode": "to clear-all-data-and-questions\n  clear-plot\n  hubnet-broadcast \"Current Question\" \"\"\n  hubnet-broadcast \"Current Choice\" \"\"\n  set current-question 0\n  set question-list [\"\"]\n  ask turtles [ clear-my-data ]\nend",
          "numberedOriginalCode": [
            "1 | to clear-all-data-and-questions",
            "2 |   clear-plot",
            "3 |   hubnet-broadcast \"Current Question\" \"\"",
            "4 |   hubnet-broadcast \"Current Choice\" \"\"",
            "5 |   set current-question 0",
            "6 |   set question-list [\"\"]",
            "7 |   ask turtles [ clear-my-data ]",
            "8 | end"
          ],
          "pseudoCode": [
            "1 | When the procedure to clear all data and questions is called,",
            "2 |   Clear the plot.",
            "3 |   Broadcast an empty message for the current question.",
            "4 |   Broadcast an empty message for the current choice.",
            "5 |   Set the current question to 0.",
            "6 |   Set the question list to an empty list.",
            "7 |   Ask all turtles to clear their data.",
            "8 | End the procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to clear-all-data-and-questions",
              "pseudoCode": "When the procedure to clear all data and questions is called,"
            },
            {
              "lineNumber": 2,
              "originalCode": "clear-plot",
              "pseudoCode": "Clear the plot."
            },
            {
              "lineNumber": 3,
              "originalCode": "hubnet-broadcast \"Current Question\" \"\"",
              "pseudoCode": "Broadcast an empty message for the current question."
            },
            {
              "lineNumber": 4,
              "originalCode": "hubnet-broadcast \"Current Choice\" \"\"",
              "pseudoCode": "Broadcast an empty message for the current choice."
            },
            {
              "lineNumber": 5,
              "originalCode": "set current-question 0",
              "pseudoCode": "Set the current question to 0."
            },
            {
              "lineNumber": 6,
              "originalCode": "set question-list [\"\"]",
              "pseudoCode": "Set the question list to an empty list."
            },
            {
              "lineNumber": 7,
              "originalCode": "ask turtles [ clear-my-data ]",
              "pseudoCode": "Ask all turtles to clear their data."
            },
            {
              "lineNumber": 8,
              "originalCode": "end",
              "pseudoCode": "End the procedure."
            }
          ]
        },
        {
          "name": "clear-my-data",
          "documentation": "; turtle procedure",
          "originalCode": "to clear-my-data  ;; turtle procedure\n  set color not-voted?-color\n  set my-choices []\n  repeat length question-list\n  [ set my-choices lput false my-choices ]\nend",
          "numberedOriginalCode": [
            "1 | to clear-my-data  ;; turtle procedure",
            "2 |   set color not-voted?-color",
            "3 |   set my-choices []",
            "4 |   repeat length question-list",
            "5 |   [ set my-choices lput false my-choices ]",
            "6 | end"
          ],
          "pseudoCode": [
            "1 | When the procedure to clear my data is called by a turtle:",
            "2 |   Set the turtle's color to the not-voted color.",
            "3 |   Set the turtle's list of choices to an empty list.",
            "4 |   Repeat the following for each item in the question list:",
            "5 |   [ Add false to the beginning of the turtle's list of choices ]",
            "6 | End the procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to clear-my-data  ;; turtle procedure",
              "pseudoCode": "When the procedure to clear my data is called by a turtle:"
            },
            {
              "lineNumber": 2,
              "originalCode": "set color not-voted?-color",
              "pseudoCode": "Set the turtle's color to the not-voted color."
            },
            {
              "lineNumber": 3,
              "originalCode": "set my-choices []",
              "pseudoCode": "Set the turtle's list of choices to an empty list."
            },
            {
              "lineNumber": 4,
              "originalCode": "repeat length question-list",
              "pseudoCode": "Repeat the following for each item in the question list:"
            },
            {
              "lineNumber": 5,
              "originalCode": "[ set my-choices lput false my-choices ]",
              "pseudoCode": "[ Add false to the beginning of the turtle's list of choices ]"
            },
            {
              "lineNumber": 6,
              "originalCode": "end",
              "pseudoCode": "End the procedure."
            }
          ]
        },
        {
          "name": "setup-prompt",
          "documentation": "; give the user some information about what the setup button does so they can\n; know whether they want to proceed before actually doing the setup",
          "originalCode": "to setup-prompt\n  if user-yes-or-no? (word \"The SETUP button should only be used when starting \"\n              \"over with a new group (such as a new set of students) since \"\n              \"all data is lost.\\n\"\n              \"Are you sure you want to SETUP?\")\n  [ setup ]\nend",
          "numberedOriginalCode": [
            "1 | to setup-prompt",
            "2 |   if user-yes-or-no? (word \"The SETUP button should only be used when starting \"",
            "3 |               \"over with a new group (such as a new set of students) since \"",
            "4 |               \"all data is lost.\\n\"",
            "5 |               \"Are you sure you want to SETUP?\")",
            "6 |   [ setup ]",
            "7 | end"
          ],
          "pseudoCode": [
            "1 | When the setup-prompt procedure is called,",
            "2 |   If the user confirms that they want to proceed with the setup,",
            "3 |               after being informed that the SETUP button should only be used for a new group and all data will be lost,",
            "4 |               and being asked if they are sure they want to SETUP,",
            "5 |   Then,",
            "6 |     Call the setup procedure.",
            "7 | End the setup-prompt procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to setup-prompt",
              "pseudoCode": "When the setup-prompt procedure is called,"
            },
            {
              "lineNumber": 2,
              "originalCode": "if user-yes-or-no? (word \"The SETUP button should only be used when starting \"",
              "pseudoCode": "If the user confirms that they want to proceed with the setup,"
            },
            {
              "lineNumber": 3,
              "originalCode": "\"over with a new group (such as a new set of students) since \"",
              "pseudoCode": "after being informed that the SETUP button should only be used for a new group and all data will be lost,"
            },
            {
              "lineNumber": 4,
              "originalCode": "\"all data is lost.\\n\"",
              "pseudoCode": "and being asked if they are sure they want to SETUP,"
            },
            {
              "lineNumber": 5,
              "originalCode": "\"Are you sure you want to SETUP?\")",
              "pseudoCode": "Then,"
            },
            {
              "lineNumber": 6,
              "originalCode": "[ setup ]",
              "pseudoCode": "Call the setup procedure."
            },
            {
              "lineNumber": 7,
              "originalCode": "end",
              "pseudoCode": "End the setup-prompt procedure."
            }
          ]
        },
        {
          "name": "clear-current-data",
          "documentation": "",
          "originalCode": "to clear-current-data\n  clear-plot\n  ask turtles\n  [\n    set color not-voted?-color\n    set my-choices replace-item current-question my-choices false\n    hubnet-send user-id \"Current Choice\" \"\"\n  ]\nend",
          "numberedOriginalCode": [
            "1 | to clear-current-data",
            "2 |   clear-plot",
            "3 |   ask turtles",
            "4 |   [",
            "5 |     set color not-voted?-color",
            "6 |     set my-choices replace-item current-question my-choices false",
            "7 |     hubnet-send user-id \"Current Choice\" \"\"",
            "8 |   ]",
            "9 | end"
          ],
          "pseudoCode": [
            "1 | When the procedure to clear current data is called,",
            "2 |   Clear the plot.",
            "3 |   For each turtle,",
            "4 |   [",
            "5 |     Set the turtle's color to the not-voted color.",
            "6 |     Set the turtle's current choice to false.",
            "7 |     Send the user-id \"Current Choice\" with an empty string.",
            "8 |   ]",
            "9 | End the procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to clear-current-data",
              "pseudoCode": "When the procedure to clear current data is called,"
            },
            {
              "lineNumber": 2,
              "originalCode": "clear-plot",
              "pseudoCode": "Clear the plot."
            },
            {
              "lineNumber": 3,
              "originalCode": "ask turtles",
              "pseudoCode": "For each turtle,"
            },
            {
              "lineNumber": 4,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 5,
              "originalCode": "set color not-voted?-color",
              "pseudoCode": "Set the turtle's color to the not-voted color."
            },
            {
              "lineNumber": 6,
              "originalCode": "set my-choices replace-item current-question my-choices false",
              "pseudoCode": "Set the turtle's current choice to false."
            },
            {
              "lineNumber": 7,
              "originalCode": "hubnet-send user-id \"Current Choice\" \"\"",
              "pseudoCode": "Send the user-id \"Current Choice\" with an empty string."
            },
            {
              "lineNumber": 8,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 9,
              "originalCode": "end",
              "pseudoCode": "End the procedure."
            }
          ]
        },
        {
          "name": "go",
          "documentation": "",
          "originalCode": "to go\n  listen-clients\n  every 0.5\n  [\n    ask turtles [ wander ]\n    do-plot\n  ]\n  display\nend",
          "numberedOriginalCode": [
            "1 | to go",
            "2 |   listen-clients",
            "3 |   every 0.5",
            "4 |   [",
            "5 |     ask turtles [ wander ]",
            "6 |     do-plot",
            "7 |   ]",
            "8 |   display",
            "9 | end"
          ],
          "pseudoCode": [
            "1 | When the go procedure is called,",
            "2 |   listen for client commands,",
            "3 |   every 0.5 ticks,",
            "4 |   [",
            "5 |     for each turtle, make it wander,",
            "6 |     update the plot,",
            "7 |   ]",
            "8 |   update the display,",
            "9 | end the procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to go",
              "pseudoCode": "When the go procedure is called,"
            },
            {
              "lineNumber": 2,
              "originalCode": "listen-clients",
              "pseudoCode": "listen for client commands,"
            },
            {
              "lineNumber": 3,
              "originalCode": "every 0.5",
              "pseudoCode": "every 0.5 ticks,"
            },
            {
              "lineNumber": 4,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 5,
              "originalCode": "ask turtles [ wander ]",
              "pseudoCode": "for each turtle, make it wander,"
            },
            {
              "lineNumber": 6,
              "originalCode": "do-plot",
              "pseudoCode": "update the plot,"
            },
            {
              "lineNumber": 7,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 8,
              "originalCode": "display",
              "pseudoCode": "update the display,"
            },
            {
              "lineNumber": 9,
              "originalCode": "end",
              "pseudoCode": "end the procedure."
            }
          ]
        },
        {
          "name": "wander",
          "documentation": "; turtle procedure",
          "originalCode": "to wander  ;; turtle procedure\n  face one-of neighbors4\n  if not any? turtles-on patch-ahead 1\n    [ fd 1 ]\nend",
          "numberedOriginalCode": [
            "1 | to wander  ;; turtle procedure",
            "2 |   face one-of neighbors4",
            "3 |   if not any? turtles-on patch-ahead 1",
            "4 |     [ fd 1 ]",
            "5 | end"
          ],
          "pseudoCode": [
            "1 | When a turtle wanders,",
            "2 |   face one of the four neighboring patches",
            "3 |   if there are no turtles on the patch ahead one step",
            "4 |     [ move forward one step ]",
            "5 | End the wandering procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to wander  ;; turtle procedure",
              "pseudoCode": "When a turtle wanders,"
            },
            {
              "lineNumber": 2,
              "originalCode": "face one-of neighbors4",
              "pseudoCode": "face one of the four neighboring patches"
            },
            {
              "lineNumber": 3,
              "originalCode": "if not any? turtles-on patch-ahead 1",
              "pseudoCode": "if there are no turtles on the patch ahead one step"
            },
            {
              "lineNumber": 4,
              "originalCode": "[ fd 1 ]",
              "pseudoCode": "[ move forward one step ]"
            },
            {
              "lineNumber": 5,
              "originalCode": "end",
              "pseudoCode": "End the wandering procedure"
            }
          ]
        },
        {
          "name": "add-question",
          "documentation": "",
          "originalCode": "to add-question\n  if question-list = [\"\"]\n  [ set question-list [] ]\n  set question-list lput user-input \"Input new question?\" question-list\n  set-current-question (length question-list - 1)\n  clear-current-data\nend",
          "numberedOriginalCode": [
            "1 | to add-question",
            "2 |   if question-list = [\"\"]",
            "3 |   [ set question-list [] ]",
            "4 |   set question-list lput user-input \"Input new question?\" question-list",
            "5 |   set-current-question (length question-list - 1)",
            "6 |   clear-current-data",
            "7 | end"
          ],
          "pseudoCode": [
            "1 | When the procedure to add a question is called,",
            "2 |   if the question list is empty,",
            "3 |   [ set the question list to an empty list ]",
            "4 |   add the user's input to the question list",
            "5 |   set the current question to the last question in the list",
            "6 |   clear the current data",
            "7 | end"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to add-question",
              "pseudoCode": "When the procedure to add a question is called,"
            },
            {
              "lineNumber": 2,
              "originalCode": "if question-list = [\"\"]",
              "pseudoCode": "if the question list is empty,"
            },
            {
              "lineNumber": 3,
              "originalCode": "[ set question-list [] ]",
              "pseudoCode": "[ set the question list to an empty list ]"
            },
            {
              "lineNumber": 4,
              "originalCode": "set question-list lput user-input \"Input new question?\" question-list",
              "pseudoCode": "add the user's input to the question list"
            },
            {
              "lineNumber": 5,
              "originalCode": "set-current-question (length question-list - 1)",
              "pseudoCode": "set the current question to the last question in the list"
            },
            {
              "lineNumber": 6,
              "originalCode": "clear-current-data",
              "pseudoCode": "clear the current data"
            },
            {
              "lineNumber": 7,
              "originalCode": "end",
              "pseudoCode": "end"
            }
          ]
        },
        {
          "name": "set-current-question",
          "documentation": "",
          "originalCode": "to set-current-question [n]\n  if n >= 0 and n < length question-list\n  [\n    set current-question n\n    ask turtles\n    [\n      while [length my-choices < current-question + 1]\n      [ set my-choices lput false my-choices ]\n      ifelse (item current-question my-choices) = false\n      [\n        set color not-voted?-color\n        hubnet-send user-id \"Current Choice\" \"\"\n      ]\n      [\n        set color voted?-color\n        hubnet-send user-id \"Current Choice\" (item current-question my-choices)\n      ]\n    ]\n    do-plot\n    hubnet-broadcast \"Current Question\" (item current-question question-list)\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to set-current-question [n]",
            " 2 |   if n >= 0 and n < length question-list",
            " 3 |   [",
            " 4 |     set current-question n",
            " 5 |     ask turtles",
            " 6 |     [",
            " 7 |       while [length my-choices < current-question + 1]",
            " 8 |       [ set my-choices lput false my-choices ]",
            " 9 |       ifelse (item current-question my-choices) = false",
            "10 |       [",
            "11 |         set color not-voted?-color",
            "12 |         hubnet-send user-id \"Current Choice\" \"\"",
            "13 |       ]",
            "14 |       [",
            "15 |         set color voted?-color",
            "16 |         hubnet-send user-id \"Current Choice\" (item current-question my-choices)",
            "17 |       ]",
            "18 |     ]",
            "19 |     do-plot",
            "20 |     hubnet-broadcast \"Current Question\" (item current-question question-list)",
            "21 |   ]",
            "22 | end"
          ],
          "pseudoCode": [
            "1 | Define a procedure named set-current-question that takes a parameter n.",
            "2 |   If n is greater than or equal to 0 and less than the length of question-list, then:",
            "3 |   [",
            "4 |     Set the current-question to n.",
            "5 |     For each turtle, do the following:",
            "6 |     [",
            "7 |       While the length of my-choices is less than current-question + 1, do the following:",
            "8 |       [ Add false to the end of my-choices. ]",
            "9 |       If the value at the current-question index of my-choices is false, then:",
            "10 |       [",
            "11 |         Set the turtle's color to not-voted?-color.",
            "12 |         Send a message to the user with the ID user-id, indicating \"Current Choice\" is empty.",
            "13 |       ]",
            "14 |       Otherwise:",
            "15 |       [",
            "16 |         Set the turtle's color to voted?-color.",
            "17 |         Send a message to the user with the ID user-id, indicating \"Current Choice\" is the value at the current-question index of my-choices.",
            "18 |       ]",
            "19 |     ]",
            "20 |     Perform the do-plot procedure.",
            "21 |     Broadcast a message to all users indicating \"Current Question\" is the value at the current-question index of question-list.",
            "22 |   ]"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to set-current-question [n]",
              "pseudoCode": "Define a procedure named set-current-question that takes a parameter n."
            },
            {
              "lineNumber": 2,
              "originalCode": "if n >= 0 and n < length question-list",
              "pseudoCode": "If n is greater than or equal to 0 and less than the length of question-list, then:"
            },
            {
              "lineNumber": 3,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 4,
              "originalCode": "set current-question n",
              "pseudoCode": "Set the current-question to n."
            },
            {
              "lineNumber": 5,
              "originalCode": "ask turtles",
              "pseudoCode": "For each turtle, do the following:"
            },
            {
              "lineNumber": 6,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 7,
              "originalCode": "while [length my-choices < current-question + 1]",
              "pseudoCode": "While the length of my-choices is less than current-question + 1, do the following:"
            },
            {
              "lineNumber": 8,
              "originalCode": "[ set my-choices lput false my-choices ]",
              "pseudoCode": "[ Add false to the end of my-choices. ]"
            },
            {
              "lineNumber": 9,
              "originalCode": "ifelse (item current-question my-choices) = false",
              "pseudoCode": "If the value at the current-question index of my-choices is false, then:"
            },
            {
              "lineNumber": 10,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 11,
              "originalCode": "set color not-voted?-color",
              "pseudoCode": "Set the turtle's color to not-voted?-color."
            },
            {
              "lineNumber": 12,
              "originalCode": "hubnet-send user-id \"Current Choice\" \"\"",
              "pseudoCode": "Send a message to the user with the ID user-id, indicating \"Current Choice\" is empty."
            },
            {
              "lineNumber": 13,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 14,
              "originalCode": "[",
              "pseudoCode": "Otherwise:"
            },
            {
              "lineNumber": 15,
              "originalCode": "set color voted?-color",
              "pseudoCode": "["
            },
            {
              "lineNumber": 16,
              "originalCode": "hubnet-send user-id \"Current Choice\" (item current-question my-choices)",
              "pseudoCode": "Set the turtle's color to voted?-color."
            },
            {
              "lineNumber": 17,
              "originalCode": "]",
              "pseudoCode": "Send a message to the user with the ID user-id, indicating \"Current Choice\" is the value at the current-question index of my-choices."
            },
            {
              "lineNumber": 18,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 19,
              "originalCode": "do-plot",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 20,
              "originalCode": "hubnet-broadcast \"Current Question\" (item current-question question-list)",
              "pseudoCode": "Perform the do-plot procedure."
            },
            {
              "lineNumber": 21,
              "originalCode": "]",
              "pseudoCode": "Broadcast a message to all users indicating \"Current Question\" is the value at the current-question index of question-list."
            },
            {
              "lineNumber": 22,
              "originalCode": "end",
              "pseudoCode": "]"
            }
          ]
        },
        {
          "name": "prev-question",
          "documentation": "",
          "originalCode": "to prev-question\n  if current-question > 0\n  [ set-current-question current-question - 1]\nend",
          "numberedOriginalCode": [
            "1 | to prev-question",
            "2 |   if current-question > 0",
            "3 |   [ set-current-question current-question - 1]",
            "4 | end"
          ],
          "pseudoCode": [
            "1 | When the previous question procedure is invoked,",
            "2 |   if the current question is greater than 0,",
            "3 |   [ decrease the current question by 1 ]",
            "4 | end the procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to prev-question",
              "pseudoCode": "When the previous question procedure is invoked,"
            },
            {
              "lineNumber": 2,
              "originalCode": "if current-question > 0",
              "pseudoCode": "if the current question is greater than 0,"
            },
            {
              "lineNumber": 3,
              "originalCode": "[ set-current-question current-question - 1]",
              "pseudoCode": "[ decrease the current question by 1 ]"
            },
            {
              "lineNumber": 4,
              "originalCode": "end",
              "pseudoCode": "end the procedure"
            }
          ]
        },
        {
          "name": "next-question",
          "documentation": "",
          "originalCode": "to next-question\n  if current-question + 1 < length question-list\n  [ set-current-question current-question + 1]\nend",
          "numberedOriginalCode": [
            "1 | to next-question",
            "2 |   if current-question + 1 < length question-list",
            "3 |   [ set-current-question current-question + 1]",
            "4 | end"
          ],
          "pseudoCode": [
            "1 | When the next-question procedure is invoked,",
            "2 |   if the current question plus one is less than the length of the question list,",
            "3 |   [ set the current question to the current question plus one]",
            "4 | end the procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to next-question",
              "pseudoCode": "When the next-question procedure is invoked,"
            },
            {
              "lineNumber": 2,
              "originalCode": "if current-question + 1 < length question-list",
              "pseudoCode": "if the current question plus one is less than the length of the question list,"
            },
            {
              "lineNumber": 3,
              "originalCode": "[ set-current-question current-question + 1]",
              "pseudoCode": "[ set the current question to the current question plus one]"
            },
            {
              "lineNumber": 4,
              "originalCode": "end",
              "pseudoCode": "end the procedure"
            }
          ]
        },
        {
          "name": "listen-clients",
          "documentation": "",
          "originalCode": "to listen-clients\n  while [hubnet-message-waiting?]\n  [\n    hubnet-fetch-message\n    ifelse hubnet-enter-message?\n    [ execute-create ]\n    [\n      ifelse hubnet-exit-message?\n      [\n        ask turtles with [user-id = hubnet-message-source] [ die ]\n        do-plot\n      ]\n      [\n        if hubnet-message-tag = \"Choose\"\n        [ execute-choose ]\n        if hubnet-message-tag = \"Choice\"\n        [ change-choice ]\n      ]\n    ]\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to listen-clients",
            " 2 |   while [hubnet-message-waiting?]",
            " 3 |   [",
            " 4 |     hubnet-fetch-message",
            " 5 |     ifelse hubnet-enter-message?",
            " 6 |     [ execute-create ]",
            " 7 |     [",
            " 8 |       ifelse hubnet-exit-message?",
            " 9 |       [",
            "10 |         ask turtles with [user-id = hubnet-message-source] [ die ]",
            "11 |         do-plot",
            "12 |       ]",
            "13 |       [",
            "14 |         if hubnet-message-tag = \"Choose\"",
            "15 |         [ execute-choose ]",
            "16 |         if hubnet-message-tag = \"Choice\"",
            "17 |         [ change-choice ]",
            "18 |       ]",
            "19 |     ]",
            "20 |   ]",
            "21 | end"
          ],
          "pseudoCode": [
            "1 | to listen to clients",
            "2 |   while there is a message waiting",
            "3 |   [",
            "4 |     fetch the message",
            "5 |     if the message is an enter message",
            "6 |     [ execute create ]",
            "7 |     [",
            "8 |       if the message is an exit message",
            "9 |       [",
            "10 |         ask turtles with the same user id as the message source to die",
            "11 |         do plot",
            "12 |       ]",
            "13 |       [",
            "14 |         if the message tag is \"Choose\"",
            "15 |         [ execute choose ]",
            "16 |         if the message tag is \"Choice\"",
            "17 |         [ change choice ]",
            "18 |       ]",
            "19 |     ]",
            "20 |   ]",
            "21 | end"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to listen-clients",
              "pseudoCode": "to listen to clients"
            },
            {
              "lineNumber": 2,
              "originalCode": "while [hubnet-message-waiting?]",
              "pseudoCode": "while there is a message waiting"
            },
            {
              "lineNumber": 3,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 4,
              "originalCode": "hubnet-fetch-message",
              "pseudoCode": "fetch the message"
            },
            {
              "lineNumber": 5,
              "originalCode": "ifelse hubnet-enter-message?",
              "pseudoCode": "if the message is an enter message"
            },
            {
              "lineNumber": 6,
              "originalCode": "[ execute-create ]",
              "pseudoCode": "[ execute create ]"
            },
            {
              "lineNumber": 7,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 8,
              "originalCode": "ifelse hubnet-exit-message?",
              "pseudoCode": "if the message is an exit message"
            },
            {
              "lineNumber": 9,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 10,
              "originalCode": "ask turtles with [user-id = hubnet-message-source] [ die ]",
              "pseudoCode": "ask turtles with the same user id as the message source to die"
            },
            {
              "lineNumber": 11,
              "originalCode": "do-plot",
              "pseudoCode": "do plot"
            },
            {
              "lineNumber": 12,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 13,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 14,
              "originalCode": "if hubnet-message-tag = \"Choose\"",
              "pseudoCode": "if the message tag is \"Choose\""
            },
            {
              "lineNumber": 15,
              "originalCode": "[ execute-choose ]",
              "pseudoCode": "[ execute choose ]"
            },
            {
              "lineNumber": 16,
              "originalCode": "if hubnet-message-tag = \"Choice\"",
              "pseudoCode": "if the message tag is \"Choice\""
            },
            {
              "lineNumber": 17,
              "originalCode": "[ change-choice ]",
              "pseudoCode": "[ change choice ]"
            },
            {
              "lineNumber": 18,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 19,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 20,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 21,
              "originalCode": "end",
              "pseudoCode": "end"
            }
          ]
        },
        {
          "name": "execute-create",
          "documentation": "",
          "originalCode": "to execute-create\n  create-turtles 1\n  [\n    let pos one-of patches with [not any? turtles-here]\n    ifelse pos != nobody\n    [ move-to pos ]\n    [ user-message \"Too many students. Make a bigger view.\" ]\n    set user-id hubnet-message-source\n    set label word user-id \"   \"\n    set slider-value 0\n    clear-my-data\n    hubnet-send user-id \"Current Question\" (item current-question question-list)\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to execute-create",
            " 2 |   create-turtles 1",
            " 3 |   [",
            " 4 |     let pos one-of patches with [not any? turtles-here]",
            " 5 |     ifelse pos != nobody",
            " 6 |     [ move-to pos ]",
            " 7 |     [ user-message \"Too many students. Make a bigger view.\" ]",
            " 8 |     set user-id hubnet-message-source",
            " 9 |     set label word user-id \"   \"",
            "10 |     set slider-value 0",
            "11 |     clear-my-data",
            "12 |     hubnet-send user-id \"Current Question\" (item current-question question-list)",
            "13 |   ]",
            "14 | end"
          ],
          "pseudoCode": [
            "1 | When executing the create process,",
            "2 |   create one turtle",
            "3 |   [",
            "4 |     let position be one of the patches with no turtles",
            "5 |     if position is not nobody",
            "6 |     [ move to the position ]",
            "7 |     [ display a message to the user that there are too many students ]",
            "8 |     set the user ID to the hubnet message source",
            "9 |     set the label to the user ID followed by three spaces",
            "10 |     set the slider value to 0",
            "11 |     clear the turtle's data",
            "12 |     send the user ID and the current question to the hubnet",
            "13 |   ]",
            "14 | End the execution."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to execute-create",
              "pseudoCode": "When executing the create process,"
            },
            {
              "lineNumber": 2,
              "originalCode": "create-turtles 1",
              "pseudoCode": "create one turtle"
            },
            {
              "lineNumber": 3,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 4,
              "originalCode": "let pos one-of patches with [not any? turtles-here]",
              "pseudoCode": "let position be one of the patches with no turtles"
            },
            {
              "lineNumber": 5,
              "originalCode": "ifelse pos != nobody",
              "pseudoCode": "if position is not nobody"
            },
            {
              "lineNumber": 6,
              "originalCode": "[ move-to pos ]",
              "pseudoCode": "[ move to the position ]"
            },
            {
              "lineNumber": 7,
              "originalCode": "[ user-message \"Too many students. Make a bigger view.\" ]",
              "pseudoCode": "[ display a message to the user that there are too many students ]"
            },
            {
              "lineNumber": 8,
              "originalCode": "set user-id hubnet-message-source",
              "pseudoCode": "set the user ID to the hubnet message source"
            },
            {
              "lineNumber": 9,
              "originalCode": "set label word user-id \"   \"",
              "pseudoCode": "set the label to the user ID followed by three spaces"
            },
            {
              "lineNumber": 10,
              "originalCode": "set slider-value 0",
              "pseudoCode": "set the slider value to 0"
            },
            {
              "lineNumber": 11,
              "originalCode": "clear-my-data",
              "pseudoCode": "clear the turtle's data"
            },
            {
              "lineNumber": 12,
              "originalCode": "hubnet-send user-id \"Current Question\" (item current-question question-list)",
              "pseudoCode": "send the user ID and the current question to the hubnet"
            },
            {
              "lineNumber": 13,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 14,
              "originalCode": "end",
              "pseudoCode": "End the execution."
            }
          ]
        },
        {
          "name": "execute-choose",
          "documentation": "",
          "originalCode": "to execute-choose\n  ask turtles with [user-id = hubnet-message-source]\n  [\n    if allow-change? or color = not-voted?-color\n    [\n      set color voted?-color\n      set my-choices replace-item current-question my-choices slider-value\n      hubnet-send hubnet-message-source \"Current Choice\" slider-value\n    ]\n  ]\n  do-plot\nend",
          "numberedOriginalCode": [
            " 1 | to execute-choose",
            " 2 |   ask turtles with [user-id = hubnet-message-source]",
            " 3 |   [",
            " 4 |     if allow-change? or color = not-voted?-color",
            " 5 |     [",
            " 6 |       set color voted?-color",
            " 7 |       set my-choices replace-item current-question my-choices slider-value",
            " 8 |       hubnet-send hubnet-message-source \"Current Choice\" slider-value",
            " 9 |     ]",
            "10 |   ]",
            "11 |   do-plot",
            "12 | end"
          ],
          "pseudoCode": [
            "1 | When the execute-choose procedure is called,",
            "2 |   For each turtle where the user-id matches the hubnet-message-source,",
            "3 |   [",
            "4 |     If the turtle is allowed to change its vote or its color is not-voted?-color,",
            "5 |     [",
            "6 |       Set the turtle's color to voted?-color,",
            "7 |       Update the turtle's choices for the current question with the slider value,",
            "8 |       Send the turtle's current choice to the hubnet-message-source,",
            "9 |     ]",
            "10 |   ]",
            "11 |   Update the plot,",
            "12 | End the procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to execute-choose",
              "pseudoCode": "When the execute-choose procedure is called,"
            },
            {
              "lineNumber": 2,
              "originalCode": "ask turtles with [user-id = hubnet-message-source]",
              "pseudoCode": "For each turtle where the user-id matches the hubnet-message-source,"
            },
            {
              "lineNumber": 3,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 4,
              "originalCode": "if allow-change? or color = not-voted?-color",
              "pseudoCode": "If the turtle is allowed to change its vote or its color is not-voted?-color,"
            },
            {
              "lineNumber": 5,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 6,
              "originalCode": "set color voted?-color",
              "pseudoCode": "Set the turtle's color to voted?-color,"
            },
            {
              "lineNumber": 7,
              "originalCode": "set my-choices replace-item current-question my-choices slider-value",
              "pseudoCode": "Update the turtle's choices for the current question with the slider value,"
            },
            {
              "lineNumber": 8,
              "originalCode": "hubnet-send hubnet-message-source \"Current Choice\" slider-value",
              "pseudoCode": "Send the turtle's current choice to the hubnet-message-source,"
            },
            {
              "lineNumber": 9,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 10,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 11,
              "originalCode": "do-plot",
              "pseudoCode": "Update the plot,"
            },
            {
              "lineNumber": 12,
              "originalCode": "end",
              "pseudoCode": "End the procedure."
            }
          ]
        },
        {
          "name": "change-choice",
          "documentation": "",
          "originalCode": "to change-choice\n  ask turtles with [user-id = hubnet-message-source]\n  [ set slider-value hubnet-message ]\nend",
          "numberedOriginalCode": [
            "1 | to change-choice",
            "2 |   ask turtles with [user-id = hubnet-message-source]",
            "3 |   [ set slider-value hubnet-message ]",
            "4 | end"
          ],
          "pseudoCode": [
            "1 | When the procedure to change choice is called,",
            "2 |   For each turtle where the user ID is equal to the message source,",
            "3 |   [ Set the slider value to the hubnet message ]",
            "4 | End the procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to change-choice",
              "pseudoCode": "When the procedure to change choice is called,"
            },
            {
              "lineNumber": 2,
              "originalCode": "ask turtles with [user-id = hubnet-message-source]",
              "pseudoCode": "For each turtle where the user ID is equal to the message source,"
            },
            {
              "lineNumber": 3,
              "originalCode": "[ set slider-value hubnet-message ]",
              "pseudoCode": "[ Set the slider value to the hubnet message ]"
            },
            {
              "lineNumber": 4,
              "originalCode": "end",
              "pseudoCode": "End the procedure."
            }
          ]
        },
        {
          "name": "do-plot",
          "documentation": "",
          "originalCode": "to do-plot\n  clear-plot\n  if show-plot?\n  [\n    let current-data [item current-question my-choices] of turtles\n    set current-data remove false current-data\n    if not empty? current-data\n    [\n      set-current-plot-pen \"data\"\n      histogram current-data\n      set-current-plot-pen \"mean\"\n      plot-vline mean current-data\n      set-current-plot-pen \"median\"\n      plot-vline median current-data\n      set-current-plot-pen \"mode\"\n      plot-modes current-data\n    ]\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to do-plot",
            " 2 |   clear-plot",
            " 3 |   if show-plot?",
            " 4 |   [",
            " 5 |     let current-data [item current-question my-choices] of turtles",
            " 6 |     set current-data remove false current-data",
            " 7 |     if not empty? current-data",
            " 8 |     [",
            " 9 |       set-current-plot-pen \"data\"",
            "10 |       histogram current-data",
            "11 |       set-current-plot-pen \"mean\"",
            "12 |       plot-vline mean current-data",
            "13 |       set-current-plot-pen \"median\"",
            "14 |       plot-vline median current-data",
            "15 |       set-current-plot-pen \"mode\"",
            "16 |       plot-modes current-data",
            "17 |     ]",
            "18 |   ]",
            "19 | end"
          ],
          "pseudoCode": [
            "1 | to do the plot",
            "2 |   clear the plot",
            "3 |   if the plot should be shown",
            "4 |   [",
            "5 |     let current data be the choices of the current question for all turtles",
            "6 |     remove false values from the current data",
            "7 |     if the current data is not empty",
            "8 |     [",
            "9 |       set the plot pen to \"data\"",
            "10 |       plot a histogram of the current data",
            "11 |       set the plot pen to \"mean\"",
            "12 |       plot a vertical line at the mean of the current data",
            "13 |       set the plot pen to \"median\"",
            "14 |       plot a vertical line at the median of the current data",
            "15 |       set the plot pen to \"mode\"",
            "16 |       plot the modes of the current data",
            "17 |     ]",
            "18 |   ]",
            "19 | end"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to do-plot",
              "pseudoCode": "to do the plot"
            },
            {
              "lineNumber": 2,
              "originalCode": "clear-plot",
              "pseudoCode": "clear the plot"
            },
            {
              "lineNumber": 3,
              "originalCode": "if show-plot?",
              "pseudoCode": "if the plot should be shown"
            },
            {
              "lineNumber": 4,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 5,
              "originalCode": "let current-data [item current-question my-choices] of turtles",
              "pseudoCode": "let current data be the choices of the current question for all turtles"
            },
            {
              "lineNumber": 6,
              "originalCode": "set current-data remove false current-data",
              "pseudoCode": "remove false values from the current data"
            },
            {
              "lineNumber": 7,
              "originalCode": "if not empty? current-data",
              "pseudoCode": "if the current data is not empty"
            },
            {
              "lineNumber": 8,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 9,
              "originalCode": "set-current-plot-pen \"data\"",
              "pseudoCode": "set the plot pen to \"data\""
            },
            {
              "lineNumber": 10,
              "originalCode": "histogram current-data",
              "pseudoCode": "plot a histogram of the current data"
            },
            {
              "lineNumber": 11,
              "originalCode": "set-current-plot-pen \"mean\"",
              "pseudoCode": "set the plot pen to \"mean\""
            },
            {
              "lineNumber": 12,
              "originalCode": "plot-vline mean current-data",
              "pseudoCode": "plot a vertical line at the mean of the current data"
            },
            {
              "lineNumber": 13,
              "originalCode": "set-current-plot-pen \"median\"",
              "pseudoCode": "set the plot pen to \"median\""
            },
            {
              "lineNumber": 14,
              "originalCode": "plot-vline median current-data",
              "pseudoCode": "plot a vertical line at the median of the current data"
            },
            {
              "lineNumber": 15,
              "originalCode": "set-current-plot-pen \"mode\"",
              "pseudoCode": "set the plot pen to \"mode\""
            },
            {
              "lineNumber": 16,
              "originalCode": "plot-modes current-data",
              "pseudoCode": "plot the modes of the current data"
            },
            {
              "lineNumber": 17,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 18,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 19,
              "originalCode": "end",
              "pseudoCode": "end"
            }
          ]
        },
        {
          "name": "plot-vline",
          "documentation": "",
          "originalCode": "to plot-vline [value]\n  plotxy value 0\n  plotxy value plot-y-max\nend",
          "numberedOriginalCode": [
            "1 | to plot-vline [value]",
            "2 |   plotxy value 0",
            "3 |   plotxy value plot-y-max",
            "4 | end"
          ],
          "pseudoCode": [
            "1 | Define a procedure named plot-vline that takes one input value.",
            "2 |   Plot a point at the coordinates (value, 0).",
            "3 |   Plot a point at the coordinates (value, plot-y-max).",
            "4 | End the procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to plot-vline [value]",
              "pseudoCode": "Define a procedure named plot-vline that takes one input value."
            },
            {
              "lineNumber": 2,
              "originalCode": "plotxy value 0",
              "pseudoCode": "Plot a point at the coordinates (value, 0)."
            },
            {
              "lineNumber": 3,
              "originalCode": "plotxy value plot-y-max",
              "pseudoCode": "Plot a point at the coordinates (value, plot-y-max)."
            },
            {
              "lineNumber": 4,
              "originalCode": "end",
              "pseudoCode": "End the procedure."
            }
          ]
        },
        {
          "name": "plot-modes",
          "documentation": "",
          "originalCode": "to plot-modes [lst]\n  set lst remove false lst\n  let values remove-duplicates lst\n  ifelse length values = length lst\n  [ histogram lst ]  ;; no duplicates so all items are modes\n  [\n    let counts []\n    let i 0\n    repeat length values\n    [\n      set counts lput ((length lst) - (length remove (item i values) lst)) counts\n      set i i + 1\n    ]\n    let n max counts  ;; how many votes for the most frequent choice(s)?\n    while [member? n counts]\n    [\n      set values (replace-item (position n counts) values false)\n      set counts (replace-item (position n counts) counts 0)\n    ]\n    set values remove false values\n    set i 0\n    repeat length values\n    [\n      set lst (remove (item i values) lst)\n      set i i + 1\n    ]\n    histogram lst\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to plot-modes [lst]",
            " 2 |   set lst remove false lst",
            " 3 |   let values remove-duplicates lst",
            " 4 |   ifelse length values = length lst",
            " 5 |   [ histogram lst ]  ;; no duplicates so all items are modes",
            " 6 |   [",
            " 7 |     let counts []",
            " 8 |     let i 0",
            " 9 |     repeat length values",
            "10 |     [",
            "11 |       set counts lput ((length lst) - (length remove (item i values) lst)) counts",
            "12 |       set i i + 1",
            "13 |     ]",
            "14 |     let n max counts  ;; how many votes for the most frequent choice(s)?",
            "15 |     while [member? n counts]",
            "16 |     [",
            "17 |       set values (replace-item (position n counts) values false)",
            "18 |       set counts (replace-item (position n counts) counts 0)",
            "19 |     ]",
            "20 |     set values remove false values",
            "21 |     set i 0",
            "22 |     repeat length values",
            "23 |     [",
            "24 |       set lst (remove (item i values) lst)",
            "25 |       set i i + 1",
            "26 |     ]",
            "27 |     histogram lst",
            "28 |   ]",
            "29 | end"
          ],
          "pseudoCode": [
            "1 | to plot-modes [lst]",
            "2 |   remove false from lst",
            "3 |   let values be the unique items in lst",
            "4 |   if the number of unique items in values is equal to the number of items in lst",
            "5 |   [ plot a histogram of lst ]  ;; no duplicates so all items are modes",
            "6 |   [",
            "7 |     let counts be an empty list",
            "8 |     let i be 0",
            "9 |     repeat for each item in values",
            "10 |     [",
            "11 |       add the count of occurrences of the item at index i in lst to counts",
            "12 |       increment i by 1",
            "13 |     ]",
            "14 |     let n be the maximum value in counts  ;; how many votes for the most frequent choice(s)?",
            "15 |     while n is in counts",
            "16 |     [",
            "17 |       replace the item at the position of n in counts with false in values",
            "18 |       replace the item at the position of n in counts with 0 in counts",
            "19 |     ]",
            "20 |     remove false from values",
            "21 |     let i be 0",
            "22 |     repeat for each item in values",
            "23 |     [",
            "24 |       remove the item at index i from lst",
            "25 |       increment i by 1",
            "26 |     ]",
            "27 |     plot a histogram of lst",
            "28 |   ]",
            "29 | end"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to plot-modes [lst]",
              "pseudoCode": "to plot-modes [lst]"
            },
            {
              "lineNumber": 2,
              "originalCode": "set lst remove false lst",
              "pseudoCode": "remove false from lst"
            },
            {
              "lineNumber": 3,
              "originalCode": "let values remove-duplicates lst",
              "pseudoCode": "let values be the unique items in lst"
            },
            {
              "lineNumber": 4,
              "originalCode": "ifelse length values = length lst",
              "pseudoCode": "if the number of unique items in values is equal to the number of items in lst"
            },
            {
              "lineNumber": 5,
              "originalCode": "[ histogram lst ]  ;; no duplicates so all items are modes",
              "pseudoCode": "[ plot a histogram of lst ]  ;; no duplicates so all items are modes"
            },
            {
              "lineNumber": 6,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 7,
              "originalCode": "let counts []",
              "pseudoCode": "let counts be an empty list"
            },
            {
              "lineNumber": 8,
              "originalCode": "let i 0",
              "pseudoCode": "let i be 0"
            },
            {
              "lineNumber": 9,
              "originalCode": "repeat length values",
              "pseudoCode": "repeat for each item in values"
            },
            {
              "lineNumber": 10,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 11,
              "originalCode": "set counts lput ((length lst) - (length remove (item i values) lst)) counts",
              "pseudoCode": "add the count of occurrences of the item at index i in lst to counts"
            },
            {
              "lineNumber": 12,
              "originalCode": "set i i + 1",
              "pseudoCode": "increment i by 1"
            },
            {
              "lineNumber": 13,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 14,
              "originalCode": "let n max counts  ;; how many votes for the most frequent choice(s)?",
              "pseudoCode": "let n be the maximum value in counts  ;; how many votes for the most frequent choice(s)?"
            },
            {
              "lineNumber": 15,
              "originalCode": "while [member? n counts]",
              "pseudoCode": "while n is in counts"
            },
            {
              "lineNumber": 16,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 17,
              "originalCode": "set values (replace-item (position n counts) values false)",
              "pseudoCode": "replace the item at the position of n in counts with false in values"
            },
            {
              "lineNumber": 18,
              "originalCode": "set counts (replace-item (position n counts) counts 0)",
              "pseudoCode": "replace the item at the position of n in counts with 0 in counts"
            },
            {
              "lineNumber": 19,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 20,
              "originalCode": "set values remove false values",
              "pseudoCode": "remove false from values"
            },
            {
              "lineNumber": 21,
              "originalCode": "set i 0",
              "pseudoCode": "let i be 0"
            },
            {
              "lineNumber": 22,
              "originalCode": "repeat length values",
              "pseudoCode": "repeat for each item in values"
            },
            {
              "lineNumber": 23,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 24,
              "originalCode": "set lst (remove (item i values) lst)",
              "pseudoCode": "remove the item at index i from lst"
            },
            {
              "lineNumber": 25,
              "originalCode": "set i i + 1",
              "pseudoCode": "increment i by 1"
            },
            {
              "lineNumber": 26,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 27,
              "originalCode": "histogram lst",
              "pseudoCode": "plot a histogram of lst"
            },
            {
              "lineNumber": 28,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 29,
              "originalCode": "end",
              "pseudoCode": "end"
            }
          ]
        },
        {
          "name": "setup-quick-start",
          "documentation": "",
          "originalCode": "to setup-quick-start\n  set qs-item 0\n  set qs-items\n  [\n    \"Teacher: Follow these directions to run the HubNet activity.\"\n    \"Optional: Zoom In (see Tools in the Menu Bar)\"\n    \"Teacher: Open up the HubNet Control Center (see Tools in the Menu Bar).\"\n      \"This will show you the IP Address of this computer.\"\n      \"Press the GO button and tell the students to login.\"\n    \"Everyone: Open up a HubNet Client on your machine and...\"\n      \"type your user name, select this activity and press ENTER.\"\n\n    \"Teacher: If you don't want to allow students to change their mind,...\"\n      \"switch ALLOW-CHANGE? off.\"\n        \"If you don't want to show the current data in the plot as...\"\n          \"it's being collected, switch SHOW-DATA? off.\"\n            \"You can turn it back on at any time to see the data.\"\n\n    \"Teacher: Press the NEW QUESTION button to input a question for everyone to answer.\"\n    \"Everyone: Once you see the question, move your CHOICE slider to the value...\"\n      \"you want to choose and press the CHOOSE button.\"\n        \"Once you have chosen, your choice will appear in your CURRENT CHOICE monitor,...\"\n          \"and your turtle in NetLogo will get brighter.\"\n\n    \"Teacher: To input another question, press NEW QUESTION again.\"\n      \"The data and CURRENT QUESTION will be saved and then the question will change...\"\n        \"to your new question and everyone will be able to make their choices on the new question.\"\n          \"To return to a previous question, use the <<<PREV QUESTION...\"\n            \"and NEXT QUESTION>>> buttons to cycle through the questions.\"\n\n    \"Teacher: To rerun the activity with the same group, press...\"\n      \"the CLEAR QUESTIONS button to erase all the questions and data.\"\n\n    \"Teacher: To start the simulation over with a new group but reuse the same questions...\"\n      \"stop the model by pressing the NetLogo GO button, if it is on...\"\n        \"and press the CLEAR CLIENTS button.\"\n\n    \"Teacher: To start the simulation over with a new group but with new questions...\"\n      \"stop the GO button, if it is on, and press the SETUP button.\"\n\n    \"Follow these instructions from the beginning.\"\n  ]\n  set quick-start (item qs-item qs-items)\nend",
          "numberedOriginalCode": [
            " 1 | to setup-quick-start",
            " 2 |   set qs-item 0",
            " 3 |   set qs-items",
            " 4 |   [",
            " 5 |     \"Teacher: Follow these directions to run the HubNet activity.\"",
            " 6 |     \"Optional: Zoom In (see Tools in the Menu Bar)\"",
            " 7 |     \"Teacher: Open up the HubNet Control Center (see Tools in the Menu Bar).\"",
            " 8 |       \"This will show you the IP Address of this computer.\"",
            " 9 |       \"Press the GO button and tell the students to login.\"",
            "10 |     \"Everyone: Open up a HubNet Client on your machine and...\"",
            "11 |       \"type your user name, select this activity and press ENTER.\"",
            "12 |",
            "13 |     \"Teacher: If you don't want to allow students to change their mind,...\"",
            "14 |       \"switch ALLOW-CHANGE? off.\"",
            "15 |         \"If you don't want to show the current data in the plot as...\"",
            "16 |           \"it's being collected, switch SHOW-DATA? off.\"",
            "17 |             \"You can turn it back on at any time to see the data.\"",
            "18 |",
            "19 |     \"Teacher: Press the NEW QUESTION button to input a question for everyone to answer.\"",
            "20 |     \"Everyone: Once you see the question, move your CHOICE slider to the value...\"",
            "21 |       \"you want to choose and press the CHOOSE button.\"",
            "22 |         \"Once you have chosen, your choice will appear in your CURRENT CHOICE monitor,...\"",
            "23 |           \"and your turtle in NetLogo will get brighter.\"",
            "24 |",
            "25 |     \"Teacher: To input another question, press NEW QUESTION again.\"",
            "26 |       \"The data and CURRENT QUESTION will be saved and then the question will change...\"",
            "27 |         \"to your new question and everyone will be able to make their choices on the new question.\"",
            "28 |           \"To return to a previous question, use the <<<PREV QUESTION...\"",
            "29 |             \"and NEXT QUESTION>>> buttons to cycle through the questions.\"",
            "30 |",
            "31 |     \"Teacher: To rerun the activity with the same group, press...\"",
            "32 |       \"the CLEAR QUESTIONS button to erase all the questions and data.\"",
            "33 |",
            "34 |     \"Teacher: To start the simulation over with a new group but reuse the same questions...\"",
            "35 |       \"stop the model by pressing the NetLogo GO button, if it is on...\"",
            "36 |         \"and press the CLEAR CLIENTS button.\"",
            "37 |",
            "38 |     \"Teacher: To start the simulation over with a new group but with new questions...\"",
            "39 |       \"stop the GO button, if it is on, and press the SETUP button.\"",
            "40 |",
            "41 |     \"Follow these instructions from the beginning.\"",
            "42 |   ]",
            "43 |   set quick-start (item qs-item qs-items)",
            "44 | end"
          ],
          "pseudoCode": [
            "1 | When setting up the quick start:",
            "2 |   Set the quick start item to 0.",
            "3 |   Set the quick start items to:",
            "4 |   [",
            "5 |     \"Teacher: Follow these directions to run the HubNet activity.\"",
            "6 |     \"Optional: Zoom In (see Tools in the Menu Bar)\"",
            "7 |     \"Teacher: Open up the HubNet Control Center (see Tools in the Menu Bar).\"",
            "8 |       \"This will show you the IP Address of this computer.\"",
            "9 |       \"Press the GO button and tell the students to login.\"",
            "10 |     \"Everyone: Open up a HubNet Client on your machine and...\"",
            "11 |       \"type your user name, select this activity and press ENTER.\"",
            "12 |",
            "13 |     \"Teacher: If you don't want to allow students to change their mind,...\"",
            "14 |       \"switch ALLOW-CHANGE? off.\"",
            "15 |         \"If you don't want to show the current data in the plot as...\"",
            "16 |           \"it's being collected, switch SHOW-DATA? off.\"",
            "17 |             \"You can turn it back on at any time to see the data.\"",
            "18 |",
            "19 |     \"Teacher: Press the NEW QUESTION button to input a question for everyone to answer.\"",
            "20 |     \"Everyone: Once you see the question, move your CHOICE slider to the value...\"",
            "21 |       \"you want to choose and press the CHOOSE button.\"",
            "22 |         \"Once you have chosen, your choice will appear in your CURRENT CHOICE monitor,...\"",
            "23 |           \"and your turtle in NetLogo will get brighter.\"",
            "24 |",
            "25 |     \"Teacher: To input another question, press NEW QUESTION again.\"",
            "26 |       \"The data and CURRENT QUESTION will be saved and then the question will change...\"",
            "27 |         \"to your new question and everyone will be able to make their choices on the new question.\"",
            "28 |           \"To return to a previous question, use the <<<PREV QUESTION...\"",
            "29 |             \"and NEXT QUESTION>>> buttons to cycle through the questions.\"",
            "30 |",
            "31 |     \"Teacher: To rerun the activity with the same group, press...\"",
            "32 |       \"the CLEAR QUESTIONS button to erase all the questions and data.\"",
            "33 |",
            "34 |     \"Teacher: To start the simulation over with a new group but reuse the same questions...\"",
            "35 |       \"stop the model by pressing the NetLogo GO button, if it is on...\"",
            "36 |         \"and press the CLEAR CLIENTS button.\"",
            "37 |",
            "38 |     \"Teacher: To start the simulation over with a new group but with new questions...\"",
            "39 |       \"stop the GO button, if it is on, and press the SETUP button.\"",
            "40 |",
            "41 |     \"Follow these instructions from the beginning.\"",
            "42 |   ]",
            "43 |   Set the quick start to the item at the quick start item index in the quick start items list.",
            "44 | End the setup-quick-start procedure."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to setup-quick-start",
              "pseudoCode": "When setting up the quick start:"
            },
            {
              "lineNumber": 2,
              "originalCode": "set qs-item 0",
              "pseudoCode": "Set the quick start item to 0."
            },
            {
              "lineNumber": 3,
              "originalCode": "set qs-items",
              "pseudoCode": "Set the quick start items to:"
            },
            {
              "lineNumber": 4,
              "originalCode": "[",
              "pseudoCode": "["
            },
            {
              "lineNumber": 5,
              "originalCode": "\"Teacher: Follow these directions to run the HubNet activity.\"",
              "pseudoCode": "\"Teacher: Follow these directions to run the HubNet activity.\""
            },
            {
              "lineNumber": 6,
              "originalCode": "\"Optional: Zoom In (see Tools in the Menu Bar)\"",
              "pseudoCode": "\"Optional: Zoom In (see Tools in the Menu Bar)\""
            },
            {
              "lineNumber": 7,
              "originalCode": "\"Teacher: Open up the HubNet Control Center (see Tools in the Menu Bar).\"",
              "pseudoCode": "\"Teacher: Open up the HubNet Control Center (see Tools in the Menu Bar).\""
            },
            {
              "lineNumber": 8,
              "originalCode": "\"This will show you the IP Address of this computer.\"",
              "pseudoCode": "\"This will show you the IP Address of this computer.\""
            },
            {
              "lineNumber": 9,
              "originalCode": "\"Press the GO button and tell the students to login.\"",
              "pseudoCode": "\"Press the GO button and tell the students to login.\""
            },
            {
              "lineNumber": 10,
              "originalCode": "\"Everyone: Open up a HubNet Client on your machine and...\"",
              "pseudoCode": "\"Everyone: Open up a HubNet Client on your machine and...\""
            },
            {
              "lineNumber": 11,
              "originalCode": "\"type your user name, select this activity and press ENTER.\"",
              "pseudoCode": "\"type your user name, select this activity and press ENTER.\""
            },
            {
              "lineNumber": 12,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 13,
              "originalCode": "\"Teacher: If you don't want to allow students to change their mind,...\"",
              "pseudoCode": "\"Teacher: If you don't want to allow students to change their mind,...\""
            },
            {
              "lineNumber": 14,
              "originalCode": "\"switch ALLOW-CHANGE? off.\"",
              "pseudoCode": "\"switch ALLOW-CHANGE? off.\""
            },
            {
              "lineNumber": 15,
              "originalCode": "\"If you don't want to show the current data in the plot as...\"",
              "pseudoCode": "\"If you don't want to show the current data in the plot as...\""
            },
            {
              "lineNumber": 16,
              "originalCode": "\"it's being collected, switch SHOW-DATA? off.\"",
              "pseudoCode": "\"it's being collected, switch SHOW-DATA? off.\""
            },
            {
              "lineNumber": 17,
              "originalCode": "\"You can turn it back on at any time to see the data.\"",
              "pseudoCode": "\"You can turn it back on at any time to see the data.\""
            },
            {
              "lineNumber": 18,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 19,
              "originalCode": "\"Teacher: Press the NEW QUESTION button to input a question for everyone to answer.\"",
              "pseudoCode": "\"Teacher: Press the NEW QUESTION button to input a question for everyone to answer.\""
            },
            {
              "lineNumber": 20,
              "originalCode": "\"Everyone: Once you see the question, move your CHOICE slider to the value...\"",
              "pseudoCode": "\"Everyone: Once you see the question, move your CHOICE slider to the value...\""
            },
            {
              "lineNumber": 21,
              "originalCode": "\"you want to choose and press the CHOOSE button.\"",
              "pseudoCode": "\"you want to choose and press the CHOOSE button.\""
            },
            {
              "lineNumber": 22,
              "originalCode": "\"Once you have chosen, your choice will appear in your CURRENT CHOICE monitor,...\"",
              "pseudoCode": "\"Once you have chosen, your choice will appear in your CURRENT CHOICE monitor,...\""
            },
            {
              "lineNumber": 23,
              "originalCode": "\"and your turtle in NetLogo will get brighter.\"",
              "pseudoCode": "\"and your turtle in NetLogo will get brighter.\""
            },
            {
              "lineNumber": 24,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 25,
              "originalCode": "\"Teacher: To input another question, press NEW QUESTION again.\"",
              "pseudoCode": "\"Teacher: To input another question, press NEW QUESTION again.\""
            },
            {
              "lineNumber": 26,
              "originalCode": "\"The data and CURRENT QUESTION will be saved and then the question will change...\"",
              "pseudoCode": "\"The data and CURRENT QUESTION will be saved and then the question will change...\""
            },
            {
              "lineNumber": 27,
              "originalCode": "\"to your new question and everyone will be able to make their choices on the new question.\"",
              "pseudoCode": "\"to your new question and everyone will be able to make their choices on the new question.\""
            },
            {
              "lineNumber": 28,
              "originalCode": "\"To return to a previous question, use the <<<PREV QUESTION...\"",
              "pseudoCode": "\"To return to a previous question, use the <<<PREV QUESTION...\""
            },
            {
              "lineNumber": 29,
              "originalCode": "\"and NEXT QUESTION>>> buttons to cycle through the questions.\"",
              "pseudoCode": "\"and NEXT QUESTION>>> buttons to cycle through the questions.\""
            },
            {
              "lineNumber": 30,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 31,
              "originalCode": "\"Teacher: To rerun the activity with the same group, press...\"",
              "pseudoCode": "\"Teacher: To rerun the activity with the same group, press...\""
            },
            {
              "lineNumber": 32,
              "originalCode": "\"the CLEAR QUESTIONS button to erase all the questions and data.\"",
              "pseudoCode": "\"the CLEAR QUESTIONS button to erase all the questions and data.\""
            },
            {
              "lineNumber": 33,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 34,
              "originalCode": "\"Teacher: To start the simulation over with a new group but reuse the same questions...\"",
              "pseudoCode": "\"Teacher: To start the simulation over with a new group but reuse the same questions...\""
            },
            {
              "lineNumber": 35,
              "originalCode": "\"stop the model by pressing the NetLogo GO button, if it is on...\"",
              "pseudoCode": "\"stop the model by pressing the NetLogo GO button, if it is on...\""
            },
            {
              "lineNumber": 36,
              "originalCode": "\"and press the CLEAR CLIENTS button.\"",
              "pseudoCode": "\"and press the CLEAR CLIENTS button.\""
            },
            {
              "lineNumber": 37,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 38,
              "originalCode": "\"Teacher: To start the simulation over with a new group but with new questions...\"",
              "pseudoCode": "\"Teacher: To start the simulation over with a new group but with new questions...\""
            },
            {
              "lineNumber": 39,
              "originalCode": "\"stop the GO button, if it is on, and press the SETUP button.\"",
              "pseudoCode": "\"stop the GO button, if it is on, and press the SETUP button.\""
            },
            {
              "lineNumber": 40,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 41,
              "originalCode": "\"Follow these instructions from the beginning.\"",
              "pseudoCode": "\"Follow these instructions from the beginning.\""
            },
            {
              "lineNumber": 42,
              "originalCode": "]",
              "pseudoCode": "]"
            },
            {
              "lineNumber": 43,
              "originalCode": "set quick-start (item qs-item qs-items)",
              "pseudoCode": "Set the quick start to the item at the quick start item index in the quick start items list."
            },
            {
              "lineNumber": 44,
              "originalCode": "end",
              "pseudoCode": "End the setup-quick-start procedure."
            }
          ]
        },
        {
          "name": "view-next-quick-start",
          "documentation": "; view the next item in the quickstart monitor",
          "originalCode": "to view-next-quick-start\n  set qs-item qs-item + 1\n  if qs-item >= length qs-items\n  [ set qs-item length qs-items - 1 ]\n  set quick-start (item qs-item qs-items)\nend",
          "numberedOriginalCode": [
            "1 | to view-next-quick-start",
            "2 |   set qs-item qs-item + 1",
            "3 |   if qs-item >= length qs-items",
            "4 |   [ set qs-item length qs-items - 1 ]",
            "5 |   set quick-start (item qs-item qs-items)",
            "6 | end"
          ],
          "pseudoCode": [
            "1 | When the view-next-quick-start procedure is called,",
            "2 |   increase the quick-start item by one",
            "3 |   if the quick-start item is greater than or equal to the length of the quick-start items",
            "4 |   [ set the quick-start item to the length of the quick-start items minus one ]",
            "5 |   set the quick-start to the item at the quick-start item in the quick-start items",
            "6 | end"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to view-next-quick-start",
              "pseudoCode": "When the view-next-quick-start procedure is called,"
            },
            {
              "lineNumber": 2,
              "originalCode": "set qs-item qs-item + 1",
              "pseudoCode": "increase the quick-start item by one"
            },
            {
              "lineNumber": 3,
              "originalCode": "if qs-item >= length qs-items",
              "pseudoCode": "if the quick-start item is greater than or equal to the length of the quick-start items"
            },
            {
              "lineNumber": 4,
              "originalCode": "[ set qs-item length qs-items - 1 ]",
              "pseudoCode": "[ set the quick-start item to the length of the quick-start items minus one ]"
            },
            {
              "lineNumber": 5,
              "originalCode": "set quick-start (item qs-item qs-items)",
              "pseudoCode": "set the quick-start to the item at the quick-start item in the quick-start items"
            },
            {
              "lineNumber": 6,
              "originalCode": "end",
              "pseudoCode": "end"
            }
          ]
        },
        {
          "name": "view-prev-quick-start",
          "documentation": "; view the previous item in the quickstart monitor",
          "originalCode": "to view-prev-quick-start\n  set qs-item qs-item - 1\n  if qs-item < 0\n  [ set qs-item 0 ]\n  set quick-start (item qs-item qs-items)\nend",
          "numberedOriginalCode": [
            "1 | to view-prev-quick-start",
            "2 |   set qs-item qs-item - 1",
            "3 |   if qs-item < 0",
            "4 |   [ set qs-item 0 ]",
            "5 |   set quick-start (item qs-item qs-items)",
            "6 | end"
          ],
          "pseudoCode": [
            "1 | When the view-prev-quick-start procedure is called,",
            "2 |   decrease the quick start item by one",
            "3 |   if the quick start item is less than zero",
            "4 |   [ set the quick start item to zero ]",
            "5 |   set the quick start to the item at the quick start item index in the quick start items list",
            "6 | End the procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to view-prev-quick-start",
              "pseudoCode": "When the view-prev-quick-start procedure is called,"
            },
            {
              "lineNumber": 2,
              "originalCode": "set qs-item qs-item - 1",
              "pseudoCode": "decrease the quick start item by one"
            },
            {
              "lineNumber": 3,
              "originalCode": "if qs-item < 0",
              "pseudoCode": "if the quick start item is less than zero"
            },
            {
              "lineNumber": 4,
              "originalCode": "[ set qs-item 0 ]",
              "pseudoCode": "[ set the quick start item to zero ]"
            },
            {
              "lineNumber": 5,
              "originalCode": "set quick-start (item qs-item qs-items)",
              "pseudoCode": "set the quick start to the item at the quick start item index in the quick start items list"
            },
            {
              "lineNumber": 6,
              "originalCode": "end",
              "pseudoCode": "End the procedure"
            }
          ]
        }
      ]
    },
    {
      "modelId": "HubNet Activities_Dice Stalagmite HubNet",
      "title": "Dice Stalagmite HubNet",
      "documentation": "$",
      "sourceLink": "https://ccl.northwestern.edu/netlogo/models/models/HubNet%20Activities/Dice%20Stalagmite%20HubNet.nlogo",
      "license": "CC BY-NC-SA 3.0",
      "sourceType": "Models Library",
      "collectedAt": "2025-02-25T23:21:56.407376",
      "procedures": [
        {
          "name": "startup",
          "documentation": "",
          "originalCode": "to startup\n  clear-all\n  setup\n  hubnet-reset\nend",
          "numberedOriginalCode": [
            "1 | to startup",
            "2 |   clear-all",
            "3 |   setup",
            "4 |   hubnet-reset",
            "5 | end"
          ],
          "pseudoCode": [
            "1 | To start up the program:",
            "2 |   Clear all the data and reset the environment.",
            "3 |   Set up the initial conditions.",
            "4 |   Reset the hubnet connection.",
            "5 | End the startup process."
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to startup",
              "pseudoCode": "To start up the program:"
            },
            {
              "lineNumber": 2,
              "originalCode": "clear-all",
              "pseudoCode": "Clear all the data and reset the environment."
            },
            {
              "lineNumber": 3,
              "originalCode": "setup",
              "pseudoCode": "Set up the initial conditions."
            },
            {
              "lineNumber": 4,
              "originalCode": "hubnet-reset",
              "pseudoCode": "Reset the hubnet connection."
            },
            {
              "lineNumber": 5,
              "originalCode": "end",
              "pseudoCode": "End the startup process."
            }
          ]
        },
        {
          "name": "setup",
          "documentation": "",
          "originalCode": "to setup\n  ;; get rid of all the existing dice\n  ask single-dice [ die ]\n  ask paired-dice [ die ]\n  ask stacked-dice [ die ]\n  clear-all-plots\n  set single-outcomes []\n  set pair-outcomes []\n  set rolls 0\n\n ;; assign outcomes to columns\n  ask patches with [pxcor > 0] [\n    set column floor ((pxcor + 1) / 2)\n  ]\n  ask patches with [pxcor < 0] [\n    set column pxcor - min-pxcor  + 1\n  ]\n\n  ;; color patches\n  ask patches [ set pcolor gray + 2 ]\n  ask patches with [column != 0 and (column != 1 or pxcor < 0) ] [\n    ifelse column mod 2 = 0\n      [ set pcolor gray - 3 ]\n      [ set pcolor red - 4 ]\n  ]\n\n  ;; patches in the 1 column of the pairs histogram\n  ;; are removed since 1 is not a possible sum.\n  ask patches with [ pcolor = gray + 2 ]\n  [ set column 0 ]\n\n  ;; set up agentsets\n  set top-row patches with [pycor = max-pycor]\n  set generators top-row with [pxcor = 0 or pxcor = 1]\nend",
          "numberedOriginalCode": [
            " 1 | to setup",
            " 2 |   ;; get rid of all the existing dice",
            " 3 |   ask single-dice [ die ]",
            " 4 |   ask paired-dice [ die ]",
            " 5 |   ask stacked-dice [ die ]",
            " 6 |   clear-all-plots",
            " 7 |   set single-outcomes []",
            " 8 |   set pair-outcomes []",
            " 9 |   set rolls 0",
            "10 |",
            "11 |  ;; assign outcomes to columns",
            "12 |   ask patches with [pxcor > 0] [",
            "13 |     set column floor ((pxcor + 1) / 2)",
            "14 |   ]",
            "15 |   ask patches with [pxcor < 0] [",
            "16 |     set column pxcor - min-pxcor  + 1",
            "17 |   ]",
            "18 |",
            "19 |   ;; color patches",
            "20 |   ask patches [ set pcolor gray + 2 ]",
            "21 |   ask patches with [column != 0 and (column != 1 or pxcor < 0) ] [",
            "22 |     ifelse column mod 2 = 0",
            "23 |       [ set pcolor gray - 3 ]",
            "24 |       [ set pcolor red - 4 ]",
            "25 |   ]",
            "26 |",
            "27 |   ;; patches in the 1 column of the pairs histogram",
            "28 |   ;; are removed since 1 is not a possible sum.",
            "29 |   ask patches with [ pcolor = gray + 2 ]",
            "30 |   [ set column 0 ]",
            "31 |",
            "32 |   ;; set up agentsets",
            "33 |   set top-row patches with [pycor = max-pycor]",
            "34 |   set generators top-row with [pxcor = 0 or pxcor = 1]",
            "35 | end"
          ],
          "pseudoCode": [
            "1 | Define a procedure named setup",
            "2 |   Remove all single-dice",
            "3 |   For each single-die, make it disappear",
            "4 |   Remove all paired-dice",
            "5 |   For each paired-die, make it disappear",
            "6 |   Remove all stacked-dice",
            "7 |   For each stacked-die, make it disappear",
            "8 |   Clear all plots",
            "9 |   Set single-outcomes to an empty list",
            "10|   Set pair-outcomes to an empty list",
            "11|   Set rolls to 0",
            "12|",
            "13|   Assign outcomes to columns",
            "14|   For each patch with a positive x-coordinate:",
            "15|     Set the column to the floor of ((x-coordinate + 1) / 2)",
            "16|   For each patch with a negative x-coordinate:",
            "17|     Set the column to x-coordinate - minimum x-coordinate + 1",
            "18|",
            "19|   Color patches",
            "20|   For each patch, set its color to gray + 2",
            "21|   For each patch where column is not 0 and (column is not 1 or x-coordinate is negative):",
            "22|     If column is even:",
            "23|       Set the color to gray - 3",
            "24|     Otherwise:",
            "25|       Set the color to red - 4",
            "26|",
            "27|   Patches in the 1 column of the pairs histogram are removed since 1 is not a possible sum.",
            "28|   For each patch with color gray + 2:",
            "29|     Set the column to 0",
            "30|",
            "31|   Set up agentsets",
            "32|   Set top-row to patches with the maximum y-coordinate",
            "33|   Set generators to top-row patches with x-coordinate 0 or 1",
            "34| End the procedure"
          ],
          "codeToPseudoCodeMap": [
            {
              "lineNumber": 1,
              "originalCode": "to setup",
              "pseudoCode": "Define a procedure named setup"
            },
            {
              "lineNumber": 2,
              "originalCode": ";; get rid of all the existing dice",
              "pseudoCode": "Remove all single-dice"
            },
            {
              "lineNumber": 3,
              "originalCode": "ask single-dice [ die ]",
              "pseudoCode": "For each single-die, make it disappear"
            },
            {
              "lineNumber": 4,
              "originalCode": "ask paired-dice [ die ]",
              "pseudoCode": "Remove all paired-dice"
            },
            {
              "lineNumber": 5,
              "originalCode": "ask stacked-dice [ die ]",
              "pseudoCode": "For each paired-die, make it disappear"
            },
            {
              "lineNumber": 6,
              "originalCode": "clear-all-plots",
              "pseudoCode": "Remove all stacked-dice"
            },
            {
              "lineNumber": 7,
              "originalCode": "set single-outcomes []",
              "pseudoCode": "For each stacked-die, make it disappear"
            },
            {
              "lineNumber": 8,
              "originalCode": "set pair-outcomes []",
              "pseudoCode": "Clear all plots"
            },
            {
              "lineNumber": 9,
              "originalCode": "set rolls 0",
              "pseudoCode": "Set single-outcomes to an empty list"
            },
            {
              "lineNumber": 10,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 11,
              "originalCode": ";; assign outcomes to columns",
              "pseudoCode": ""
            },
            {
              "lineNumber": 12,
              "originalCode": "ask patches with [pxcor > 0] [",
              "pseudoCode": ""
            },
            {
              "lineNumber": 13,
              "originalCode": "set column floor ((pxcor + 1) / 2)",
              "pseudoCode": ""
            },
            {
              "lineNumber": 14,
              "originalCode": "]",
              "pseudoCode": ""
            },
            {
              "lineNumber": 15,
              "originalCode": "ask patches with [pxcor < 0] [",
              "pseudoCode": ""
            },
            {
              "lineNumber": 16,
              "originalCode": "set column pxcor - min-pxcor  + 1",
              "pseudoCode": ""
            },
            {
              "lineNumber": 17,
              "originalCode": "]",
              "pseudoCode": ""
            },
            {
              "lineNumber": 18,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 19,
              "originalCode": ";; color patches",
              "pseudoCode": ""
            },
            {
              "lineNumber": 20,
              "originalCode": "ask patches [ set pcolor gray + 2 ]",
              "pseudoCode": ""
            },
            {
              "lineNumber": 21,
              "originalCode": "ask patches with [column != 0 and (column != 1 or pxcor < 0) ] [",
              "pseudoCode": ""
            },
            {
              "lineNumber": 22,
              "originalCode": "ifelse column mod 2 = 0",
              "pseudoCode": ""
            },
            {
              "lineNumber": 23,
              "originalCode": "[ set pcolor gray - 3 ]",
              "pseudoCode": ""
            },
            {
              "lineNumber": 24,
              "originalCode": "[ set pcolor red - 4 ]",
              "pseudoCode": ""
            },
            {
              "lineNumber": 25,
              "originalCode": "]",
              "pseudoCode": ""
            },
            {
              "lineNumber": 26,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 27,
              "originalCode": ";; patches in the 1 column of the pairs histogram",
              "pseudoCode": ""
            },
            {
              "lineNumber": 28,
              "originalCode": ";; are removed since 1 is not a possible sum.",
              "pseudoCode": ""
            },
            {
              "lineNumber": 29,
              "originalCode": "ask patches with [ pcolor = gray + 2 ]",
              "pseudoCode": ""
            },
            {
              "lineNumber": 30,
              "originalCode": "[ set column 0 ]",
              "pseudoCode": ""
            },
            {
              "lineNumber": 31,
              "originalCode": "",
              "pseudoCode": ""
            },
            {
              "lineNumber": 32,
              "originalCode": ";; set up agentsets",
              "pseudoCode": ""
            },
            {
              "lineNumber": 33,
              "originalCode": "set top-row patches with [pycor = max-pycor]",
              "pseudoCode": ""
            },
            {
              "lineNumber": 34,
              "originalCode": "set generators top-row with [pxcor = 0 or pxcor = 1]",
              "pseudoCode": ""
            },
            {
              "lineNumber": 35,
              "originalCode": "end",
              "pseudoCode": ""
            }
          ]
        },
        {
          "name": "go",
          "documentation": "",
          "originalCode": "to go\n  bump-down stacked-dice with [pxcor < 0]\n  bump-down stacked-dice with [pxcor > 0]\n\n  while [any? single-dice or any? paired-dice] [\n    move-paired-dice\n    move-single-dice\n    display    ;; force the view to update, so we see the dice move smoothly\n  ]\n\n  ;; check to see if clients have sent any messages\n  listen-clients\n\n  display ;; force the view to update, so we see the dice move smoothly\nend",
          "numberedOriginalCode": [
            " 1 | to go",
            " 2 |   bump-down stacked-dice with [pxcor < 0]",
            " 3 |   bump-down stacked-dice with [pxcor > 0]",
            " 4 |",
            " 5 |   while [any? single-dice or any? paired-dice] [",
            " 6 |     move-paired-dice",
            " 7 |     move-single-dice",
            " 8 |     display    ;; force the view to update, so we see the dice move smoothly",
            " 9 |   ]",
            "10 |",
            "11 |   ;; check to see if clients have sent any messages",
            "12 |   listen-clients",
            "13 |",
            "14 |   display ;; force the view to update, so we see the dice move smoothly",
            "15 | end"
          ],
          "pseudoCode": [],
          "codeToPseudoCodeMap": []
        },
        {
          "name": "move-paired-dice",
          "documentation": "",
          "originalCode": "to move-paired-dice\n  ;; if either of the two dice isn't at the right column yet,\n  ;; both dice move\n  ask paired-dice\n  [\n    ifelse pair-sum != column\n    [ fd 2 ]\n    [\n        ;; if at the bottom of the view, check if we should go \"underwater\"\n        if pycor = min-pycor\n        [ paired-die-check-visible ]\n        fall\n     ]\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to move-paired-dice",
            " 2 |   ;; if either of the two dice isn't at the right column yet,",
            " 3 |   ;; both dice move",
            " 4 |   ask paired-dice",
            " 5 |   [",
            " 6 |     ifelse pair-sum != column",
            " 7 |     [ fd 2 ]",
            " 8 |     [",
            " 9 |         ;; if at the bottom of the view, check if we should go \"underwater\"",
            "10 |         if pycor = min-pycor",
            "11 |         [ paired-die-check-visible ]",
            "12 |         fall",
            "13 |      ]",
            "14 |   ]",
            "15 | end"
          ],
          "pseudoCode": [],
          "codeToPseudoCodeMap": []
        },
        {
          "name": "move-single-dice",
          "documentation": "",
          "originalCode": "to move-single-dice\n  ;; two single dice may be falling in the same column, so we have\n  ;; to make sure that the bottom one moves before the top one,\n  ;; otherwise they could get confused\n  let how-many count single-dice\n  if how-many > 0 [\n    ask min-one-of single-dice [pycor] [ move-single-die ]\n  ]\n  if how-many > 1 [\n    ask max-one-of single-dice [pycor] [ move-single-die ]\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to move-single-dice",
            " 2 |   ;; two single dice may be falling in the same column, so we have",
            " 3 |   ;; to make sure that the bottom one moves before the top one,",
            " 4 |   ;; otherwise they could get confused",
            " 5 |   let how-many count single-dice",
            " 6 |   if how-many > 0 [",
            " 7 |     ask min-one-of single-dice [pycor] [ move-single-die ]",
            " 8 |   ]",
            " 9 |   if how-many > 1 [",
            "10 |     ask max-one-of single-dice [pycor] [ move-single-die ]",
            "11 |   ]",
            "12 | end"
          ],
          "pseudoCode": [],
          "codeToPseudoCodeMap": []
        },
        {
          "name": "move-single-die",
          "documentation": "; single-die procedure",
          "originalCode": "to move-single-die  ;; single-die procedure\n  ifelse die-value != column\n    [ fd 1 ]\n    [ ;; if at the bottom of the view, check if we should go \"underwater\"\n      if pycor = min-pycor [ single-die-check-visible ]\n      fall\n    ]\nend",
          "numberedOriginalCode": [
            "1 | to move-single-die  ;; single-die procedure",
            "2 |   ifelse die-value != column",
            "3 |     [ fd 1 ]",
            "4 |     [ ;; if at the bottom of the view, check if we should go \"underwater\"",
            "5 |       if pycor = min-pycor [ single-die-check-visible ]",
            "6 |       fall",
            "7 |     ]",
            "8 | end"
          ],
          "pseudoCode": [],
          "codeToPseudoCodeMap": []
        },
        {
          "name": "fall",
          "documentation": "; single-die or paired-die procedure",
          "originalCode": "to fall  ;; single-die or paired-die procedure\n  set heading 180\n  ifelse (pycor > min-pycor) and (not any? stacked-dice-on patch-ahead 1)\n    [ fd 1 ]\n    ;; stop falling\n    [ ;; changing breeds resets our shape, so we have to remember our old shape\n      let old-shape shape\n      set breed stacked-dice\n      set shape old-shape\n    ]\nend",
          "numberedOriginalCode": [
            " 1 | to fall  ;; single-die or paired-die procedure",
            " 2 |   set heading 180",
            " 3 |   ifelse (pycor > min-pycor) and (not any? stacked-dice-on patch-ahead 1)",
            " 4 |     [ fd 1 ]",
            " 5 |     ;; stop falling",
            " 6 |     [ ;; changing breeds resets our shape, so we have to remember our old shape",
            " 7 |       let old-shape shape",
            " 8 |       set breed stacked-dice",
            " 9 |       set shape old-shape",
            "10 |     ]",
            "11 | end"
          ],
          "pseudoCode": [],
          "codeToPseudoCodeMap": []
        },
        {
          "name": "single-die-check-visible",
          "documentation": "; determines if my column is tall enough to be seen\n; single-die procedure",
          "originalCode": "to single-die-check-visible  ;; single-die procedure\n  if single-outcomes = [] [ stop ]\n  let mode first modes single-outcomes\n  let height-of-tallest-column length filter [ n -> n = mode ] single-outcomes\n  let height-of-my-column length filter [ n -> n = die-value ] single-outcomes\n  if (height-of-tallest-column - height-of-my-column) >= world-height - 2 [ die ]\nend",
          "numberedOriginalCode": [
            "1 | to single-die-check-visible  ;; single-die procedure",
            "2 |   if single-outcomes = [] [ stop ]",
            "3 |   let mode first modes single-outcomes",
            "4 |   let height-of-tallest-column length filter [ n -> n = mode ] single-outcomes",
            "5 |   let height-of-my-column length filter [ n -> n = die-value ] single-outcomes",
            "6 |   if (height-of-tallest-column - height-of-my-column) >= world-height - 2 [ die ]",
            "7 | end"
          ],
          "pseudoCode": [],
          "codeToPseudoCodeMap": []
        },
        {
          "name": "paired-die-check-visible",
          "documentation": "; determines if my column is tall enough to be seen\n; paired-die procedure",
          "originalCode": "to paired-die-check-visible  ;; paired-die procedure\n  if pair-outcomes = [] [ stop ]\n  let mode first modes pair-outcomes\n  let height-of-tallest-column length filter [ n -> n = mode ] pair-outcomes\n  let height-of-my-column length filter [ n -> n = pair-sum ] pair-outcomes\n  if (height-of-tallest-column - height-of-my-column) >= world-height - 2 [ die ]\nend",
          "numberedOriginalCode": [
            "1 | to paired-die-check-visible  ;; paired-die procedure",
            "2 |   if pair-outcomes = [] [ stop ]",
            "3 |   let mode first modes pair-outcomes",
            "4 |   let height-of-tallest-column length filter [ n -> n = mode ] pair-outcomes",
            "5 |   let height-of-my-column length filter [ n -> n = pair-sum ] pair-outcomes",
            "6 |   if (height-of-tallest-column - height-of-my-column) >= world-height - 2 [ die ]",
            "7 | end"
          ],
          "pseudoCode": [],
          "codeToPseudoCodeMap": []
        },
        {
          "name": "bump-down",
          "documentation": "",
          "originalCode": "to bump-down [candidates]\n  while [any? candidates with [pycor = max-pycor - 2]] [\n    ask candidates [\n      if pycor = min-pycor [ die ]\n      fd 1\n    ]\n  ]\nend",
          "numberedOriginalCode": [
            "1 | to bump-down [candidates]",
            "2 |   while [any? candidates with [pycor = max-pycor - 2]] [",
            "3 |     ask candidates [",
            "4 |       if pycor = min-pycor [ die ]",
            "5 |       fd 1",
            "6 |     ]",
            "7 |   ]",
            "8 | end"
          ],
          "pseudoCode": [],
          "codeToPseudoCodeMap": []
        },
        {
          "name": "generate-roll",
          "documentation": ";creates a new pair of dice (both singles and pairs) [given the die values]",
          "originalCode": "to generate-roll [ die-1 die-2 the-color]\n  let die-values (list die-1 die-2)\n  let leftmost-pxcor min [pxcor] of generators\n\n  ;;ask each generator patch to create a pair (one die, with breed pair), with the values\n  ask generators [\n    let index pxcor - leftmost-pxcor\n    sprout-paired-dice 1 [\n      set color the-color\n      set die-value item index die-values\n      set shape word \"die \" die-value\n      set heading 90\n    ]\n  ]\n\n  ;; clone the paired dice to make the single dice\n  ask paired-dice [\n    hatch-single-dice 1 [\n      set heading 270\n      ;; changing breeds resets our shape, so we must explicitly adopt\n      ;; our parent's shape\n      set shape [shape] of myself\n    ]\n  ]\n\n  ;; set the sum variable of the pairs\n  let total sum [die-value] of paired-dice\n  ask paired-dice\n  [\n    set pair-sum total\n  ]\n  ;; add to outcomes lists\n  set pair-outcomes lput total pair-outcomes\n  ask single-dice [ set single-outcomes lput die-value single-outcomes ]\n\n  set rolls rolls + 1\nend",
          "numberedOriginalCode": [
            " 1 | to generate-roll [ die-1 die-2 the-color]",
            " 2 |   let die-values (list die-1 die-2)",
            " 3 |   let leftmost-pxcor min [pxcor] of generators",
            " 4 |",
            " 5 |   ;;ask each generator patch to create a pair (one die, with breed pair), with the values",
            " 6 |   ask generators [",
            " 7 |     let index pxcor - leftmost-pxcor",
            " 8 |     sprout-paired-dice 1 [",
            " 9 |       set color the-color",
            "10 |       set die-value item index die-values",
            "11 |       set shape word \"die \" die-value",
            "12 |       set heading 90",
            "13 |     ]",
            "14 |   ]",
            "15 |",
            "16 |   ;; clone the paired dice to make the single dice",
            "17 |   ask paired-dice [",
            "18 |     hatch-single-dice 1 [",
            "19 |       set heading 270",
            "20 |       ;; changing breeds resets our shape, so we must explicitly adopt",
            "21 |       ;; our parent's shape",
            "22 |       set shape [shape] of myself",
            "23 |     ]",
            "24 |   ]",
            "25 |",
            "26 |   ;; set the sum variable of the pairs",
            "27 |   let total sum [die-value] of paired-dice",
            "28 |   ask paired-dice",
            "29 |   [",
            "30 |     set pair-sum total",
            "31 |   ]",
            "32 |   ;; add to outcomes lists",
            "33 |   set pair-outcomes lput total pair-outcomes",
            "34 |   ask single-dice [ set single-outcomes lput die-value single-outcomes ]",
            "35 |",
            "36 |   set rolls rolls + 1",
            "37 | end"
          ],
          "pseudoCode": [],
          "codeToPseudoCodeMap": []
        },
        {
          "name": "random-roll",
          "documentation": "",
          "originalCode": "to random-roll\n  ;; generates a random pair\n  generate-roll (1 + random 6) (1 + random 6) white\n  update-plots\nend",
          "numberedOriginalCode": [
            "1 | to random-roll",
            "2 |   ;; generates a random pair",
            "3 |   generate-roll (1 + random 6) (1 + random 6) white",
            "4 |   update-plots",
            "5 | end"
          ],
          "pseudoCode": [],
          "codeToPseudoCodeMap": []
        },
        {
          "name": "auto-fill",
          "documentation": "; keep doing a random-roll continuously",
          "originalCode": "to auto-fill\n  random-roll\n  repeat 3 [ go ]\nend",
          "numberedOriginalCode": [
            "1 | to auto-fill",
            "2 |   random-roll",
            "3 |   repeat 3 [ go ]",
            "4 | end"
          ],
          "pseudoCode": [],
          "codeToPseudoCodeMap": []
        },
        {
          "name": "simulate",
          "documentation": "; runs the simulation num times",
          "originalCode": "to simulate [ num ]\n  repeat num\n  [\n    random-roll\n    repeat 2 [ go ]\n  ]\n repeat 70 [ go ]\nend",
          "numberedOriginalCode": [
            "1 | to simulate [ num ]",
            "2 |   repeat num",
            "3 |   [",
            "4 |     random-roll",
            "5 |     repeat 2 [ go ]",
            "6 |   ]",
            "7 |  repeat 70 [ go ]",
            "8 | end"
          ],
          "pseudoCode": [],
          "codeToPseudoCodeMap": []
        },
        {
          "name": "listen-clients",
          "documentation": "",
          "originalCode": "to listen-clients\n  if hubnet-message-waiting?\n  [\n    hubnet-fetch-message\n    ;;creates a new client turtle if new HubNet client joining\n    ifelse hubnet-enter-message?\n    [ create-client ]\n    [\n      ;;if a HubNet client quit, kill client turtle\n      ifelse hubnet-exit-message?\n      [\n         ask clients with [ user-id = hubnet-message-source ]\n          [ die ]\n      ]\n      ;;if just a message from the client, execute appropriately\n      [\n        ask clients with [ user-id = hubnet-message-source ]\n          [ exe-cmd hubnet-message ]\n      ]\n    ]\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to listen-clients",
            " 2 |   if hubnet-message-waiting?",
            " 3 |   [",
            " 4 |     hubnet-fetch-message",
            " 5 |     ;;creates a new client turtle if new HubNet client joining",
            " 6 |     ifelse hubnet-enter-message?",
            " 7 |     [ create-client ]",
            " 8 |     [",
            " 9 |       ;;if a HubNet client quit, kill client turtle",
            "10 |       ifelse hubnet-exit-message?",
            "11 |       [",
            "12 |          ask clients with [ user-id = hubnet-message-source ]",
            "13 |           [ die ]",
            "14 |       ]",
            "15 |       ;;if just a message from the client, execute appropriately",
            "16 |       [",
            "17 |         ask clients with [ user-id = hubnet-message-source ]",
            "18 |           [ exe-cmd hubnet-message ]",
            "19 |       ]",
            "20 |     ]",
            "21 |   ]",
            "22 | end"
          ],
          "pseudoCode": [],
          "codeToPseudoCodeMap": []
        },
        {
          "name": "create-client",
          "documentation": "",
          "originalCode": "to create-client\n  ;; makes a turtle to store the data specific to this particular\n  ;; client , sets the values of dice to a default and sets\n  ;; the user-id variable to the hubnet-source\n  create-clients 1\n  [\n    hide-turtle\n    set user-id hubnet-message-source\n    set user-color item (count clients mod length base-colors) base-colors\n    set die1 \"--\"\n    set die2 \"--\"\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to create-client",
            " 2 |   ;; makes a turtle to store the data specific to this particular",
            " 3 |   ;; client , sets the values of dice to a default and sets",
            " 4 |   ;; the user-id variable to the hubnet-source",
            " 5 |   create-clients 1",
            " 6 |   [",
            " 7 |     hide-turtle",
            " 8 |     set user-id hubnet-message-source",
            " 9 |     set user-color item (count clients mod length base-colors) base-colors",
            "10 |     set die1 \"--\"",
            "11 |     set die2 \"--\"",
            "12 |   ]",
            "13 | end"
          ],
          "pseudoCode": [],
          "codeToPseudoCodeMap": []
        },
        {
          "name": "exe-cmd",
          "documentation": "; client procedure",
          "originalCode": "to exe-cmd [ message ] ;; client procedure\n  if hubnet-message-tag = \"Die_A\"\n  [ set die1 message stop ]\n  if hubnet-message-tag = \"Die_B\"\n  [ set die2 message stop ]\n  if hubnet-message-tag = \"Submit\"\n  [\n    ;; if one of the choices is not a number\n    ;; report an error\n    ifelse die1 = \"--\" or die2 = \"--\"\n    [\n      hubnet-send user-id \"Message:\" \"Please select values for both dice.\"\n    ]\n    [\n      ;; clear the user's interface\n      hubnet-send user-id \"Die_A\" \"--\"\n      hubnet-send user-id \"Die_B\" \"--\"\n\n      ;; generate the pair and the singles\n      generate-roll die1 die2 ifelse-value colored-dice? [ user-color ][ white ]\n      ;; send confirmation message to user\n      hubnet-send user-id \"Message:\" (word \"Thank you. Your input was \" die1 \"-\" die2 \".\")\n\n      ;; reset the client-turtle's variables\n      set die1 \"--\"\n      set die2 \"--\"\n      update-plots\n    ]\n  ]\nend",
          "numberedOriginalCode": [
            " 1 | to exe-cmd [ message ] ;; client procedure",
            " 2 |   if hubnet-message-tag = \"Die_A\"",
            " 3 |   [ set die1 message stop ]",
            " 4 |   if hubnet-message-tag = \"Die_B\"",
            " 5 |   [ set die2 message stop ]",
            " 6 |   if hubnet-message-tag = \"Submit\"",
            " 7 |   [",
            " 8 |     ;; if one of the choices is not a number",
            " 9 |     ;; report an error",
            "10 |     ifelse die1 = \"--\" or die2 = \"--\"",
            "11 |     [",
            "12 |       hubnet-send user-id \"Message:\" \"Please select values for both dice.\"",
            "13 |     ]",
            "14 |     [",
            "15 |       ;; clear the user's interface",
            "16 |       hubnet-send user-id \"Die_A\" \"--\"",
            "17 |       hubnet-send user-id \"Die_B\" \"--\"",
            "18 |",
            "19 |       ;; generate the pair and the singles",
            "20 |       generate-roll die1 die2 ifelse-value colored-dice? [ user-color ][ white ]",
            "21 |       ;; send confirmation message to user",
            "22 |       hubnet-send user-id \"Message:\" (word \"Thank you. Your input was \" die1 \"-\" die2 \".\")",
            "23 |",
            "24 |       ;; reset the client-turtle's variables",
            "25 |       set die1 \"--\"",
            "26 |       set die2 \"--\"",
            "27 |       update-plots",
            "28 |     ]",
            "29 |   ]",
            "30 | end"
          ],
          "pseudoCode": [],
          "codeToPseudoCodeMap": []
        }
      ]
    }
  ],
  "totalModels": 5,
  "generatedAt": "2025-02-25T23:21:59.833193",
  "_incremental": true
}